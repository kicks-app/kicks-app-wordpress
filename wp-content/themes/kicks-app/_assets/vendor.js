!function(t){function e(n){if(i[n])return i[n].exports;var o=i[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n=window.webpackJsonp;window.webpackJsonp=function(r,s){for(var a,l,h=0,f=[];h<r.length;h++)l=r[h],o[l]&&f.push.apply(f,o[l]),o[l]=0;for(a in s)t[a]=s[a];for(n&&n(r,s);f.length;)f.shift().call(null,e);if(s[0])return i[0]=0,e(0)};var i={},o={1:0};e.e=function(t,n){if(0===o[t])return n.call(null,e);if(void 0!==o[t])o[t].push(n);else{o[t]=[n];var i=document.getElementsByTagName("head")[0],r=document.createElement("script");r.type="text/javascript",r.charset="utf-8",r.async=!0,r.src=e.p+""+t+".app.js",i.appendChild(r)}},e.m=t,e.c=i,e.p=""}([,,function(t,e,n){(function(e){t.exports=e.Tether=n(3)}).call(e,function(){return this}())},function(t,e,n){(function(e){t.exports=e.$=n(4)}).call(e,function(){return this}())},function(t,e,n){var i,o;/*! tether 1.3.7 */
!function(r,s){i=s,o="function"==typeof i?i.call(e,n,e,t):i,!(void 0!==o&&(t.exports=o))}(this,function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t){var e=t.getBoundingClientRect(),n={};for(var i in e)n[i]=e[i];if(t.ownerDocument!==document){var r=t.ownerDocument.defaultView.frameElement;if(r){var s=o(r);n.top+=s.top,n.bottom+=s.top,n.left+=s.left,n.right+=s.left}}return n}function r(t){var e=getComputedStyle(t)||{},n=e.position,i=[];if("fixed"===n)return[t];for(var o=t;(o=o.parentNode)&&o&&1===o.nodeType;){var r=void 0;try{r=getComputedStyle(o)}catch(s){}if("undefined"==typeof r||null===r)return i.push(o),i;var a=r,l=a.overflow,h=a.overflowX,f=a.overflowY;/(auto|scroll)/.test(l+f+h)&&("absolute"!==n||["relative","absolute","fixed"].indexOf(r.position)>=0)&&i.push(o)}return i.push(t.ownerDocument.body),t.ownerDocument!==document&&i.push(t.ownerDocument.defaultView),i}function s(){b&&document.body.removeChild(b),b=null}function a(t){var e=void 0;t===document?(e=document,t=document.documentElement):e=t.ownerDocument;var n=e.documentElement,i=o(t),r=w();return i.top-=r.top,i.left-=r.left,"undefined"==typeof i.width&&(i.width=document.body.scrollWidth-i.left-i.right),"undefined"==typeof i.height&&(i.height=document.body.scrollHeight-i.top-i.bottom),i.top=i.top-n.clientTop,i.left=i.left-n.clientLeft,i.right=e.body.clientWidth-i.width-i.left,i.bottom=e.body.clientHeight-i.height-i.top,i}function l(t){return t.offsetParent||document.documentElement}function h(){if(S)return S;var t=document.createElement("div");t.style.width="100%",t.style.height="200px";var e=document.createElement("div");f(e.style,{position:"absolute",top:0,left:0,pointerEvents:"none",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),e.appendChild(t),document.body.appendChild(e);var n=t.offsetWidth;e.style.overflow="scroll";var i=t.offsetWidth;n===i&&(i=e.clientWidth),document.body.removeChild(e);var o=n-i;return S={width:o,height:o}}function f(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=[];return Array.prototype.push.apply(e,arguments),e.slice(1).forEach(function(e){if(e)for(var n in e)({}).hasOwnProperty.call(e,n)&&(t[n]=e[n])}),t}function u(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.remove(e)});else{var n=new RegExp("(^| )"+e.split(" ").join("|")+"( |$)","gi"),i=p(t).replace(n," ");g(t,i)}}function c(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.add(e)});else{u(t,e);var n=p(t)+(" "+e);g(t,n)}}function d(t,e){if("undefined"!=typeof t.classList)return t.classList.contains(e);var n=p(t);return new RegExp("(^| )"+e+"( |$)","gi").test(n)}function p(t){return t.className instanceof t.ownerDocument.defaultView.SVGAnimatedString?t.className.baseVal:t.className}function g(t,e){t.setAttribute("class",e)}function v(t,e,n){n.forEach(function(n){e.indexOf(n)===-1&&d(t,n)&&u(t,n)}),e.forEach(function(e){d(t,e)||c(t,e)})}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function m(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _(t,e){var n=arguments.length<=2||void 0===arguments[2]?1:arguments[2];return t+n>=e&&e>=t-n}function y(){return"undefined"!=typeof performance&&"undefined"!=typeof performance.now?performance.now():+new Date}function E(){for(var t={top:0,left:0},e=arguments.length,n=Array(e),i=0;i<e;i++)n[i]=arguments[i];return n.forEach(function(e){var n=e.top,i=e.left;"string"==typeof n&&(n=parseFloat(n,10)),"string"==typeof i&&(i=parseFloat(i,10)),t.top+=n,t.left+=i}),t}function T(t,e){return"string"==typeof t.left&&t.left.indexOf("%")!==-1&&(t.left=parseFloat(t.left,10)/100*e.width),"string"==typeof t.top&&t.top.indexOf("%")!==-1&&(t.top=parseFloat(t.top,10)/100*e.height),t}function C(t,e){return"scrollParent"===e?e=t.scrollParents[0]:"window"===e&&(e=[pageXOffset,pageYOffset,innerWidth+pageXOffset,innerHeight+pageYOffset]),e===document&&(e=e.documentElement),"undefined"!=typeof e.nodeType&&!function(){var t=e,n=a(e),i=n,o=getComputedStyle(e);if(e=[i.left,i.top,n.width+i.left,n.height+i.top],t.ownerDocument!==document){var r=t.ownerDocument.defaultView;e[0]+=r.pageXOffset,e[1]+=r.pageYOffset,e[2]+=r.pageXOffset,e[3]+=r.pageYOffset}z.forEach(function(t,n){t=t[0].toUpperCase()+t.substr(1),"Top"===t||"Left"===t?e[n]+=parseFloat(o["border"+t+"Width"]):e[n]-=parseFloat(o["border"+t+"Width"])})}(),e}var I=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),A=void 0;"undefined"==typeof A&&(A={modules:[]});var b=null,O=function(){var t=0;return function(){return++t}}(),D={},w=function(){var t=b;t||(t=document.createElement("div"),t.setAttribute("data-tether-id",O()),f(t.style,{top:0,left:0,position:"absolute"}),document.body.appendChild(t),b=t);var e=t.getAttribute("data-tether-id");return"undefined"==typeof D[e]&&(D[e]=o(t),k(function(){delete D[e]})),D[e]},S=null,N=[],k=function(t){N.push(t)},L=function(){for(var t=void 0;t=N.pop();)t()},P=function(){function t(){i(this,t)}return I(t,[{key:"on",value:function(t,e,n){var i=!(arguments.length<=3||void 0===arguments[3])&&arguments[3];"undefined"==typeof this.bindings&&(this.bindings={}),"undefined"==typeof this.bindings[t]&&(this.bindings[t]=[]),this.bindings[t].push({handler:e,ctx:n,once:i})}},{key:"once",value:function(t,e,n){this.on(t,e,n,!0)}},{key:"off",value:function(t,e){if("undefined"!=typeof this.bindings&&"undefined"!=typeof this.bindings[t])if("undefined"==typeof e)delete this.bindings[t];else for(var n=0;n<this.bindings[t].length;)this.bindings[t][n].handler===e?this.bindings[t].splice(n,1):++n}},{key:"trigger",value:function(t){if("undefined"!=typeof this.bindings&&this.bindings[t]){for(var e=0,n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];for(;e<this.bindings[t].length;){var r=this.bindings[t][e],s=r.handler,a=r.ctx,l=r.once,h=a;"undefined"==typeof h&&(h=this),s.apply(h,i),l?this.bindings[t].splice(e,1):++e}}}}]),t}();A.Utils={getActualBoundingClientRect:o,getScrollParents:r,getBounds:a,getOffsetParent:l,extend:f,addClass:c,removeClass:u,hasClass:d,updateClasses:v,defer:k,flush:L,uniqueId:O,Evented:P,getScrollBarSize:h,removeUtilElements:s};var x=function(){function t(t,e){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(l){o=!0,r=l}finally{try{!i&&a["return"]&&a["return"]()}finally{if(o)throw r}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),I=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),R=function(t,e,n){for(var i=!0;i;){var o=t,r=e,s=n;i=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,r);if(void 0!==a){if("value"in a)return a.value;var l=a.get;if(void 0===l)return;return l.call(s)}var h=Object.getPrototypeOf(o);if(null===h)return;t=h,e=r,n=s,i=!0,a=h=void 0}};if("undefined"==typeof A)throw new Error("You must include the utils.js file before tether.js");var H=A.Utils,r=H.getScrollParents,a=H.getBounds,l=H.getOffsetParent,f=H.extend,c=H.addClass,u=H.removeClass,v=H.updateClasses,k=H.defer,L=H.flush,h=H.getScrollBarSize,s=H.removeUtilElements,W=function(){if("undefined"==typeof document)return"";for(var t=document.createElement("div"),e=["transform","WebkitTransform","OTransform","MozTransform","msTransform"],n=0;n<e.length;++n){var i=e[n];if(void 0!==t.style[i])return i}}(),M=[],j=function(){M.forEach(function(t){t.position(!1)}),L()};!function(){var t=null,e=null,n=null,i=function o(){return"undefined"!=typeof e&&e>16?(e=Math.min(e-16,250),void(n=setTimeout(o,250))):void("undefined"!=typeof t&&y()-t<10||(null!=n&&(clearTimeout(n),n=null),t=y(),j(),e=y()-t))};"undefined"!=typeof window&&"undefined"!=typeof window.addEventListener&&["resize","scroll","touchmove"].forEach(function(t){window.addEventListener(t,i)})}();var V={center:"center",left:"right",right:"left"},U={middle:"middle",top:"bottom",bottom:"top"},F={top:0,left:0,middle:"50%",center:"50%",bottom:"100%",right:"100%"},B=function(t,e){var n=t.left,i=t.top;return"auto"===n&&(n=V[e.left]),"auto"===i&&(i=U[e.top]),{left:n,top:i}},K=function(t){var e=t.left,n=t.top;return"undefined"!=typeof F[t.left]&&(e=F[t.left]),"undefined"!=typeof F[t.top]&&(n=F[t.top]),{left:e,top:n}},Q=function(t){var e=t.split(" "),n=x(e,2),i=n[0],o=n[1];return{top:i,left:o}},G=Q,Y=function(t){function e(t){var n=this;i(this,e),R(Object.getPrototypeOf(e.prototype),"constructor",this).call(this),this.position=this.position.bind(this),M.push(this),this.history=[],this.setOptions(t,!1),A.modules.forEach(function(t){"undefined"!=typeof t.initialize&&t.initialize.call(n)}),this.position()}return m(e,t),I(e,[{key:"getClass",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"":arguments[0],e=this.options.classes;return"undefined"!=typeof e&&e[t]?this.options.classes[t]:this.options.classPrefix?this.options.classPrefix+"-"+t:t}},{key:"setOptions",value:function(t){var e=this,n=arguments.length<=1||void 0===arguments[1]||arguments[1],i={offset:"0 0",targetOffset:"0 0",targetAttachment:"auto auto",classPrefix:"tether"};this.options=f(i,t);var o=this.options,s=o.element,a=o.target,l=o.targetModifier;if(this.element=s,this.target=a,this.targetModifier=l,"viewport"===this.target?(this.target=document.body,this.targetModifier="visible"):"scroll-handle"===this.target&&(this.target=document.body,this.targetModifier="scroll-handle"),["element","target"].forEach(function(t){if("undefined"==typeof e[t])throw new Error("Tether Error: Both element and target must be defined");"undefined"!=typeof e[t].jquery?e[t]=e[t][0]:"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))}),c(this.element,this.getClass("element")),this.options.addTargetClasses!==!1&&c(this.target,this.getClass("target")),!this.options.attachment)throw new Error("Tether Error: You must provide an attachment");this.targetAttachment=G(this.options.targetAttachment),this.attachment=G(this.options.attachment),this.offset=Q(this.options.offset),this.targetOffset=Q(this.options.targetOffset),"undefined"!=typeof this.scrollParents&&this.disable(),"scroll-handle"===this.targetModifier?this.scrollParents=[this.target]:this.scrollParents=r(this.target),this.options.enabled!==!1&&this.enable(n)}},{key:"getTargetBounds",value:function(){if("undefined"==typeof this.targetModifier)return a(this.target);if("visible"===this.targetModifier){if(this.target===document.body)return{top:pageYOffset,left:pageXOffset,height:innerHeight,width:innerWidth};var t=a(this.target),e={height:t.height,width:t.width,top:t.top,left:t.left};return e.height=Math.min(e.height,t.height-(pageYOffset-t.top)),e.height=Math.min(e.height,t.height-(t.top+t.height-(pageYOffset+innerHeight))),e.height=Math.min(innerHeight,e.height),e.height-=2,e.width=Math.min(e.width,t.width-(pageXOffset-t.left)),e.width=Math.min(e.width,t.width-(t.left+t.width-(pageXOffset+innerWidth))),e.width=Math.min(innerWidth,e.width),e.width-=2,e.top<pageYOffset&&(e.top=pageYOffset),e.left<pageXOffset&&(e.left=pageXOffset),e}if("scroll-handle"===this.targetModifier){var t=void 0,n=this.target;n===document.body?(n=document.documentElement,t={left:pageXOffset,top:pageYOffset,height:innerHeight,width:innerWidth}):t=a(n);var i=getComputedStyle(n),o=n.scrollWidth>n.clientWidth||[i.overflow,i.overflowX].indexOf("scroll")>=0||this.target!==document.body,r=0;o&&(r=15);var s=t.height-parseFloat(i.borderTopWidth)-parseFloat(i.borderBottomWidth)-r,e={width:15,height:.975*s*(s/n.scrollHeight),left:t.left+t.width-parseFloat(i.borderLeftWidth)-15},l=0;s<408&&this.target===document.body&&(l=-11e-5*Math.pow(s,2)-.00727*s+22.58),this.target!==document.body&&(e.height=Math.max(e.height,24));var h=this.target.scrollTop/(n.scrollHeight-s);return e.top=h*(s-e.height-l)+t.top+parseFloat(i.borderTopWidth),this.target===document.body&&(e.height=Math.max(e.height,24)),e}}},{key:"clearCache",value:function(){this._cache={}}},{key:"cache",value:function(t,e){return"undefined"==typeof this._cache&&(this._cache={}),"undefined"==typeof this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]}},{key:"enable",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]||arguments[0];this.options.addTargetClasses!==!1&&c(this.target,this.getClass("enabled")),c(this.element,this.getClass("enabled")),this.enabled=!0,this.scrollParents.forEach(function(e){e!==t.target.ownerDocument&&e.addEventListener("scroll",t.position)}),e&&this.position()}},{key:"disable",value:function(){var t=this;u(this.target,this.getClass("enabled")),u(this.element,this.getClass("enabled")),this.enabled=!1,"undefined"!=typeof this.scrollParents&&this.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.position)})}},{key:"destroy",value:function(){var t=this;this.disable(),M.forEach(function(e,n){e===t&&M.splice(n,1)}),0===M.length&&s()}},{key:"updateAttachClasses",value:function(t,e){var n=this;t=t||this.attachment,e=e||this.targetAttachment;var i=["left","top","bottom","right","middle","center"];"undefined"!=typeof this._addAttachClasses&&this._addAttachClasses.length&&this._addAttachClasses.splice(0,this._addAttachClasses.length),"undefined"==typeof this._addAttachClasses&&(this._addAttachClasses=[]);var o=this._addAttachClasses;t.top&&o.push(this.getClass("element-attached")+"-"+t.top),t.left&&o.push(this.getClass("element-attached")+"-"+t.left),e.top&&o.push(this.getClass("target-attached")+"-"+e.top),e.left&&o.push(this.getClass("target-attached")+"-"+e.left);var r=[];i.forEach(function(t){r.push(n.getClass("element-attached")+"-"+t),r.push(n.getClass("target-attached")+"-"+t)}),k(function(){"undefined"!=typeof n._addAttachClasses&&(v(n.element,n._addAttachClasses,r),n.options.addTargetClasses!==!1&&v(n.target,n._addAttachClasses,r),delete n._addAttachClasses)})}},{key:"position",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]||arguments[0];if(this.enabled){this.clearCache();var n=B(this.targetAttachment,this.attachment);this.updateAttachClasses(this.attachment,n);var i=this.cache("element-bounds",function(){return a(t.element)}),o=i.width,r=i.height;if(0===o&&0===r&&"undefined"!=typeof this.lastSize){var s=this.lastSize;o=s.width,r=s.height}else this.lastSize={width:o,height:r};var f=this.cache("target-bounds",function(){return t.getTargetBounds()}),u=f,c=T(K(this.attachment),{width:o,height:r}),d=T(K(n),u),p=T(this.offset,{width:o,height:r}),g=T(this.targetOffset,u);c=E(c,p),d=E(d,g);for(var v=f.left+d.left-c.left,m=f.top+d.top-c.top,_=0;_<A.modules.length;++_){var y=A.modules[_],C=y.position.call(this,{left:v,top:m,targetAttachment:n,targetPos:f,elementPos:i,offset:c,targetOffset:d,manualOffset:p,manualTargetOffset:g,scrollbarSize:D,attachment:this.attachment});if(C===!1)return!1;"undefined"!=typeof C&&"object"==typeof C&&(m=C.top,v=C.left)}var I={page:{top:m,left:v},viewport:{top:m-pageYOffset,bottom:pageYOffset-m-r+innerHeight,left:v-pageXOffset,right:pageXOffset-v-o+innerWidth}},b=this.target.ownerDocument,O=b.defaultView,D=void 0;return O.innerHeight>b.documentElement.clientHeight&&(D=this.cache("scrollbar-size",h),I.viewport.bottom-=D.height),O.innerWidth>b.documentElement.clientWidth&&(D=this.cache("scrollbar-size",h),I.viewport.right-=D.width),["","static"].indexOf(b.body.style.position)!==-1&&["","static"].indexOf(b.body.parentElement.style.position)!==-1||(I.page.bottom=b.body.scrollHeight-m-r,I.page.right=b.body.scrollWidth-v-o),"undefined"!=typeof this.options.optimizations&&this.options.optimizations.moveElement!==!1&&"undefined"==typeof this.targetModifier&&!function(){var e=t.cache("target-offsetparent",function(){return l(t.target)}),n=t.cache("target-offsetparent-bounds",function(){return a(e)}),i=getComputedStyle(e),o=n,r={};if(["Top","Left","Bottom","Right"].forEach(function(t){r[t.toLowerCase()]=parseFloat(i["border"+t+"Width"])}),n.right=b.body.scrollWidth-n.left-o.width+r.right,n.bottom=b.body.scrollHeight-n.top-o.height+r.bottom,I.page.top>=n.top+r.top&&I.page.bottom>=n.bottom&&I.page.left>=n.left+r.left&&I.page.right>=n.right){var s=e.scrollTop,h=e.scrollLeft;I.offset={top:I.page.top-n.top+s-r.top,left:I.page.left-n.left+h-r.left}}}(),this.move(I),this.history.unshift(I),this.history.length>3&&this.history.pop(),e&&L(),!0}}},{key:"move",value:function(t){var e=this;if("undefined"!=typeof this.element.parentNode){var n={};for(var i in t){n[i]={};for(var o in t[i]){for(var r=!1,s=0;s<this.history.length;++s){var a=this.history[s];if("undefined"!=typeof a[i]&&!_(a[i][o],t[i][o])){r=!0;break}}r||(n[i][o]=!0)}}var h={top:"",left:"",right:"",bottom:""},u=function(t,n){var i="undefined"!=typeof e.options.optimizations,o=i?e.options.optimizations.gpu:null;if(o!==!1){var r=void 0,s=void 0;if(t.top?(h.top=0,r=n.top):(h.bottom=0,r=-n.bottom),t.left?(h.left=0,s=n.left):(h.right=0,s=-n.right),window.matchMedia){var a=window.matchMedia("only screen and (min-resolution: 1.3dppx)").matches||window.matchMedia("only screen and (-webkit-min-device-pixel-ratio: 1.3)").matches;a||(s=Math.round(s),r=Math.round(r))}h[W]="translateX("+s+"px) translateY("+r+"px)","msTransform"!==W&&(h[W]+=" translateZ(0)")}else t.top?h.top=n.top+"px":h.bottom=n.bottom+"px",t.left?h.left=n.left+"px":h.right=n.right+"px"},c=!1;if((n.page.top||n.page.bottom)&&(n.page.left||n.page.right)?(h.position="absolute",u(n.page,t.page)):(n.viewport.top||n.viewport.bottom)&&(n.viewport.left||n.viewport.right)?(h.position="fixed",u(n.viewport,t.viewport)):"undefined"!=typeof n.offset&&n.offset.top&&n.offset.left?!function(){h.position="absolute";var i=e.cache("target-offsetparent",function(){return l(e.target)});l(e.element)!==i&&k(function(){e.element.parentNode.removeChild(e.element),i.appendChild(e.element)}),u(n.offset,t.offset),c=!0}():(h.position="absolute",u({top:!0,left:!0},t.page)),!c){for(var d=!0,p=this.element.parentNode;p&&1===p.nodeType&&"BODY"!==p.tagName;){if("static"!==getComputedStyle(p).position){d=!1;break}p=p.parentNode}d||(this.element.parentNode.removeChild(this.element),this.element.ownerDocument.body.appendChild(this.element))}var g={},v=!1;for(var o in h){var m=h[o],y=this.element.style[o];y!==m&&(v=!0,g[o]=m)}v&&k(function(){f(e.element.style,g),e.trigger("repositioned")})}}}]),e}(P);Y.modules=[],A.position=j;var X=f(Y,A),x=function(){function t(t,e){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(l){o=!0,r=l}finally{try{!i&&a["return"]&&a["return"]()}finally{if(o)throw r}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),H=A.Utils,a=H.getBounds,f=H.extend,v=H.updateClasses,k=H.defer,z=["left","top","right","bottom"];A.modules.push({position:function(t){var e=this,n=t.top,i=t.left,o=t.targetAttachment;if(!this.options.constraints)return!0;var r=this.cache("element-bounds",function(){return a(e.element)}),s=r.height,l=r.width;if(0===l&&0===s&&"undefined"!=typeof this.lastSize){var h=this.lastSize;l=h.width,s=h.height}var u=this.cache("target-bounds",function(){return e.getTargetBounds()}),c=u.height,d=u.width,p=[this.getClass("pinned"),this.getClass("out-of-bounds")];this.options.constraints.forEach(function(t){var e=t.outOfBoundsClass,n=t.pinnedClass;e&&p.push(e),n&&p.push(n)}),p.forEach(function(t){["left","top","right","bottom"].forEach(function(e){p.push(t+"-"+e)})});var g=[],m=f({},o),_=f({},this.attachment);return this.options.constraints.forEach(function(t){var r=t.to,a=t.attachment,h=t.pin;"undefined"==typeof a&&(a="");var f=void 0,u=void 0;if(a.indexOf(" ")>=0){var p=a.split(" "),v=x(p,2);u=v[0],f=v[1]}else f=u=a;var y=C(e,r);"target"!==u&&"both"!==u||(n<y[1]&&"top"===m.top&&(n+=c,m.top="bottom"),n+s>y[3]&&"bottom"===m.top&&(n-=c,m.top="top")),"together"===u&&("top"===m.top&&("bottom"===_.top&&n<y[1]?(n+=c,m.top="bottom",n+=s,_.top="top"):"top"===_.top&&n+s>y[3]&&n-(s-c)>=y[1]&&(n-=s-c,m.top="bottom",_.top="bottom")),"bottom"===m.top&&("top"===_.top&&n+s>y[3]?(n-=c,m.top="top",n-=s,_.top="bottom"):"bottom"===_.top&&n<y[1]&&n+(2*s-c)<=y[3]&&(n+=s-c,m.top="top",_.top="top")),"middle"===m.top&&(n+s>y[3]&&"top"===_.top?(n-=s,_.top="bottom"):n<y[1]&&"bottom"===_.top&&(n+=s,_.top="top"))),"target"!==f&&"both"!==f||(i<y[0]&&"left"===m.left&&(i+=d,m.left="right"),i+l>y[2]&&"right"===m.left&&(i-=d,m.left="left")),"together"===f&&(i<y[0]&&"left"===m.left?"right"===_.left?(i+=d,m.left="right",i+=l,_.left="left"):"left"===_.left&&(i+=d,m.left="right",i-=l,_.left="right"):i+l>y[2]&&"right"===m.left?"left"===_.left?(i-=d,m.left="left",i-=l,_.left="right"):"right"===_.left&&(i-=d,m.left="left",i+=l,_.left="left"):"center"===m.left&&(i+l>y[2]&&"left"===_.left?(i-=l,_.left="right"):i<y[0]&&"right"===_.left&&(i+=l,_.left="left"))),"element"!==u&&"both"!==u||(n<y[1]&&"bottom"===_.top&&(n+=s,_.top="top"),n+s>y[3]&&"top"===_.top&&(n-=s,_.top="bottom")),"element"!==f&&"both"!==f||(i<y[0]&&("right"===_.left?(i+=l,_.left="left"):"center"===_.left&&(i+=l/2,_.left="left")),i+l>y[2]&&("left"===_.left?(i-=l,_.left="right"):"center"===_.left&&(i-=l/2,_.left="right"))),"string"==typeof h?h=h.split(",").map(function(t){return t.trim()}):h===!0&&(h=["top","left","right","bottom"]),h=h||[];var E=[],T=[];n<y[1]&&(h.indexOf("top")>=0?(n=y[1],E.push("top")):T.push("top")),n+s>y[3]&&(h.indexOf("bottom")>=0?(n=y[3]-s,E.push("bottom")):T.push("bottom")),i<y[0]&&(h.indexOf("left")>=0?(i=y[0],E.push("left")):T.push("left")),i+l>y[2]&&(h.indexOf("right")>=0?(i=y[2]-l,E.push("right")):T.push("right")),E.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.pinnedClass?e.options.pinnedClass:e.getClass("pinned"),g.push(t),E.forEach(function(e){g.push(t+"-"+e)})}(),T.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.outOfBoundsClass?e.options.outOfBoundsClass:e.getClass("out-of-bounds"),g.push(t),T.forEach(function(e){g.push(t+"-"+e)})}(),(E.indexOf("left")>=0||E.indexOf("right")>=0)&&(_.left=m.left=!1),(E.indexOf("top")>=0||E.indexOf("bottom")>=0)&&(_.top=m.top=!1),m.top===o.top&&m.left===o.left&&_.top===e.attachment.top&&_.left===e.attachment.left||(e.updateAttachClasses(_,m),e.trigger("update",{attachment:_,targetAttachment:m}))}),k(function(){e.options.addTargetClasses!==!1&&v(e.target,g,p),v(e.element,g,p)}),{top:n,left:i}}});var H=A.Utils,a=H.getBounds,v=H.updateClasses,k=H.defer;A.modules.push({position:function(t){var e=this,n=t.top,i=t.left,o=this.cache("element-bounds",function(){return a(e.element)}),r=o.height,s=o.width,l=this.getTargetBounds(),h=n+r,f=i+s,u=[];n<=l.bottom&&h>=l.top&&["left","right"].forEach(function(t){var e=l[t];e!==i&&e!==f||u.push(t)}),i<=l.right&&f>=l.left&&["top","bottom"].forEach(function(t){var e=l[t];e!==n&&e!==h||u.push(t)});var c=[],d=[],p=["left","top","right","bottom"];return c.push(this.getClass("abutted")),p.forEach(function(t){c.push(e.getClass("abutted")+"-"+t)}),u.length&&d.push(this.getClass("abutted")),u.forEach(function(t){d.push(e.getClass("abutted")+"-"+t)}),k(function(){e.options.addTargetClasses!==!1&&v(e.target,d,c),v(e.element,d,c)}),!0}});var x=function(){function t(t,e){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(l){o=!0,r=l}finally{try{!i&&a["return"]&&a["return"]()}finally{if(o)throw r}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();return A.modules.push({position:function(t){var e=t.top,n=t.left;if(this.options.shift){var i=this.options.shift;"function"==typeof this.options.shift&&(i=this.options.shift.call(this,{top:e,left:n}));var o=void 0,r=void 0;if("string"==typeof i){i=i.split(" "),i[1]=i[1]||i[0];var s=i,a=x(s,2);o=a[0],r=a[1],o=parseFloat(o,10),r=parseFloat(r,10)}else o=i.top,r=i.left;return e+=o,n+=r,{top:e,left:n}}}}),X})},function(t,e){/*!
	 * Bootstrap v4.0.0-alpha.4 (http://getbootstrap.com)
	 * Copyright 2011-2016 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(jQuery),+function(t){"use strict";function e(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=function(t,e,n){for(var i=!0;i;){var o=t,r=e,s=n;i=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,r);if(void 0!==a){if("value"in a)return a.value;var l=a.get;if(void 0===l)return;return l.call(s)}var h=Object.getPrototypeOf(o);if(null===h)return;t=h,e=r,n=s,i=!0,a=h=void 0}},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=function(t){function e(t){return{}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function n(t){return(t[0]||t).nodeType}function i(){return{bindType:a.end,delegateType:a.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}}function o(){if(window.QUnit)return!1;var t=document.createElement("bootstrap");for(var e in h)if(void 0!==t.style[e])return{end:h[e]};return!1}function r(e){var n=this,i=!1;return t(this).one(f.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||f.triggerTransitionEnd(n)},e),this}function s(){a=o(),t.fn.emulateTransitionEnd=r,f.supportsTransitionEnd()&&(t.event.special[f.TRANSITION_END]=i())}var a=!1,l=1e6,h={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},f={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do t+=~~(Math.random()*l);while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");return e||(e=t.getAttribute("href")||"",e=/^#[a-z]/i.test(e)?e:null),e},reflow:function(t){new Function("bs","return bs")(t.offsetHeight)},triggerTransitionEnd:function(e){t(e).trigger(a.end)},supportsTransitionEnd:function(){return Boolean(a)},typeCheckConfig:function(t,i,o){for(var r in o)if(o.hasOwnProperty(r)){var s=o[r],a=i[r],l=void 0;if(l=a&&n(a)?"element":e(a),!new RegExp(s).test(l))throw new Error(t.toUpperCase()+": "+('Option "'+r+'" provided type "'+l+'" ')+('but expected type "'+s+'".'))}}};return s(),f}(jQuery),s=(function(t){var e="alert",i="4.0.0-alpha.4",s="bs.alert",a="."+s,l=".data-api",h=t.fn[e],f=150,u={DISMISS:'[data-dismiss="alert"]'},c={CLOSE:"close"+a,CLOSED:"closed"+a,CLICK_DATA_API:"click"+a+l},d={ALERT:"alert",FADE:"fade",IN:"in"},p=function(){function e(t){n(this,e),this._element=t}return o(e,[{key:"close",value:function(t){t=t||this._element;var e=this._getRootElement(t),n=this._triggerCloseEvent(e);n.isDefaultPrevented()||this._removeElement(e)}},{key:"dispose",value:function(){t.removeData(this._element,s),this._element=null}},{key:"_getRootElement",value:function(e){var n=r.getSelectorFromElement(e),i=!1;return n&&(i=t(n)[0]),i||(i=t(e).closest("."+d.ALERT)[0]),i}},{key:"_triggerCloseEvent",value:function(e){var n=t.Event(c.CLOSE);return t(e).trigger(n),n}},{key:"_removeElement",value:function(e){return t(e).removeClass(d.IN),r.supportsTransitionEnd()&&t(e).hasClass(d.FADE)?void t(e).one(r.TRANSITION_END,t.proxy(this._destroyElement,this,e)).emulateTransitionEnd(f):void this._destroyElement(e)}},{key:"_destroyElement",value:function(e){t(e).detach().trigger(c.CLOSED).remove()}}],[{key:"_jQueryInterface",value:function(n){return this.each(function(){var i=t(this),o=i.data(s);o||(o=new e(this),i.data(s,o)),"close"===n&&o[n](this)})}},{key:"_handleDismiss",value:function(t){return function(e){e&&e.preventDefault(),t.close(this)}}},{key:"VERSION",get:function(){return i}}]),e}();return t(document).on(c.CLICK_DATA_API,u.DISMISS,p._handleDismiss(new p)),t.fn[e]=p._jQueryInterface,t.fn[e].Constructor=p,t.fn[e].noConflict=function(){return t.fn[e]=h,p._jQueryInterface},p}(jQuery),function(t){var e="button",i="4.0.0-alpha.4",r="bs.button",s="."+r,a=".data-api",l=t.fn[e],h={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},f={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},u={CLICK_DATA_API:"click"+s+a,FOCUS_BLUR_DATA_API:"focus"+s+a+" "+("blur"+s+a)},c=function(){function e(t){n(this,e),this._element=t}return o(e,[{key:"toggle",value:function(){var e=!0,n=t(this._element).closest(f.DATA_TOGGLE)[0];if(n){var i=t(this._element).find(f.INPUT)[0];if(i){if("radio"===i.type)if(i.checked&&t(this._element).hasClass(h.ACTIVE))e=!1;else{var o=t(n).find(f.ACTIVE)[0];o&&t(o).removeClass(h.ACTIVE)}e&&(i.checked=!t(this._element).hasClass(h.ACTIVE),t(this._element).trigger("change")),i.focus()}}else this._element.setAttribute("aria-pressed",!t(this._element).hasClass(h.ACTIVE));e&&t(this._element).toggleClass(h.ACTIVE)}},{key:"dispose",value:function(){t.removeData(this._element,r),this._element=null}}],[{key:"_jQueryInterface",value:function(n){return this.each(function(){var i=t(this).data(r);i||(i=new e(this),t(this).data(r,i)),"toggle"===n&&i[n]()})}},{key:"VERSION",get:function(){return i}}]),e}();return t(document).on(u.CLICK_DATA_API,f.DATA_TOGGLE_CARROT,function(e){e.preventDefault();var n=e.target;t(n).hasClass(h.BUTTON)||(n=t(n).closest(f.BUTTON)),c._jQueryInterface.call(t(n),"toggle")}).on(u.FOCUS_BLUR_DATA_API,f.DATA_TOGGLE_CARROT,function(e){var n=t(e.target).closest(f.BUTTON)[0];t(n).toggleClass(h.FOCUS,/^focus(in)?$/.test(e.type))}),t.fn[e]=c._jQueryInterface,t.fn[e].Constructor=c,t.fn[e].noConflict=function(){return t.fn[e]=l,c._jQueryInterface},c}(jQuery),function(t){var e="carousel",i="4.0.0-alpha.4",s="bs.carousel",a="."+s,l=".data-api",h=t.fn[e],f=600,u=37,c=39,d={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},p={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},g={NEXT:"next",PREVIOUS:"prev"},v={SLIDE:"slide"+a,SLID:"slid"+a,KEYDOWN:"keydown"+a,MOUSEENTER:"mouseenter"+a,MOUSELEAVE:"mouseleave"+a,LOAD_DATA_API:"load"+a+l,CLICK_DATA_API:"click"+a+l},m={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"right",LEFT:"left",ITEM:"carousel-item"},_={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".next, .prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},y=function(){function l(e,i){n(this,l),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this._config=this._getConfig(i),this._element=t(e)[0],this._indicatorsElement=t(this._element).find(_.INDICATORS)[0],this._addEventListeners()}return o(l,[{key:"next",value:function(){this._isSliding||this._slide(g.NEXT)}},{key:"nextWhenVisible",value:function(){document.hidden||this.next()}},{key:"prev",value:function(){this._isSliding||this._slide(g.PREVIOUS)}},{key:"pause",value:function(e){e||(this._isPaused=!0),t(this._element).find(_.NEXT_PREV)[0]&&r.supportsTransitionEnd()&&(r.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}},{key:"cycle",value:function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval(t.proxy(document.visibilityState?this.nextWhenVisible:this.next,this),this._config.interval))}},{key:"to",value:function(e){var n=this;this._activeElement=t(this._element).find(_.ACTIVE_ITEM)[0];var i=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0)){if(this._isSliding)return void t(this._element).one(v.SLID,function(){return n.to(e)});if(i===e)return this.pause(),void this.cycle();var o=e>i?g.NEXT:g.PREVIOUS;this._slide(o,this._items[e])}}},{key:"dispose",value:function(){t(this._element).off(a),t.removeData(this._element,s),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null}},{key:"_getConfig",value:function(n){return n=t.extend({},d,n),r.typeCheckConfig(e,n,p),n}},{key:"_addEventListeners",value:function(){this._config.keyboard&&t(this._element).on(v.KEYDOWN,t.proxy(this._keydown,this)),"hover"!==this._config.pause||"ontouchstart"in document.documentElement||t(this._element).on(v.MOUSEENTER,t.proxy(this.pause,this)).on(v.MOUSELEAVE,t.proxy(this.cycle,this))}},{key:"_keydown",value:function(t){if(t.preventDefault(),!/input|textarea/i.test(t.target.tagName))switch(t.which){case u:this.prev();break;case c:this.next();break;default:return}}},{key:"_getItemIndex",value:function(e){return this._items=t.makeArray(t(e).parent().find(_.ITEM)),this._items.indexOf(e)}},{key:"_getItemByDirection",value:function(t,e){var n=t===g.NEXT,i=t===g.PREVIOUS,o=this._getItemIndex(e),r=this._items.length-1,s=i&&0===o||n&&o===r;if(s&&!this._config.wrap)return e;var a=t===g.PREVIOUS?-1:1,l=(o+a)%this._items.length;return l===-1?this._items[this._items.length-1]:this._items[l]}},{key:"_triggerSlideEvent",value:function(e,n){var i=t.Event(v.SLIDE,{relatedTarget:e,direction:n});return t(this._element).trigger(i),i}},{key:"_setActiveIndicatorElement",value:function(e){if(this._indicatorsElement){t(this._indicatorsElement).find(_.ACTIVE).removeClass(m.ACTIVE);var n=this._indicatorsElement.children[this._getItemIndex(e)];n&&t(n).addClass(m.ACTIVE)}}},{key:"_slide",value:function(e,n){var i=this,o=t(this._element).find(_.ACTIVE_ITEM)[0],s=n||o&&this._getItemByDirection(e,o),a=Boolean(this._interval),l=e===g.NEXT?m.LEFT:m.RIGHT;if(s&&t(s).hasClass(m.ACTIVE))return void(this._isSliding=!1);var h=this._triggerSlideEvent(s,l);if(!h.isDefaultPrevented()&&o&&s){this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(s);var u=t.Event(v.SLID,{relatedTarget:s,direction:l});r.supportsTransitionEnd()&&t(this._element).hasClass(m.SLIDE)?(t(s).addClass(e),r.reflow(s),t(o).addClass(l),t(s).addClass(l),t(o).one(r.TRANSITION_END,function(){t(s).removeClass(l).removeClass(e),t(s).addClass(m.ACTIVE),t(o).removeClass(m.ACTIVE).removeClass(e).removeClass(l),i._isSliding=!1,setTimeout(function(){return t(i._element).trigger(u)},0)}).emulateTransitionEnd(f)):(t(o).removeClass(m.ACTIVE),t(s).addClass(m.ACTIVE),this._isSliding=!1,t(this._element).trigger(u)),a&&this.cycle()}}}],[{key:"_jQueryInterface",value:function(e){return this.each(function(){var n=t(this).data(s),i=t.extend({},d,t(this).data());"object"==typeof e&&t.extend(i,e);var o="string"==typeof e?e:i.slide;if(n||(n=new l(this,i),t(this).data(s,n)),"number"==typeof e)n.to(e);else if("string"==typeof o){if(void 0===n[o])throw new Error('No method named "'+o+'"');n[o]()}else i.interval&&(n.pause(),n.cycle())})}},{key:"_dataApiClickHandler",value:function(e){var n=r.getSelectorFromElement(this);if(n){var i=t(n)[0];if(i&&t(i).hasClass(m.CAROUSEL)){var o=t.extend({},t(i).data(),t(this).data()),a=this.getAttribute("data-slide-to");a&&(o.interval=!1),l._jQueryInterface.call(t(i),o),a&&t(i).data(s).to(a),e.preventDefault()}}}},{key:"VERSION",get:function(){return i}},{key:"Default",get:function(){return d}}]),l}();return t(document).on(v.CLICK_DATA_API,_.DATA_SLIDE,y._dataApiClickHandler),t(window).on(v.LOAD_DATA_API,function(){t(_.DATA_RIDE).each(function(){var e=t(this);y._jQueryInterface.call(e,e.data())})}),t.fn[e]=y._jQueryInterface,t.fn[e].Constructor=y,t.fn[e].noConflict=function(){return t.fn[e]=h,y._jQueryInterface},y}(jQuery),function(t){var e="collapse",i="4.0.0-alpha.4",s="bs.collapse",a="."+s,l=".data-api",h=t.fn[e],f=600,u={toggle:!0,parent:""},c={toggle:"boolean",parent:"string"},d={SHOW:"show"+a,SHOWN:"shown"+a,HIDE:"hide"+a,HIDDEN:"hidden"+a,CLICK_DATA_API:"click"+a+l},p={IN:"in",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},g={WIDTH:"width",HEIGHT:"height"},v={ACTIVES:".panel > .in, .panel > .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},m=function(){function a(e,i){n(this,a),this._isTransitioning=!1,this._element=e,this._config=this._getConfig(i),this._triggerArray=t.makeArray(t('[data-toggle="collapse"][href="#'+e.id+'"],'+('[data-toggle="collapse"][data-target="#'+e.id+'"]'))),this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return o(a,[{key:"toggle",value:function(){t(this._element).hasClass(p.IN)?this.hide():this.show()}},{key:"show",value:function(){var e=this;if(!this._isTransitioning&&!t(this._element).hasClass(p.IN)){var n=void 0,i=void 0;if(this._parent&&(n=t.makeArray(t(v.ACTIVES)),n.length||(n=null)),!(n&&(i=t(n).data(s),i&&i._isTransitioning))){var o=t.Event(d.SHOW);if(t(this._element).trigger(o),!o.isDefaultPrevented()){n&&(a._jQueryInterface.call(t(n),"hide"),i||t(n).data(s,null));var l=this._getDimension();t(this._element).removeClass(p.COLLAPSE).addClass(p.COLLAPSING),this._element.style[l]=0,this._element.setAttribute("aria-expanded",!0),this._triggerArray.length&&t(this._triggerArray).removeClass(p.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var h=function(){t(e._element).removeClass(p.COLLAPSING).addClass(p.COLLAPSE).addClass(p.IN),e._element.style[l]="",e.setTransitioning(!1),t(e._element).trigger(d.SHOWN)};if(!r.supportsTransitionEnd())return void h();var u=l[0].toUpperCase()+l.slice(1),c="scroll"+u;t(this._element).one(r.TRANSITION_END,h).emulateTransitionEnd(f),this._element.style[l]=this._element[c]+"px"}}}}},{key:"hide",value:function(){var e=this;if(!this._isTransitioning&&t(this._element).hasClass(p.IN)){var n=t.Event(d.HIDE);if(t(this._element).trigger(n),!n.isDefaultPrevented()){var i=this._getDimension(),o=i===g.WIDTH?"offsetWidth":"offsetHeight";this._element.style[i]=this._element[o]+"px",r.reflow(this._element),t(this._element).addClass(p.COLLAPSING).removeClass(p.COLLAPSE).removeClass(p.IN),this._element.setAttribute("aria-expanded",!1),this._triggerArray.length&&t(this._triggerArray).addClass(p.COLLAPSED).attr("aria-expanded",!1),this.setTransitioning(!0);var s=function(){e.setTransitioning(!1),t(e._element).removeClass(p.COLLAPSING).addClass(p.COLLAPSE).trigger(d.HIDDEN)};return this._element.style[i]=0,r.supportsTransitionEnd()?void t(this._element).one(r.TRANSITION_END,s).emulateTransitionEnd(f):void s()}}}},{key:"setTransitioning",value:function(t){this._isTransitioning=t}},{key:"dispose",value:function(){t.removeData(this._element,s),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null}},{key:"_getConfig",value:function(n){return n=t.extend({},u,n),n.toggle=Boolean(n.toggle),r.typeCheckConfig(e,n,c),n}},{key:"_getDimension",value:function(){var e=t(this._element).hasClass(g.WIDTH);return e?g.WIDTH:g.HEIGHT}},{key:"_getParent",value:function(){var e=this,n=t(this._config.parent)[0],i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return t(n).find(i).each(function(t,n){e._addAriaAndCollapsedClass(a._getTargetFromElement(n),[n])}),n}},{key:"_addAriaAndCollapsedClass",value:function(e,n){if(e){var i=t(e).hasClass(p.IN);e.setAttribute("aria-expanded",i),n.length&&t(n).toggleClass(p.COLLAPSED,!i).attr("aria-expanded",i)}}}],[{key:"_getTargetFromElement",value:function(e){var n=r.getSelectorFromElement(e);return n?t(n)[0]:null}},{key:"_jQueryInterface",value:function(e){return this.each(function(){var n=t(this),i=n.data(s),o=t.extend({},u,n.data(),"object"==typeof e&&e);if(!i&&o.toggle&&/show|hide/.test(e)&&(o.toggle=!1),i||(i=new a(this,o),n.data(s,i)),"string"==typeof e){if(void 0===i[e])throw new Error('No method named "'+e+'"');i[e]()}})}},{key:"VERSION",get:function(){return i}},{key:"Default",get:function(){return u}}]),a}();return t(document).on(d.CLICK_DATA_API,v.DATA_TOGGLE,function(e){e.preventDefault();var n=m._getTargetFromElement(this),i=t(n).data(s),o=i?"toggle":t(this).data();m._jQueryInterface.call(t(n),o)}),t.fn[e]=m._jQueryInterface,t.fn[e].Constructor=m,t.fn[e].noConflict=function(){return t.fn[e]=h,m._jQueryInterface},m}(jQuery),function(t){var e="dropdown",i="4.0.0-alpha.4",s="bs.dropdown",a="."+s,l=".data-api",h=t.fn[e],f=27,u=38,c=40,d=3,p={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,CLICK:"click"+a,CLICK_DATA_API:"click"+a+l,KEYDOWN_DATA_API:"keydown"+a+l},g={BACKDROP:"dropdown-backdrop",DISABLED:"disabled",OPEN:"open"},v={BACKDROP:".dropdown-backdrop",DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",ROLE_MENU:'[role="menu"]',ROLE_LISTBOX:'[role="listbox"]',NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:'[role="menu"] li:not(.disabled) a, [role="listbox"] li:not(.disabled) a'},m=function(){function e(t){n(this,e),this._element=t,this._addEventListeners()}return o(e,[{key:"toggle",value:function(){if(this.disabled||t(this).hasClass(g.DISABLED))return!1;var n=e._getParentFromElement(this),i=t(n).hasClass(g.OPEN);if(e._clearMenus(),i)return!1;if("ontouchstart"in document.documentElement&&!t(n).closest(v.NAVBAR_NAV).length){var o=document.createElement("div");o.className=g.BACKDROP,t(o).insertBefore(this),t(o).on("click",e._clearMenus)}var r={relatedTarget:this},s=t.Event(p.SHOW,r);return t(n).trigger(s),!s.isDefaultPrevented()&&(this.focus(),this.setAttribute("aria-expanded","true"),t(n).toggleClass(g.OPEN),t(n).trigger(t.Event(p.SHOWN,r)),!1)}},{key:"dispose",value:function(){t.removeData(this._element,s),t(this._element).off(a),this._element=null}},{key:"_addEventListeners",value:function(){t(this._element).on(p.CLICK,this.toggle)}}],[{key:"_jQueryInterface",value:function(n){return this.each(function(){var i=t(this).data(s);if(i||t(this).data(s,i=new e(this)),"string"==typeof n){if(void 0===i[n])throw new Error('No method named "'+n+'"');i[n].call(this)}})}},{key:"_clearMenus",value:function(n){if(!n||n.which!==d){var i=t(v.BACKDROP)[0];i&&i.parentNode.removeChild(i);for(var o=t.makeArray(t(v.DATA_TOGGLE)),r=0;r<o.length;r++){var s=e._getParentFromElement(o[r]),a={relatedTarget:o[r]};if(t(s).hasClass(g.OPEN)&&!(n&&"click"===n.type&&/input|textarea/i.test(n.target.tagName)&&t.contains(s,n.target))){var l=t.Event(p.HIDE,a);t(s).trigger(l),l.isDefaultPrevented()||(o[r].setAttribute("aria-expanded","false"),t(s).removeClass(g.OPEN).trigger(t.Event(p.HIDDEN,a)))}}}}},{key:"_getParentFromElement",value:function(e){var n=void 0,i=r.getSelectorFromElement(e);return i&&(n=t(i)[0]),n||e.parentNode}},{key:"_dataApiKeydownHandler",value:function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)&&(n.preventDefault(),n.stopPropagation(),!this.disabled&&!t(this).hasClass(g.DISABLED))){var i=e._getParentFromElement(this),o=t(i).hasClass(g.OPEN);if(!o&&n.which!==f||o&&n.which===f){if(n.which===f){var r=t(i).find(v.DATA_TOGGLE)[0];t(r).trigger("focus")}return void t(this).trigger("click")}var s=t.makeArray(t(v.VISIBLE_ITEMS));if(s=s.filter(function(t){return t.offsetWidth||t.offsetHeight}),s.length){var a=s.indexOf(n.target);n.which===u&&a>0&&a--,n.which===c&&a<s.length-1&&a++,a<0&&(a=0),s[a].focus()}}}},{key:"VERSION",get:function(){return i}}]),e}();return t(document).on(p.KEYDOWN_DATA_API,v.DATA_TOGGLE,m._dataApiKeydownHandler).on(p.KEYDOWN_DATA_API,v.ROLE_MENU,m._dataApiKeydownHandler).on(p.KEYDOWN_DATA_API,v.ROLE_LISTBOX,m._dataApiKeydownHandler).on(p.CLICK_DATA_API,m._clearMenus).on(p.CLICK_DATA_API,v.DATA_TOGGLE,m.prototype.toggle).on(p.CLICK_DATA_API,v.FORM_CHILD,function(t){t.stopPropagation()}),t.fn[e]=m._jQueryInterface,t.fn[e].Constructor=m,t.fn[e].noConflict=function(){return t.fn[e]=h,m._jQueryInterface},m}(jQuery),function(t){var e="modal",i="4.0.0-alpha.4",s="bs.modal",a="."+s,l=".data-api",h=t.fn[e],f=300,u=150,c=27,d={backdrop:!0,keyboard:!0,focus:!0,show:!0},p={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},g={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,FOCUSIN:"focusin"+a,RESIZE:"resize"+a,CLICK_DISMISS:"click.dismiss"+a,KEYDOWN_DISMISS:"keydown.dismiss"+a,MOUSEUP_DISMISS:"mouseup.dismiss"+a,MOUSEDOWN_DISMISS:"mousedown.dismiss"+a,CLICK_DATA_API:"click"+a+l},v={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",IN:"in"},m={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".navbar-fixed-top, .navbar-fixed-bottom, .is-fixed"},_=function(){function l(e,i){n(this,l),this._config=this._getConfig(i),this._element=e,this._dialog=t(e).find(m.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return o(l,[{key:"toggle",value:function(t){return this._isShown?this.hide():this.show(t)}},{key:"show",value:function(e){var n=this,i=t.Event(g.SHOW,{relatedTarget:e});t(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),t(document.body).addClass(v.OPEN),this._setEscapeEvent(),this._setResizeEvent(),t(this._element).on(g.CLICK_DISMISS,m.DATA_DISMISS,t.proxy(this.hide,this)),t(this._dialog).on(g.MOUSEDOWN_DISMISS,function(){t(n._element).one(g.MOUSEUP_DISMISS,function(e){t(e.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(t.proxy(this._showElement,this,e)))}},{key:"hide",value:function(e){e&&e.preventDefault();var n=t.Event(g.HIDE);t(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()&&(this._isShown=!1,this._setEscapeEvent(),this._setResizeEvent(),t(document).off(g.FOCUSIN),t(this._element).removeClass(v.IN),t(this._element).off(g.CLICK_DISMISS),t(this._dialog).off(g.MOUSEDOWN_DISMISS),r.supportsTransitionEnd()&&t(this._element).hasClass(v.FADE)?t(this._element).one(r.TRANSITION_END,t.proxy(this._hideModal,this)).emulateTransitionEnd(f):this._hideModal())}},{key:"dispose",value:function(){t.removeData(this._element,s),t(window).off(a),t(document).off(a),t(this._element).off(a),t(this._backdrop).off(a),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._originalBodyPadding=null,this._scrollbarWidth=null}},{key:"_getConfig",value:function(n){return n=t.extend({},d,n),r.typeCheckConfig(e,n,p),n}},{key:"_showElement",value:function(e){var n=this,i=r.supportsTransitionEnd()&&t(this._element).hasClass(v.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&r.reflow(this._element),t(this._element).addClass(v.IN),this._config.focus&&this._enforceFocus();var o=t.Event(g.SHOWN,{relatedTarget:e}),s=function(){n._config.focus&&n._element.focus(),t(n._element).trigger(o)};i?t(this._dialog).one(r.TRANSITION_END,s).emulateTransitionEnd(f):s()}},{key:"_enforceFocus",value:function(){var e=this;t(document).off(g.FOCUSIN).on(g.FOCUSIN,function(n){document===n.target||e._element===n.target||t(e._element).has(n.target).length||e._element.focus()})}},{key:"_setEscapeEvent",value:function(){var e=this;this._isShown&&this._config.keyboard?t(this._element).on(g.KEYDOWN_DISMISS,function(t){t.which===c&&e.hide()}):this._isShown||t(this._element).off(g.KEYDOWN_DISMISS)}},{key:"_setResizeEvent",value:function(){this._isShown?t(window).on(g.RESIZE,t.proxy(this._handleUpdate,this)):t(window).off(g.RESIZE)}},{key:"_hideModal",value:function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden","true"),this._showBackdrop(function(){t(document.body).removeClass(v.OPEN),e._resetAdjustments(),e._resetScrollbar(),t(e._element).trigger(g.HIDDEN)})}},{key:"_removeBackdrop",value:function(){this._backdrop&&(t(this._backdrop).remove(),this._backdrop=null)}},{key:"_showBackdrop",value:function(e){var n=this,i=t(this._element).hasClass(v.FADE)?v.FADE:"";if(this._isShown&&this._config.backdrop){var o=r.supportsTransitionEnd()&&i;if(this._backdrop=document.createElement("div"),this._backdrop.className=v.BACKDROP,i&&t(this._backdrop).addClass(i),t(this._backdrop).appendTo(document.body),t(this._element).on(g.CLICK_DISMISS,function(t){return n._ignoreBackdropClick?void(n._ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide()))}),o&&r.reflow(this._backdrop),t(this._backdrop).addClass(v.IN),!e)return;if(!o)return void e();t(this._backdrop).one(r.TRANSITION_END,e).emulateTransitionEnd(u)}else if(!this._isShown&&this._backdrop){t(this._backdrop).removeClass(v.IN);var s=function(){n._removeBackdrop(),e&&e()};r.supportsTransitionEnd()&&t(this._element).hasClass(v.FADE)?t(this._backdrop).one(r.TRANSITION_END,s).emulateTransitionEnd(u):s()}else e&&e()}},{key:"_handleUpdate",value:function(){this._adjustDialog()}},{key:"_adjustDialog",value:function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")}},{key:"_resetAdjustments",value:function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}},{key:"_checkScrollbar",value:function(){this._isBodyOverflowing=document.body.clientWidth<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()}},{key:"_setScrollbar",value:function(){var e=parseInt(t(m.FIXED_CONTENT).css("padding-right")||0,10);this._originalBodyPadding=document.body.style.paddingRight||"",this._isBodyOverflowing&&(document.body.style.paddingRight=e+this._scrollbarWidth+"px")}},{key:"_resetScrollbar",value:function(){document.body.style.paddingRight=this._originalBodyPadding}},{key:"_getScrollbarWidth",value:function(){var t=document.createElement("div");t.className=v.SCROLLBAR_MEASURER,document.body.appendChild(t);var e=t.offsetWidth-t.clientWidth;return document.body.removeChild(t),e}}],[{key:"_jQueryInterface",value:function(e,n){return this.each(function(){var i=t(this).data(s),o=t.extend({},l.Default,t(this).data(),"object"==typeof e&&e);if(i||(i=new l(this,o),t(this).data(s,i)),"string"==typeof e){if(void 0===i[e])throw new Error('No method named "'+e+'"');i[e](n)}else o.show&&i.show(n)})}},{key:"VERSION",get:function(){return i}},{key:"Default",get:function(){return d}}]),l}();return t(document).on(g.CLICK_DATA_API,m.DATA_TOGGLE,function(e){var n=this,i=void 0,o=r.getSelectorFromElement(this);o&&(i=t(o)[0]);var a=t(i).data(s)?"toggle":t.extend({},t(i).data(),t(this).data());"A"===this.tagName&&e.preventDefault();var l=t(i).one(g.SHOW,function(e){e.isDefaultPrevented()||l.one(g.HIDDEN,function(){t(n).is(":visible")&&n.focus()})});_._jQueryInterface.call(t(i),a,this)}),t.fn[e]=_._jQueryInterface,t.fn[e].Constructor=_,t.fn[e].noConflict=function(){return t.fn[e]=h,_._jQueryInterface},_}(jQuery),function(t){var e="scrollspy",i="4.0.0-alpha.4",s="bs.scrollspy",a="."+s,l=".data-api",h=t.fn[e],f={offset:10,method:"auto",target:""},u={offset:"number",method:"string",target:"(string|element)"},c={ACTIVATE:"activate"+a,SCROLL:"scroll"+a,LOAD_DATA_API:"load"+a+l},d={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",NAV_LINK:"nav-link",NAV:"nav",ACTIVE:"active"},p={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",LIST_ITEM:".list-item",LI:"li",LI_DROPDOWN:"li.dropdown",NAV_LINKS:".nav-link",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},g={OFFSET:"offset",POSITION:"position"},v=function(){function l(e,i){n(this,l),this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(i),this._selector=this._config.target+" "+p.NAV_LINKS+","+(this._config.target+" "+p.DROPDOWN_ITEMS),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,t(this._scrollElement).on(c.SCROLL,t.proxy(this._process,this)),this.refresh(),this._process()}return o(l,[{key:"refresh",value:function(){var e=this,n=this._scrollElement!==this._scrollElement.window?g.POSITION:g.OFFSET,i="auto"===this._config.method?n:this._config.method,o=i===g.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var s=t.makeArray(t(this._selector));s.map(function(e){var n=void 0,s=r.getSelectorFromElement(e);return s&&(n=t(s)[0]),n&&(n.offsetWidth||n.offsetHeight)?[t(n)[i]().top+o,s]:null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})}},{key:"dispose",value:function(){t.removeData(this._element,s),t(this._scrollElement).off(a),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null}},{key:"_getConfig",value:function(n){if(n=t.extend({},f,n),"string"!=typeof n.target){var i=t(n.target).attr("id");i||(i=r.getUID(e),t(n.target).attr("id",i)),n.target="#"+i}return r.typeCheckConfig(e,n,u),n}},{key:"_getScrollTop",value:function(){return this._scrollElement===window?this._scrollElement.scrollY:this._scrollElement.scrollTop}},{key:"_getScrollHeight",value:function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}},{key:"_process",value:function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._scrollElement.offsetHeight;if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}if(this._activeTarget&&t<this._offsets[0])return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;){var r=this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&(void 0===this._offsets[o+1]||t<this._offsets[o+1]);r&&this._activate(this._targets[o])}}},{key:"_activate",value:function(e){this._activeTarget=e,this._clear();var n=this._selector.split(",");n=n.map(function(t){return t+'[data-target="'+e+'"],'+(t+'[href="'+e+'"]')});var i=t(n.join(","));i.hasClass(d.DROPDOWN_ITEM)?(i.closest(p.DROPDOWN).find(p.DROPDOWN_TOGGLE).addClass(d.ACTIVE),i.addClass(d.ACTIVE)):i.parents(p.LI).find(p.NAV_LINKS).addClass(d.ACTIVE),t(this._scrollElement).trigger(c.ACTIVATE,{relatedTarget:e})}},{key:"_clear",value:function(){t(this._selector).filter(p.ACTIVE).removeClass(d.ACTIVE)}}],[{key:"_jQueryInterface",value:function(e){return this.each(function(){var n=t(this).data(s),i="object"==typeof e&&e||null;if(n||(n=new l(this,i),t(this).data(s,n)),"string"==typeof e){if(void 0===n[e])throw new Error('No method named "'+e+'"');n[e]()}})}},{key:"VERSION",get:function(){return i}},{key:"Default",get:function(){return f}}]),l}();return t(window).on(c.LOAD_DATA_API,function(){for(var e=t.makeArray(t(p.DATA_SPY)),n=e.length;n--;){var i=t(e[n]);v._jQueryInterface.call(i,i.data())}}),t.fn[e]=v._jQueryInterface,t.fn[e].Constructor=v,t.fn[e].noConflict=function(){return t.fn[e]=h,v._jQueryInterface},v}(jQuery),function(t){var e="tab",i="4.0.0-alpha.4",s="bs.tab",a="."+s,l=".data-api",h=t.fn[e],f=150,u={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,CLICK_DATA_API:"click"+a+l},c={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",FADE:"fade",IN:"in"},d={A:"a",LI:"li",DROPDOWN:".dropdown",UL:"ul:not(.dropdown-menu)",FADE_CHILD:"> .nav-item .fade, > .fade",
ACTIVE:".active",ACTIVE_CHILD:"> .nav-item > .active, > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},p=function(){function e(t){n(this,e),this._element=t}return o(e,[{key:"show",value:function(){var e=this;if(!this._element.parentNode||this._element.parentNode.nodeType!==Node.ELEMENT_NODE||!t(this._element).hasClass(c.ACTIVE)){var n=void 0,i=void 0,o=t(this._element).closest(d.UL)[0],s=r.getSelectorFromElement(this._element);o&&(i=t.makeArray(t(o).find(d.ACTIVE)),i=i[i.length-1]);var a=t.Event(u.HIDE,{relatedTarget:this._element}),l=t.Event(u.SHOW,{relatedTarget:i});if(i&&t(i).trigger(a),t(this._element).trigger(l),!l.isDefaultPrevented()&&!a.isDefaultPrevented()){s&&(n=t(s)[0]),this._activate(this._element,o);var h=function(){var n=t.Event(u.HIDDEN,{relatedTarget:e._element}),o=t.Event(u.SHOWN,{relatedTarget:i});t(i).trigger(n),t(e._element).trigger(o)};n?this._activate(n,n.parentNode,h):h()}}}},{key:"dispose",value:function(){t.removeClass(this._element,s),this._element=null}},{key:"_activate",value:function(e,n,i){var o=t(n).find(d.ACTIVE_CHILD)[0],s=i&&r.supportsTransitionEnd()&&(o&&t(o).hasClass(c.FADE)||Boolean(t(n).find(d.FADE_CHILD)[0])),a=t.proxy(this._transitionComplete,this,e,o,s,i);o&&s?t(o).one(r.TRANSITION_END,a).emulateTransitionEnd(f):a(),o&&t(o).removeClass(c.IN)}},{key:"_transitionComplete",value:function(e,n,i,o){if(n){t(n).removeClass(c.ACTIVE);var s=t(n).find(d.DROPDOWN_ACTIVE_CHILD)[0];s&&t(s).removeClass(c.ACTIVE),n.setAttribute("aria-expanded",!1)}if(t(e).addClass(c.ACTIVE),e.setAttribute("aria-expanded",!0),i?(r.reflow(e),t(e).addClass(c.IN)):t(e).removeClass(c.FADE),e.parentNode&&t(e.parentNode).hasClass(c.DROPDOWN_MENU)){var a=t(e).closest(d.DROPDOWN)[0];a&&t(a).find(d.DROPDOWN_TOGGLE).addClass(c.ACTIVE),e.setAttribute("aria-expanded",!0)}o&&o()}}],[{key:"_jQueryInterface",value:function(n){return this.each(function(){var i=t(this),o=i.data(s);if(o||(o=o=new e(this),i.data(s,o)),"string"==typeof n){if(void 0===o[n])throw new Error('No method named "'+n+'"');o[n]()}})}},{key:"VERSION",get:function(){return i}}]),e}();return t(document).on(u.CLICK_DATA_API,d.DATA_TOGGLE,function(e){e.preventDefault(),p._jQueryInterface.call(t(this),"show")}),t.fn[e]=p._jQueryInterface,t.fn[e].Constructor=p,t.fn[e].noConflict=function(){return t.fn[e]=h,p._jQueryInterface},p}(jQuery),function(t){if(void 0===window.Tether)throw new Error("Bootstrap tooltips require Tether (http://github.hubspot.com/tether/)");var e="tooltip",i="4.0.0-alpha.4",s="bs.tooltip",a="."+s,l=t.fn[e],h=150,f="bs-tether",u={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:"0 0",constraints:[]},c={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"string",constraints:"array"},d={TOP:"bottom center",RIGHT:"middle left",BOTTOM:"top center",LEFT:"middle right"},p={IN:"in",OUT:"out"},g={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,INSERTED:"inserted"+a,CLICK:"click"+a,FOCUSIN:"focusin"+a,FOCUSOUT:"focusout"+a,MOUSEENTER:"mouseenter"+a,MOUSELEAVE:"mouseleave"+a},v={FADE:"fade",IN:"in"},m={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner"},_={element:!1,enabled:!1},y={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},E=function(){function l(t,e){n(this,l),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._tether=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}return o(l,[{key:"enable",value:function(){this._isEnabled=!0}},{key:"disable",value:function(){this._isEnabled=!1}},{key:"toggleEnabled",value:function(){this._isEnabled=!this._isEnabled}},{key:"toggle",value:function(e){if(e){var n=this.constructor.DATA_KEY,i=t(e.currentTarget).data(n);i||(i=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(n,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(t(this.getTipElement()).hasClass(v.IN))return void this._leave(null,this);this._enter(null,this)}}},{key:"dispose",value:function(){clearTimeout(this._timeout),this.cleanupTether(),t.removeData(this.element,this.constructor.DATA_KEY),t(this.element).off(this.constructor.EVENT_KEY),this.tip&&t(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._tether=null,this.element=null,this.config=null,this.tip=null}},{key:"show",value:function(){var e=this,n=t.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){t(this.element).trigger(n);var i=t.contains(this.element.ownerDocument.documentElement,this.element);if(n.isDefaultPrevented()||!i)return;var o=this.getTipElement(),s=r.getUID(this.constructor.NAME);o.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&t(o).addClass(v.FADE);var a="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,h=this._getAttachment(a);t(o).data(this.constructor.DATA_KEY,this).appendTo(document.body),t(this.element).trigger(this.constructor.Event.INSERTED),this._tether=new Tether({attachment:h,element:o,target:this.element,classes:_,classPrefix:f,offset:this.config.offset,constraints:this.config.constraints,addTargetClasses:!1}),r.reflow(o),this._tether.position(),t(o).addClass(v.IN);var u=function(){var n=e._hoverState;e._hoverState=null,t(e.element).trigger(e.constructor.Event.SHOWN),n===p.OUT&&e._leave(null,e)};if(r.supportsTransitionEnd()&&t(this.tip).hasClass(v.FADE))return void t(this.tip).one(r.TRANSITION_END,u).emulateTransitionEnd(l._TRANSITION_DURATION);u()}}},{key:"hide",value:function(e){var n=this,i=this.getTipElement(),o=t.Event(this.constructor.Event.HIDE),s=function(){n._hoverState!==p.IN&&i.parentNode&&i.parentNode.removeChild(i),n.element.removeAttribute("aria-describedby"),t(n.element).trigger(n.constructor.Event.HIDDEN),n.cleanupTether(),e&&e()};t(this.element).trigger(o),o.isDefaultPrevented()||(t(i).removeClass(v.IN),r.supportsTransitionEnd()&&t(this.tip).hasClass(v.FADE)?t(i).one(r.TRANSITION_END,s).emulateTransitionEnd(h):s(),this._hoverState="")}},{key:"isWithContent",value:function(){return Boolean(this.getTitle())}},{key:"getTipElement",value:function(){return this.tip=this.tip||t(this.config.template)[0]}},{key:"setContent",value:function(){var e=t(this.getTipElement());this.setElementContent(e.find(m.TOOLTIP_INNER),this.getTitle()),e.removeClass(v.FADE).removeClass(v.IN),this.cleanupTether()}},{key:"setElementContent",value:function(e,n){var i=this.config.html;"object"==typeof n&&(n.nodeType||n.jquery)?i?t(n).parent().is(e)||e.empty().append(n):e.text(t(n).text()):e[i?"html":"text"](n)}},{key:"getTitle",value:function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t}},{key:"cleanupTether",value:function(){this._tether&&this._tether.destroy()}},{key:"_getAttachment",value:function(t){return d[t.toUpperCase()]}},{key:"_setListeners",value:function(){var e=this,n=this.config.trigger.split(" ");n.forEach(function(n){if("click"===n)t(e.element).on(e.constructor.Event.CLICK,e.config.selector,t.proxy(e.toggle,e));else if(n!==y.MANUAL){var i=n===y.HOVER?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,o=n===y.HOVER?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;t(e.element).on(i,e.config.selector,t.proxy(e._enter,e)).on(o,e.config.selector,t.proxy(e._leave,e))}}),this.config.selector?this.config=t.extend({},this.config,{trigger:"manual",selector:""}):this._fixTitle()}},{key:"_fixTitle",value:function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))}},{key:"_enter",value:function(e,n){var i=this.constructor.DATA_KEY;return n=n||t(e.currentTarget).data(i),n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusin"===e.type?y.FOCUS:y.HOVER]=!0),t(n.getTipElement()).hasClass(v.IN)||n._hoverState===p.IN?void(n._hoverState=p.IN):(clearTimeout(n._timeout),n._hoverState=p.IN,n.config.delay&&n.config.delay.show?void(n._timeout=setTimeout(function(){n._hoverState===p.IN&&n.show()},n.config.delay.show)):void n.show())}},{key:"_leave",value:function(e,n){var i=this.constructor.DATA_KEY;if(n=n||t(e.currentTarget).data(i),n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusout"===e.type?y.FOCUS:y.HOVER]=!1),!n._isWithActiveTrigger())return clearTimeout(n._timeout),n._hoverState=p.OUT,n.config.delay&&n.config.delay.hide?void(n._timeout=setTimeout(function(){n._hoverState===p.OUT&&n.hide()},n.config.delay.hide)):void n.hide()}},{key:"_isWithActiveTrigger",value:function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1}},{key:"_getConfig",value:function(n){return n=t.extend({},this.constructor.Default,t(this.element).data(),n),n.delay&&"number"==typeof n.delay&&(n.delay={show:n.delay,hide:n.delay}),r.typeCheckConfig(e,n,this.constructor.DefaultType),n}},{key:"_getDelegateConfig",value:function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t}}],[{key:"_jQueryInterface",value:function(e){return this.each(function(){var n=t(this).data(s),i="object"==typeof e?e:null;if((n||!/destroy|hide/.test(e))&&(n||(n=new l(this,i),t(this).data(s,n)),"string"==typeof e)){if(void 0===n[e])throw new Error('No method named "'+e+'"');n[e]()}})}},{key:"VERSION",get:function(){return i}},{key:"Default",get:function(){return u}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return s}},{key:"Event",get:function(){return g}},{key:"EVENT_KEY",get:function(){return a}},{key:"DefaultType",get:function(){return c}}]),l}();return t.fn[e]=E._jQueryInterface,t.fn[e].Constructor=E,t.fn[e].noConflict=function(){return t.fn[e]=l,E._jQueryInterface},E}(jQuery));(function(t){var r="popover",a="4.0.0-alpha.4",l="bs.popover",h="."+l,f=t.fn[r],u=t.extend({},s.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),c=t.extend({},s.DefaultType,{content:"(string|element|function)"}),d={FADE:"fade",IN:"in"},p={TITLE:".popover-title",CONTENT:".popover-content",ARROW:".popover-arrow"},g={HIDE:"hide"+h,HIDDEN:"hidden"+h,SHOW:"show"+h,SHOWN:"shown"+h,INSERTED:"inserted"+h,CLICK:"click"+h,FOCUSIN:"focusin"+h,FOCUSOUT:"focusout"+h,MOUSEENTER:"mouseenter"+h,MOUSELEAVE:"mouseleave"+h},v=function(s){function f(){n(this,f),i(Object.getPrototypeOf(f.prototype),"constructor",this).apply(this,arguments)}return e(f,s),o(f,[{key:"isWithContent",value:function(){return this.getTitle()||this._getContent()}},{key:"getTipElement",value:function(){return this.tip=this.tip||t(this.config.template)[0]}},{key:"setContent",value:function(){var e=t(this.getTipElement());this.setElementContent(e.find(p.TITLE),this.getTitle()),this.setElementContent(e.find(p.CONTENT),this._getContent()),e.removeClass(d.FADE).removeClass(d.IN),this.cleanupTether()}},{key:"_getContent",value:function(){return this.element.getAttribute("data-content")||("function"==typeof this.config.content?this.config.content.call(this.element):this.config.content)}}],[{key:"_jQueryInterface",value:function(e){return this.each(function(){var n=t(this).data(l),i="object"==typeof e?e:null;if((n||!/destroy|hide/.test(e))&&(n||(n=new f(this,i),t(this).data(l,n)),"string"==typeof e)){if(void 0===n[e])throw new Error('No method named "'+e+'"');n[e]()}})}},{key:"VERSION",get:function(){return a}},{key:"Default",get:function(){return u}},{key:"NAME",get:function(){return r}},{key:"DATA_KEY",get:function(){return l}},{key:"Event",get:function(){return g}},{key:"EVENT_KEY",get:function(){return h}},{key:"DefaultType",get:function(){return c}}]),f}(s);return t.fn[r]=v._jQueryInterface,t.fn[r].Constructor=v,t.fn[r].noConflict=function(){return t.fn[r]=f,v._jQueryInterface},v})(jQuery)}(jQuery)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,