!function(t){function e(n){if(i[n])return i[n].exports;var o=i[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n=window.webpackJsonp;window.webpackJsonp=function(r,s){for(var a,l,h=0,u=[];h<r.length;h++)l=r[h],o[l]&&u.push.apply(u,o[l]),o[l]=0;for(a in s)Object.prototype.hasOwnProperty.call(s,a)&&(t[a]=s[a]);for(n&&n(r,s);u.length;)u.shift().call(null,e);if(s[0])return i[0]=0,e(0)};var i={},o={1:0};e.e=function(t,n){if(0===o[t])return n.call(null,e);if(void 0!==o[t])o[t].push(n);else{o[t]=[n];var i=document.getElementsByTagName("head")[0],r=document.createElement("script");r.type="text/javascript",r.charset="utf-8",r.async=!0,r.src=e.p+""+t+".app.js",i.appendChild(r)}},e.m=t,e.c=i,e.p=""}([,,function(t,e,n){(function(e){t.exports=e.Tether=n(3)}).call(e,function(){return this}())},function(t,e,n){(function(e){t.exports=e.$=n(4)}).call(e,function(){return this}())},function(t,e,n){var i,o;/*! tether 1.4.0 */
!function(r,s){i=s,o="function"==typeof i?i.call(e,n,e,t):i,!(void 0!==o&&(t.exports=o))}(this,function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t){var e=t.getBoundingClientRect(),n={};for(var i in e)n[i]=e[i];if(t.ownerDocument!==document){var r=t.ownerDocument.defaultView.frameElement;if(r){var s=o(r);n.top+=s.top,n.bottom+=s.top,n.left+=s.left,n.right+=s.left}}return n}function r(t){var e=getComputedStyle(t)||{},n=e.position,i=[];if("fixed"===n)return[t];for(var o=t;(o=o.parentNode)&&o&&1===o.nodeType;){var r=void 0;try{r=getComputedStyle(o)}catch(t){}if("undefined"==typeof r||null===r)return i.push(o),i;var s=r,a=s.overflow,l=s.overflowX,h=s.overflowY;/(auto|scroll)/.test(a+h+l)&&("absolute"!==n||["relative","absolute","fixed"].indexOf(r.position)>=0)&&i.push(o)}return i.push(t.ownerDocument.body),t.ownerDocument!==document&&i.push(t.ownerDocument.defaultView),i}function s(){w&&document.body.removeChild(w),w=null}function a(t){var e=void 0;t===document?(e=document,t=document.documentElement):e=t.ownerDocument;var n=e.documentElement,i=o(t),r=O();return i.top-=r.top,i.left-=r.left,"undefined"==typeof i.width&&(i.width=document.body.scrollWidth-i.left-i.right),"undefined"==typeof i.height&&(i.height=document.body.scrollHeight-i.top-i.bottom),i.top=i.top-n.clientTop,i.left=i.left-n.clientLeft,i.right=e.body.clientWidth-i.width-i.left,i.bottom=e.body.clientHeight-i.height-i.top,i}function l(t){return t.offsetParent||document.documentElement}function h(){if(D)return D;var t=document.createElement("div");t.style.width="100%",t.style.height="200px";var e=document.createElement("div");u(e.style,{position:"absolute",top:0,left:0,pointerEvents:"none",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),e.appendChild(t),document.body.appendChild(e);var n=t.offsetWidth;e.style.overflow="scroll";var i=t.offsetWidth;n===i&&(i=e.clientWidth),document.body.removeChild(e);var o=n-i;return D={width:o,height:o}}function u(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=[];return Array.prototype.push.apply(e,arguments),e.slice(1).forEach(function(e){if(e)for(var n in e)({}).hasOwnProperty.call(e,n)&&(t[n]=e[n])}),t}function c(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.remove(e)});else{var n=new RegExp("(^| )"+e.split(" ").join("|")+"( |$)","gi"),i=p(t).replace(n," ");g(t,i)}}function d(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.add(e)});else{c(t,e);var n=p(t)+(" "+e);g(t,n)}}function f(t,e){if("undefined"!=typeof t.classList)return t.classList.contains(e);var n=p(t);return new RegExp("(^| )"+e+"( |$)","gi").test(n)}function p(t){return t.className instanceof t.ownerDocument.defaultView.SVGAnimatedString?t.className.baseVal:t.className}function g(t,e){t.setAttribute("class",e)}function m(t,e,n){n.forEach(function(n){e.indexOf(n)===-1&&f(t,n)&&c(t,n)}),e.forEach(function(e){f(t,e)||d(t,e)})}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function y(t,e){var n=arguments.length<=2||void 0===arguments[2]?1:arguments[2];return t+n>=e&&e>=t-n}function _(){return"undefined"!=typeof performance&&"undefined"!=typeof performance.now?performance.now():+new Date}function E(){for(var t={top:0,left:0},e=arguments.length,n=Array(e),i=0;i<e;i++)n[i]=arguments[i];return n.forEach(function(e){var n=e.top,i=e.left;"string"==typeof n&&(n=parseFloat(n,10)),"string"==typeof i&&(i=parseFloat(i,10)),t.top+=n,t.left+=i}),t}function T(t,e){return"string"==typeof t.left&&t.left.indexOf("%")!==-1&&(t.left=parseFloat(t.left,10)/100*e.width),"string"==typeof t.top&&t.top.indexOf("%")!==-1&&(t.top=parseFloat(t.top,10)/100*e.height),t}function b(t,e){return"scrollParent"===e?e=t.scrollParents[0]:"window"===e&&(e=[pageXOffset,pageYOffset,innerWidth+pageXOffset,innerHeight+pageYOffset]),e===document&&(e=e.documentElement),"undefined"!=typeof e.nodeType&&!function(){var t=e,n=a(e),i=n,o=getComputedStyle(e);if(e=[i.left,i.top,n.width+i.left,n.height+i.top],t.ownerDocument!==document){var r=t.ownerDocument.defaultView;e[0]+=r.pageXOffset,e[1]+=r.pageYOffset,e[2]+=r.pageXOffset,e[3]+=r.pageYOffset}X.forEach(function(t,n){t=t[0].toUpperCase()+t.substr(1),"Top"===t||"Left"===t?e[n]+=parseFloat(o["border"+t+"Width"]):e[n]-=parseFloat(o["border"+t+"Width"])})}(),e}var C=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),A=void 0;"undefined"==typeof A&&(A={modules:[]});var w=null,S=function(){var t=0;return function(){return++t}}(),I={},O=function(){var t=w;t&&document.body.contains(t)||(t=document.createElement("div"),t.setAttribute("data-tether-id",S()),u(t.style,{top:0,left:0,position:"absolute"}),document.body.appendChild(t),w=t);var e=t.getAttribute("data-tether-id");return"undefined"==typeof I[e]&&(I[e]=o(t),N(function(){delete I[e]})),I[e]},D=null,L=[],N=function(t){L.push(t)},P=function(){for(var t=void 0;t=L.pop();)t()},R=function(){function t(){i(this,t)}return C(t,[{key:"on",value:function(t,e,n){var i=!(arguments.length<=3||void 0===arguments[3])&&arguments[3];"undefined"==typeof this.bindings&&(this.bindings={}),"undefined"==typeof this.bindings[t]&&(this.bindings[t]=[]),this.bindings[t].push({handler:e,ctx:n,once:i})}},{key:"once",value:function(t,e,n){this.on(t,e,n,!0)}},{key:"off",value:function(t,e){if("undefined"!=typeof this.bindings&&"undefined"!=typeof this.bindings[t])if("undefined"==typeof e)delete this.bindings[t];else for(var n=0;n<this.bindings[t].length;)this.bindings[t][n].handler===e?this.bindings[t].splice(n,1):++n}},{key:"trigger",value:function(t){if("undefined"!=typeof this.bindings&&this.bindings[t]){for(var e=0,n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];for(;e<this.bindings[t].length;){var r=this.bindings[t][e],s=r.handler,a=r.ctx,l=r.once,h=a;"undefined"==typeof h&&(h=this),s.apply(h,i),l?this.bindings[t].splice(e,1):++e}}}}]),t}();A.Utils={getActualBoundingClientRect:o,getScrollParents:r,getBounds:a,getOffsetParent:l,extend:u,addClass:d,removeClass:c,hasClass:f,updateClasses:m,defer:N,flush:P,uniqueId:S,Evented:R,getScrollBarSize:h,removeUtilElements:s};var k=function(){function t(t,e){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(t){o=!0,r=t}finally{try{!i&&a.return&&a.return()}finally{if(o)throw r}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),C=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),H=function(t,e,n){for(var i=!0;i;){var o=t,r=e,s=n;i=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,r);if(void 0!==a){if("value"in a)return a.value;var l=a.get;if(void 0===l)return;return l.call(s)}var h=Object.getPrototypeOf(o);if(null===h)return;t=h,e=r,n=s,i=!0,a=h=void 0}};if("undefined"==typeof A)throw new Error("You must include the utils.js file before tether.js");var x=A.Utils,r=x.getScrollParents,a=x.getBounds,l=x.getOffsetParent,u=x.extend,d=x.addClass,c=x.removeClass,m=x.updateClasses,N=x.defer,P=x.flush,h=x.getScrollBarSize,s=x.removeUtilElements,W=function(){if("undefined"==typeof document)return"";for(var t=document.createElement("div"),e=["transform","WebkitTransform","OTransform","MozTransform","msTransform"],n=0;n<e.length;++n){var i=e[n];if(void 0!==t.style[i])return i}}(),M=[],V=function(){M.forEach(function(t){t.position(!1)}),P()};!function(){var t=null,e=null,n=null,i=function i(){return"undefined"!=typeof e&&e>16?(e=Math.min(e-16,250),void(n=setTimeout(i,250))):void("undefined"!=typeof t&&_()-t<10||(null!=n&&(clearTimeout(n),n=null),t=_(),V(),e=_()-t))};"undefined"!=typeof window&&"undefined"!=typeof window.addEventListener&&["resize","scroll","touchmove"].forEach(function(t){window.addEventListener(t,i)})}();var B={center:"center",left:"right",right:"left"},F={middle:"middle",top:"bottom",bottom:"top"},U={top:0,left:0,middle:"50%",center:"50%",bottom:"100%",right:"100%"},j=function(t,e){var n=t.left,i=t.top;return"auto"===n&&(n=B[e.left]),"auto"===i&&(i=F[e.top]),{left:n,top:i}},q=function(t){var e=t.left,n=t.top;return"undefined"!=typeof U[t.left]&&(e=U[t.left]),"undefined"!=typeof U[t.top]&&(n=U[t.top]),{left:e,top:n}},G=function(t){var e=t.split(" "),n=k(e,2),i=n[0],o=n[1];return{top:i,left:o}},K=G,Q=function(t){function e(t){var n=this;i(this,e),H(Object.getPrototypeOf(e.prototype),"constructor",this).call(this),this.position=this.position.bind(this),M.push(this),this.history=[],this.setOptions(t,!1),A.modules.forEach(function(t){"undefined"!=typeof t.initialize&&t.initialize.call(n)}),this.position()}return v(e,t),C(e,[{key:"getClass",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"":arguments[0],e=this.options.classes;return"undefined"!=typeof e&&e[t]?this.options.classes[t]:this.options.classPrefix?this.options.classPrefix+"-"+t:t}},{key:"setOptions",value:function(t){var e=this,n=arguments.length<=1||void 0===arguments[1]||arguments[1],i={offset:"0 0",targetOffset:"0 0",targetAttachment:"auto auto",classPrefix:"tether"};this.options=u(i,t);var o=this.options,s=o.element,a=o.target,l=o.targetModifier;if(this.element=s,this.target=a,this.targetModifier=l,"viewport"===this.target?(this.target=document.body,this.targetModifier="visible"):"scroll-handle"===this.target&&(this.target=document.body,this.targetModifier="scroll-handle"),["element","target"].forEach(function(t){if("undefined"==typeof e[t])throw new Error("Tether Error: Both element and target must be defined");"undefined"!=typeof e[t].jquery?e[t]=e[t][0]:"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))}),d(this.element,this.getClass("element")),this.options.addTargetClasses!==!1&&d(this.target,this.getClass("target")),!this.options.attachment)throw new Error("Tether Error: You must provide an attachment");this.targetAttachment=K(this.options.targetAttachment),this.attachment=K(this.options.attachment),this.offset=G(this.options.offset),this.targetOffset=G(this.options.targetOffset),"undefined"!=typeof this.scrollParents&&this.disable(),"scroll-handle"===this.targetModifier?this.scrollParents=[this.target]:this.scrollParents=r(this.target),this.options.enabled!==!1&&this.enable(n)}},{key:"getTargetBounds",value:function(){if("undefined"==typeof this.targetModifier)return a(this.target);if("visible"===this.targetModifier){if(this.target===document.body)return{top:pageYOffset,left:pageXOffset,height:innerHeight,width:innerWidth};var t=a(this.target),e={height:t.height,width:t.width,top:t.top,left:t.left};return e.height=Math.min(e.height,t.height-(pageYOffset-t.top)),e.height=Math.min(e.height,t.height-(t.top+t.height-(pageYOffset+innerHeight))),e.height=Math.min(innerHeight,e.height),e.height-=2,e.width=Math.min(e.width,t.width-(pageXOffset-t.left)),e.width=Math.min(e.width,t.width-(t.left+t.width-(pageXOffset+innerWidth))),e.width=Math.min(innerWidth,e.width),e.width-=2,e.top<pageYOffset&&(e.top=pageYOffset),e.left<pageXOffset&&(e.left=pageXOffset),e}if("scroll-handle"===this.targetModifier){var t=void 0,n=this.target;n===document.body?(n=document.documentElement,t={left:pageXOffset,top:pageYOffset,height:innerHeight,width:innerWidth}):t=a(n);var i=getComputedStyle(n),o=n.scrollWidth>n.clientWidth||[i.overflow,i.overflowX].indexOf("scroll")>=0||this.target!==document.body,r=0;o&&(r=15);var s=t.height-parseFloat(i.borderTopWidth)-parseFloat(i.borderBottomWidth)-r,e={width:15,height:.975*s*(s/n.scrollHeight),left:t.left+t.width-parseFloat(i.borderLeftWidth)-15},l=0;s<408&&this.target===document.body&&(l=-11e-5*Math.pow(s,2)-.00727*s+22.58),this.target!==document.body&&(e.height=Math.max(e.height,24));var h=this.target.scrollTop/(n.scrollHeight-s);return e.top=h*(s-e.height-l)+t.top+parseFloat(i.borderTopWidth),this.target===document.body&&(e.height=Math.max(e.height,24)),e}}},{key:"clearCache",value:function(){this._cache={}}},{key:"cache",value:function(t,e){return"undefined"==typeof this._cache&&(this._cache={}),"undefined"==typeof this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]}},{key:"enable",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]||arguments[0];this.options.addTargetClasses!==!1&&d(this.target,this.getClass("enabled")),d(this.element,this.getClass("enabled")),this.enabled=!0,this.scrollParents.forEach(function(e){e!==t.target.ownerDocument&&e.addEventListener("scroll",t.position)}),e&&this.position()}},{key:"disable",value:function(){var t=this;c(this.target,this.getClass("enabled")),c(this.element,this.getClass("enabled")),this.enabled=!1,"undefined"!=typeof this.scrollParents&&this.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.position)})}},{key:"destroy",value:function(){var t=this;this.disable(),M.forEach(function(e,n){e===t&&M.splice(n,1)}),0===M.length&&s()}},{key:"updateAttachClasses",value:function(t,e){var n=this;t=t||this.attachment,e=e||this.targetAttachment;var i=["left","top","bottom","right","middle","center"];"undefined"!=typeof this._addAttachClasses&&this._addAttachClasses.length&&this._addAttachClasses.splice(0,this._addAttachClasses.length),"undefined"==typeof this._addAttachClasses&&(this._addAttachClasses=[]);var o=this._addAttachClasses;t.top&&o.push(this.getClass("element-attached")+"-"+t.top),t.left&&o.push(this.getClass("element-attached")+"-"+t.left),e.top&&o.push(this.getClass("target-attached")+"-"+e.top),e.left&&o.push(this.getClass("target-attached")+"-"+e.left);var r=[];i.forEach(function(t){r.push(n.getClass("element-attached")+"-"+t),r.push(n.getClass("target-attached")+"-"+t)}),N(function(){"undefined"!=typeof n._addAttachClasses&&(m(n.element,n._addAttachClasses,r),n.options.addTargetClasses!==!1&&m(n.target,n._addAttachClasses,r),delete n._addAttachClasses)})}},{key:"position",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]||arguments[0];if(this.enabled){this.clearCache();var n=j(this.targetAttachment,this.attachment);this.updateAttachClasses(this.attachment,n);var i=this.cache("element-bounds",function(){return a(t.element)}),o=i.width,r=i.height;if(0===o&&0===r&&"undefined"!=typeof this.lastSize){var s=this.lastSize;o=s.width,r=s.height}else this.lastSize={width:o,height:r};var u=this.cache("target-bounds",function(){return t.getTargetBounds()}),c=u,d=T(q(this.attachment),{width:o,height:r}),f=T(q(n),c),p=T(this.offset,{width:o,height:r}),g=T(this.targetOffset,c);d=E(d,p),f=E(f,g);for(var m=u.left+f.left-d.left,v=u.top+f.top-d.top,y=0;y<A.modules.length;++y){var _=A.modules[y],b=_.position.call(this,{left:m,top:v,targetAttachment:n,targetPos:u,elementPos:i,offset:d,targetOffset:f,manualOffset:p,manualTargetOffset:g,scrollbarSize:I,attachment:this.attachment});if(b===!1)return!1;"undefined"!=typeof b&&"object"==typeof b&&(v=b.top,m=b.left)}var C={page:{top:v,left:m},viewport:{top:v-pageYOffset,bottom:pageYOffset-v-r+innerHeight,left:m-pageXOffset,right:pageXOffset-m-o+innerWidth}},w=this.target.ownerDocument,S=w.defaultView,I=void 0;return S.innerHeight>w.documentElement.clientHeight&&(I=this.cache("scrollbar-size",h),C.viewport.bottom-=I.height),S.innerWidth>w.documentElement.clientWidth&&(I=this.cache("scrollbar-size",h),C.viewport.right-=I.width),["","static"].indexOf(w.body.style.position)!==-1&&["","static"].indexOf(w.body.parentElement.style.position)!==-1||(C.page.bottom=w.body.scrollHeight-v-r,C.page.right=w.body.scrollWidth-m-o),"undefined"!=typeof this.options.optimizations&&this.options.optimizations.moveElement!==!1&&"undefined"==typeof this.targetModifier&&!function(){var e=t.cache("target-offsetparent",function(){return l(t.target)}),n=t.cache("target-offsetparent-bounds",function(){return a(e)}),i=getComputedStyle(e),o=n,r={};if(["Top","Left","Bottom","Right"].forEach(function(t){r[t.toLowerCase()]=parseFloat(i["border"+t+"Width"])}),n.right=w.body.scrollWidth-n.left-o.width+r.right,n.bottom=w.body.scrollHeight-n.top-o.height+r.bottom,C.page.top>=n.top+r.top&&C.page.bottom>=n.bottom&&C.page.left>=n.left+r.left&&C.page.right>=n.right){var s=e.scrollTop,h=e.scrollLeft;C.offset={top:C.page.top-n.top+s-r.top,left:C.page.left-n.left+h-r.left}}}(),this.move(C),this.history.unshift(C),this.history.length>3&&this.history.pop(),e&&P(),!0}}},{key:"move",value:function(t){var e=this;if("undefined"!=typeof this.element.parentNode){var n={};for(var i in t){n[i]={};for(var o in t[i]){for(var r=!1,s=0;s<this.history.length;++s){var a=this.history[s];if("undefined"!=typeof a[i]&&!y(a[i][o],t[i][o])){r=!0;break}}r||(n[i][o]=!0)}}var h={top:"",left:"",right:"",bottom:""},c=function(t,n){var i="undefined"!=typeof e.options.optimizations,o=i?e.options.optimizations.gpu:null;if(o!==!1){var r=void 0,s=void 0;if(t.top?(h.top=0,r=n.top):(h.bottom=0,r=-n.bottom),t.left?(h.left=0,s=n.left):(h.right=0,s=-n.right),window.matchMedia){var a=window.matchMedia("only screen and (min-resolution: 1.3dppx)").matches||window.matchMedia("only screen and (-webkit-min-device-pixel-ratio: 1.3)").matches;a||(s=Math.round(s),r=Math.round(r))}h[W]="translateX("+s+"px) translateY("+r+"px)","msTransform"!==W&&(h[W]+=" translateZ(0)")}else t.top?h.top=n.top+"px":h.bottom=n.bottom+"px",t.left?h.left=n.left+"px":h.right=n.right+"px"},d=!1;if((n.page.top||n.page.bottom)&&(n.page.left||n.page.right)?(h.position="absolute",c(n.page,t.page)):(n.viewport.top||n.viewport.bottom)&&(n.viewport.left||n.viewport.right)?(h.position="fixed",c(n.viewport,t.viewport)):"undefined"!=typeof n.offset&&n.offset.top&&n.offset.left?!function(){h.position="absolute";var i=e.cache("target-offsetparent",function(){return l(e.target)});l(e.element)!==i&&N(function(){e.element.parentNode.removeChild(e.element),i.appendChild(e.element)}),c(n.offset,t.offset),d=!0}():(h.position="absolute",c({top:!0,left:!0},t.page)),!d)if(this.options.bodyElement)this.options.bodyElement.appendChild(this.element);else{for(var f=!0,p=this.element.parentNode;p&&1===p.nodeType&&"BODY"!==p.tagName;){if("static"!==getComputedStyle(p).position){f=!1;break}p=p.parentNode}f||(this.element.parentNode.removeChild(this.element),this.element.ownerDocument.body.appendChild(this.element))}var g={},m=!1;for(var o in h){var v=h[o],_=this.element.style[o];_!==v&&(m=!0,g[o]=v)}m&&N(function(){u(e.element.style,g),e.trigger("repositioned")})}}}]),e}(R);Q.modules=[],A.position=V;var Y=u(Q,A),k=function(){function t(t,e){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(t){o=!0,r=t}finally{try{!i&&a.return&&a.return()}finally{if(o)throw r}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),x=A.Utils,a=x.getBounds,u=x.extend,m=x.updateClasses,N=x.defer,X=["left","top","right","bottom"];A.modules.push({position:function(t){var e=this,n=t.top,i=t.left,o=t.targetAttachment;if(!this.options.constraints)return!0;var r=this.cache("element-bounds",function(){return a(e.element)}),s=r.height,l=r.width;if(0===l&&0===s&&"undefined"!=typeof this.lastSize){var h=this.lastSize;l=h.width,s=h.height}var c=this.cache("target-bounds",function(){return e.getTargetBounds()}),d=c.height,f=c.width,p=[this.getClass("pinned"),this.getClass("out-of-bounds")];this.options.constraints.forEach(function(t){var e=t.outOfBoundsClass,n=t.pinnedClass;e&&p.push(e),n&&p.push(n)}),p.forEach(function(t){["left","top","right","bottom"].forEach(function(e){p.push(t+"-"+e)})});var g=[],v=u({},o),y=u({},this.attachment);return this.options.constraints.forEach(function(t){var r=t.to,a=t.attachment,h=t.pin;"undefined"==typeof a&&(a="");var u=void 0,c=void 0;if(a.indexOf(" ")>=0){var p=a.split(" "),m=k(p,2);c=m[0],u=m[1]}else u=c=a;var _=b(e,r);"target"!==c&&"both"!==c||(n<_[1]&&"top"===v.top&&(n+=d,v.top="bottom"),n+s>_[3]&&"bottom"===v.top&&(n-=d,v.top="top")),"together"===c&&("top"===v.top&&("bottom"===y.top&&n<_[1]?(n+=d,v.top="bottom",n+=s,y.top="top"):"top"===y.top&&n+s>_[3]&&n-(s-d)>=_[1]&&(n-=s-d,v.top="bottom",y.top="bottom")),"bottom"===v.top&&("top"===y.top&&n+s>_[3]?(n-=d,v.top="top",n-=s,y.top="bottom"):"bottom"===y.top&&n<_[1]&&n+(2*s-d)<=_[3]&&(n+=s-d,v.top="top",y.top="top")),"middle"===v.top&&(n+s>_[3]&&"top"===y.top?(n-=s,y.top="bottom"):n<_[1]&&"bottom"===y.top&&(n+=s,y.top="top"))),"target"!==u&&"both"!==u||(i<_[0]&&"left"===v.left&&(i+=f,v.left="right"),i+l>_[2]&&"right"===v.left&&(i-=f,v.left="left")),"together"===u&&(i<_[0]&&"left"===v.left?"right"===y.left?(i+=f,v.left="right",i+=l,y.left="left"):"left"===y.left&&(i+=f,v.left="right",i-=l,y.left="right"):i+l>_[2]&&"right"===v.left?"left"===y.left?(i-=f,v.left="left",i-=l,y.left="right"):"right"===y.left&&(i-=f,v.left="left",i+=l,y.left="left"):"center"===v.left&&(i+l>_[2]&&"left"===y.left?(i-=l,y.left="right"):i<_[0]&&"right"===y.left&&(i+=l,y.left="left"))),"element"!==c&&"both"!==c||(n<_[1]&&"bottom"===y.top&&(n+=s,y.top="top"),n+s>_[3]&&"top"===y.top&&(n-=s,y.top="bottom")),"element"!==u&&"both"!==u||(i<_[0]&&("right"===y.left?(i+=l,y.left="left"):"center"===y.left&&(i+=l/2,y.left="left")),i+l>_[2]&&("left"===y.left?(i-=l,y.left="right"):"center"===y.left&&(i-=l/2,y.left="right"))),"string"==typeof h?h=h.split(",").map(function(t){return t.trim()}):h===!0&&(h=["top","left","right","bottom"]),h=h||[];var E=[],T=[];n<_[1]&&(h.indexOf("top")>=0?(n=_[1],E.push("top")):T.push("top")),n+s>_[3]&&(h.indexOf("bottom")>=0?(n=_[3]-s,E.push("bottom")):T.push("bottom")),i<_[0]&&(h.indexOf("left")>=0?(i=_[0],E.push("left")):T.push("left")),i+l>_[2]&&(h.indexOf("right")>=0?(i=_[2]-l,E.push("right")):T.push("right")),E.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.pinnedClass?e.options.pinnedClass:e.getClass("pinned"),g.push(t),E.forEach(function(e){g.push(t+"-"+e)})}(),T.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.outOfBoundsClass?e.options.outOfBoundsClass:e.getClass("out-of-bounds"),g.push(t),T.forEach(function(e){g.push(t+"-"+e)})}(),(E.indexOf("left")>=0||E.indexOf("right")>=0)&&(y.left=v.left=!1),(E.indexOf("top")>=0||E.indexOf("bottom")>=0)&&(y.top=v.top=!1),v.top===o.top&&v.left===o.left&&y.top===e.attachment.top&&y.left===e.attachment.left||(e.updateAttachClasses(y,v),e.trigger("update",{attachment:y,targetAttachment:v}))}),N(function(){e.options.addTargetClasses!==!1&&m(e.target,g,p),m(e.element,g,p)}),{top:n,left:i}}});var x=A.Utils,a=x.getBounds,m=x.updateClasses,N=x.defer;A.modules.push({position:function(t){var e=this,n=t.top,i=t.left,o=this.cache("element-bounds",function(){return a(e.element)}),r=o.height,s=o.width,l=this.getTargetBounds(),h=n+r,u=i+s,c=[];n<=l.bottom&&h>=l.top&&["left","right"].forEach(function(t){var e=l[t];e!==i&&e!==u||c.push(t)}),i<=l.right&&u>=l.left&&["top","bottom"].forEach(function(t){var e=l[t];e!==n&&e!==h||c.push(t)});var d=[],f=[],p=["left","top","right","bottom"];return d.push(this.getClass("abutted")),p.forEach(function(t){d.push(e.getClass("abutted")+"-"+t)}),c.length&&f.push(this.getClass("abutted")),c.forEach(function(t){f.push(e.getClass("abutted")+"-"+t)}),N(function(){e.options.addTargetClasses!==!1&&m(e.target,f,d),m(e.element,f,d)}),!0}});var k=function(){function t(t,e){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(t){o=!0,r=t}finally{try{!i&&a.return&&a.return()}finally{if(o)throw r}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();return A.modules.push({position:function(t){var e=t.top,n=t.left;if(this.options.shift){var i=this.options.shift;"function"==typeof this.options.shift&&(i=this.options.shift.call(this,{top:e,left:n}));var o=void 0,r=void 0;if("string"==typeof i){i=i.split(" "),i[1]=i[1]||i[0];var s=i,a=k(s,2);o=a[0],r=a[1],o=parseFloat(o,10),r=parseFloat(r,10)}else o=i.top,r=i.left;return e+=o,n+=r,{top:e,left:n}}}}),Y})},function(t,e){/*!
	 * Bootstrap v4.0.0-beta (https://getbootstrap.com)
	 * Copyright 2011-2017 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");!function(t){var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(jQuery),function(){function t(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function e(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=function(t){function e(t){return{}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function n(t){return(t[0]||t).nodeType}function i(){return{bindType:a.end,delegateType:a.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}}function o(){if(window.QUnit)return!1;var t=document.createElement("bootstrap");for(var e in h)if(void 0!==t.style[e])return{end:h[e]};return!1}function r(e){var n=this,i=!1;return t(this).one(u.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||u.triggerTransitionEnd(n)},e),this}function s(){a=o(),t.fn.emulateTransitionEnd=r,u.supportsTransitionEnd()&&(t.event.special[u.TRANSITION_END]=i())}var a=!1,l=1e6,h={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},u={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do t+=~~(Math.random()*l);while(document.getElementById(t));return t},getSelectorFromElement:function(e){var n=e.getAttribute("data-target");n&&"#"!==n||(n=e.getAttribute("href")||"");try{var i=t(n);return i.length>0?n:null}catch(t){return null}},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(e){t(e).trigger(a.end)},supportsTransitionEnd:function(){return Boolean(a)},typeCheckConfig:function(t,i,o){for(var r in o)if(o.hasOwnProperty(r)){var s=o[r],a=i[r],l=a&&n(a)?"element":e(a);if(!new RegExp(s).test(l))throw new Error(t.toUpperCase()+": "+('Option "'+r+'" provided type "'+l+'" ')+('but expected type "'+s+'".'))}}};return s(),u}(jQuery),s=(function(t){var e="alert",i="4.0.0-beta",s="bs.alert",a="."+s,l=".data-api",h=t.fn[e],u=150,c={DISMISS:'[data-dismiss="alert"]'},d={CLOSE:"close"+a,CLOSED:"closed"+a,CLICK_DATA_API:"click"+a+l},f={ALERT:"alert",FADE:"fade",SHOW:"show"},p=function(){function e(t){n(this,e),this._element=t}return e.prototype.close=function(t){t=t||this._element;var e=this._getRootElement(t),n=this._triggerCloseEvent(e);n.isDefaultPrevented()||this._removeElement(e)},e.prototype.dispose=function(){t.removeData(this._element,s),this._element=null},e.prototype._getRootElement=function(e){var n=r.getSelectorFromElement(e),i=!1;return n&&(i=t(n)[0]),i||(i=t(e).closest("."+f.ALERT)[0]),i},e.prototype._triggerCloseEvent=function(e){var n=t.Event(d.CLOSE);return t(e).trigger(n),n},e.prototype._removeElement=function(e){var n=this;return t(e).removeClass(f.SHOW),r.supportsTransitionEnd()&&t(e).hasClass(f.FADE)?void t(e).one(r.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(u):void this._destroyElement(e)},e.prototype._destroyElement=function(e){t(e).detach().trigger(d.CLOSED).remove()},e._jQueryInterface=function(n){return this.each(function(){var i=t(this),o=i.data(s);o||(o=new e(this),i.data(s,o)),"close"===n&&o[n](this)})},e._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},o(e,null,[{key:"VERSION",get:function(){return i}}]),e}();return t(document).on(d.CLICK_DATA_API,c.DISMISS,p._handleDismiss(new p)),t.fn[e]=p._jQueryInterface,t.fn[e].Constructor=p,t.fn[e].noConflict=function(){return t.fn[e]=h,p._jQueryInterface},p}(jQuery),function(t){var e="button",i="4.0.0-beta",r="bs.button",s="."+r,a=".data-api",l=t.fn[e],h={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},u={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},c={CLICK_DATA_API:"click"+s+a,FOCUS_BLUR_DATA_API:"focus"+s+a+" "+("blur"+s+a)},d=function(){function e(t){n(this,e),this._element=t}return e.prototype.toggle=function(){var e=!0,n=!0,i=t(this._element).closest(u.DATA_TOGGLE)[0];if(i){var o=t(this._element).find(u.INPUT)[0];if(o){if("radio"===o.type)if(o.checked&&t(this._element).hasClass(h.ACTIVE))e=!1;else{var r=t(i).find(u.ACTIVE)[0];r&&t(r).removeClass(h.ACTIVE)}if(e){if(o.hasAttribute("disabled")||i.hasAttribute("disabled")||o.classList.contains("disabled")||i.classList.contains("disabled"))return;o.checked=!t(this._element).hasClass(h.ACTIVE),t(o).trigger("change")}o.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!t(this._element).hasClass(h.ACTIVE)),e&&t(this._element).toggleClass(h.ACTIVE)},e.prototype.dispose=function(){t.removeData(this._element,r),this._element=null},e._jQueryInterface=function(n){return this.each(function(){var i=t(this).data(r);i||(i=new e(this),t(this).data(r,i)),"toggle"===n&&i[n]()})},o(e,null,[{key:"VERSION",get:function(){return i}}]),e}();return t(document).on(c.CLICK_DATA_API,u.DATA_TOGGLE_CARROT,function(e){e.preventDefault();var n=e.target;t(n).hasClass(h.BUTTON)||(n=t(n).closest(u.BUTTON)),d._jQueryInterface.call(t(n),"toggle")}).on(c.FOCUS_BLUR_DATA_API,u.DATA_TOGGLE_CARROT,function(e){var n=t(e.target).closest(u.BUTTON)[0];t(n).toggleClass(h.FOCUS,/^focus(in)?$/.test(e.type))}),t.fn[e]=d._jQueryInterface,t.fn[e].Constructor=d,t.fn[e].noConflict=function(){return t.fn[e]=l,d._jQueryInterface},d}(jQuery),function(t){var e="carousel",s="4.0.0-beta",a="bs.carousel",l="."+a,h=".data-api",u=t.fn[e],c=600,d=37,f=39,p=500,g={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},m={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},v={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},y={SLIDE:"slide"+l,SLID:"slid"+l,KEYDOWN:"keydown"+l,MOUSEENTER:"mouseenter"+l,MOUSELEAVE:"mouseleave"+l,TOUCHEND:"touchend"+l,LOAD_DATA_API:"load"+l+h,CLICK_DATA_API:"click"+l+h},_={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},E={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},T=function(){function h(e,i){n(this,h),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(i),this._element=t(e)[0],this._indicatorsElement=t(this._element).find(E.INDICATORS)[0],this._addEventListeners()}return h.prototype.next=function(){this._isSliding||this._slide(v.NEXT)},h.prototype.nextWhenVisible=function(){document.hidden||this.next()},h.prototype.prev=function(){this._isSliding||this._slide(v.PREV)},h.prototype.pause=function(e){e||(this._isPaused=!0),t(this._element).find(E.NEXT_PREV)[0]&&r.supportsTransitionEnd()&&(r.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},h.prototype.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},h.prototype.to=function(e){var n=this;this._activeElement=t(this._element).find(E.ACTIVE_ITEM)[0];var i=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0)){if(this._isSliding)return void t(this._element).one(y.SLID,function(){return n.to(e)});if(i===e)return this.pause(),void this.cycle();var o=e>i?v.NEXT:v.PREV;this._slide(o,this._items[e])}},h.prototype.dispose=function(){t(this._element).off(l),t.removeData(this._element,a),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},h.prototype._getConfig=function(n){return n=t.extend({},g,n),r.typeCheckConfig(e,n,m),n},h.prototype._addEventListeners=function(){var e=this;this._config.keyboard&&t(this._element).on(y.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(t(this._element).on(y.MOUSEENTER,function(t){return e.pause(t)}).on(y.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&t(this._element).on(y.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},p+e._config.interval)}))},h.prototype._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case d:t.preventDefault(),this.prev();break;case f:t.preventDefault(),this.next();break;default:return}},h.prototype._getItemIndex=function(e){return this._items=t.makeArray(t(e).parent().find(E.ITEM)),this._items.indexOf(e)},h.prototype._getItemByDirection=function(t,e){var n=t===v.NEXT,i=t===v.PREV,o=this._getItemIndex(e),r=this._items.length-1,s=i&&0===o||n&&o===r;if(s&&!this._config.wrap)return e;var a=t===v.PREV?-1:1,l=(o+a)%this._items.length;return l===-1?this._items[this._items.length-1]:this._items[l]},h.prototype._triggerSlideEvent=function(e,n){var i=this._getItemIndex(e),o=this._getItemIndex(t(this._element).find(E.ACTIVE_ITEM)[0]),r=t.Event(y.SLIDE,{relatedTarget:e,direction:n,from:o,to:i});return t(this._element).trigger(r),r},h.prototype._setActiveIndicatorElement=function(e){if(this._indicatorsElement){t(this._indicatorsElement).find(E.ACTIVE).removeClass(_.ACTIVE);var n=this._indicatorsElement.children[this._getItemIndex(e)];n&&t(n).addClass(_.ACTIVE)}},h.prototype._slide=function(e,n){var i=this,o=t(this._element).find(E.ACTIVE_ITEM)[0],s=this._getItemIndex(o),a=n||o&&this._getItemByDirection(e,o),l=this._getItemIndex(a),h=Boolean(this._interval),u=void 0,d=void 0,f=void 0;if(e===v.NEXT?(u=_.LEFT,d=_.NEXT,f=v.LEFT):(u=_.RIGHT,d=_.PREV,f=v.RIGHT),a&&t(a).hasClass(_.ACTIVE))return void(this._isSliding=!1);var p=this._triggerSlideEvent(a,f);if(!p.isDefaultPrevented()&&o&&a){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(a);var g=t.Event(y.SLID,{relatedTarget:a,direction:f,from:s,to:l});r.supportsTransitionEnd()&&t(this._element).hasClass(_.SLIDE)?(t(a).addClass(d),r.reflow(a),t(o).addClass(u),t(a).addClass(u),t(o).one(r.TRANSITION_END,function(){t(a).removeClass(u+" "+d).addClass(_.ACTIVE),t(o).removeClass(_.ACTIVE+" "+d+" "+u),i._isSliding=!1,setTimeout(function(){return t(i._element).trigger(g)},0)}).emulateTransitionEnd(c)):(t(o).removeClass(_.ACTIVE),t(a).addClass(_.ACTIVE),this._isSliding=!1,t(this._element).trigger(g)),h&&this.cycle()}},h._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(a),o=t.extend({},g,t(this).data());"object"===("undefined"==typeof e?"undefined":i(e))&&t.extend(o,e);var r="string"==typeof e?e:o.slide;if(n||(n=new h(this,o),t(this).data(a,n)),"number"==typeof e)n.to(e);else if("string"==typeof r){if(void 0===n[r])throw new Error('No method named "'+r+'"');n[r]()}else o.interval&&(n.pause(),n.cycle())})},h._dataApiClickHandler=function(e){var n=r.getSelectorFromElement(this);if(n){var i=t(n)[0];if(i&&t(i).hasClass(_.CAROUSEL)){var o=t.extend({},t(i).data(),t(this).data()),s=this.getAttribute("data-slide-to");s&&(o.interval=!1),h._jQueryInterface.call(t(i),o),s&&t(i).data(a).to(s),e.preventDefault()}}},o(h,null,[{key:"VERSION",get:function(){return s}},{key:"Default",get:function(){return g}}]),h}();return t(document).on(y.CLICK_DATA_API,E.DATA_SLIDE,T._dataApiClickHandler),t(window).on(y.LOAD_DATA_API,function(){t(E.DATA_RIDE).each(function(){var e=t(this);T._jQueryInterface.call(e,e.data())})}),t.fn[e]=T._jQueryInterface,t.fn[e].Constructor=T,t.fn[e].noConflict=function(){return t.fn[e]=u,T._jQueryInterface},T}(jQuery),function(t){var e="collapse",s="4.0.0-beta",a="bs.collapse",l="."+a,h=".data-api",u=t.fn[e],c=600,d={toggle:!0,parent:""},f={toggle:"boolean",parent:"string"},p={SHOW:"show"+l,SHOWN:"shown"+l,HIDE:"hide"+l,HIDDEN:"hidden"+l,CLICK_DATA_API:"click"+l+h},g={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},m={WIDTH:"width",HEIGHT:"height"},v={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},y=function(){function l(e,i){n(this,l),this._isTransitioning=!1,this._element=e,this._config=this._getConfig(i),this._triggerArray=t.makeArray(t('[data-toggle="collapse"][href="#'+e.id+'"],'+('[data-toggle="collapse"][data-target="#'+e.id+'"]')));for(var o=t(v.DATA_TOGGLE),s=0;s<o.length;s++){var a=o[s],h=r.getSelectorFromElement(a);null!==h&&t(h).filter(e).length>0&&this._triggerArray.push(a)}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return l.prototype.toggle=function(){t(this._element).hasClass(g.SHOW)?this.hide():this.show()},l.prototype.show=function(){var e=this;if(!this._isTransitioning&&!t(this._element).hasClass(g.SHOW)){var n=void 0,i=void 0;if(this._parent&&(n=t.makeArray(t(this._parent).children().children(v.ACTIVES)),n.length||(n=null)),!(n&&(i=t(n).data(a),i&&i._isTransitioning))){var o=t.Event(p.SHOW);if(t(this._element).trigger(o),!o.isDefaultPrevented()){n&&(l._jQueryInterface.call(t(n),"hide"),i||t(n).data(a,null));var s=this._getDimension();t(this._element).removeClass(g.COLLAPSE).addClass(g.COLLAPSING),this._element.style[s]=0,this._triggerArray.length&&t(this._triggerArray).removeClass(g.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var h=function(){t(e._element).removeClass(g.COLLAPSING).addClass(g.COLLAPSE).addClass(g.SHOW),e._element.style[s]="",e.setTransitioning(!1),t(e._element).trigger(p.SHOWN)};if(!r.supportsTransitionEnd())return void h();var u=s[0].toUpperCase()+s.slice(1),d="scroll"+u;t(this._element).one(r.TRANSITION_END,h).emulateTransitionEnd(c),this._element.style[s]=this._element[d]+"px"}}}},l.prototype.hide=function(){var e=this;if(!this._isTransitioning&&t(this._element).hasClass(g.SHOW)){var n=t.Event(p.HIDE);if(t(this._element).trigger(n),!n.isDefaultPrevented()){var i=this._getDimension();if(this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",r.reflow(this._element),t(this._element).addClass(g.COLLAPSING).removeClass(g.COLLAPSE).removeClass(g.SHOW),this._triggerArray.length)for(var o=0;o<this._triggerArray.length;o++){var s=this._triggerArray[o],a=r.getSelectorFromElement(s);if(null!==a){var l=t(a);l.hasClass(g.SHOW)||t(s).addClass(g.COLLAPSED).attr("aria-expanded",!1)}}this.setTransitioning(!0);var h=function(){e.setTransitioning(!1),t(e._element).removeClass(g.COLLAPSING).addClass(g.COLLAPSE).trigger(p.HIDDEN)};return this._element.style[i]="",r.supportsTransitionEnd()?void t(this._element).one(r.TRANSITION_END,h).emulateTransitionEnd(c):void h()}}},l.prototype.setTransitioning=function(t){this._isTransitioning=t},l.prototype.dispose=function(){t.removeData(this._element,a),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},l.prototype._getConfig=function(n){return n=t.extend({},d,n),n.toggle=Boolean(n.toggle),r.typeCheckConfig(e,n,f),n},l.prototype._getDimension=function(){var e=t(this._element).hasClass(m.WIDTH);return e?m.WIDTH:m.HEIGHT},l.prototype._getParent=function(){var e=this,n=t(this._config.parent)[0],i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return t(n).find(i).each(function(t,n){e._addAriaAndCollapsedClass(l._getTargetFromElement(n),[n])}),n},l.prototype._addAriaAndCollapsedClass=function(e,n){if(e){var i=t(e).hasClass(g.SHOW);n.length&&t(n).toggleClass(g.COLLAPSED,!i).attr("aria-expanded",i)}},l._getTargetFromElement=function(e){var n=r.getSelectorFromElement(e);return n?t(n)[0]:null},l._jQueryInterface=function(e){return this.each(function(){var n=t(this),o=n.data(a),r=t.extend({},d,n.data(),"object"===("undefined"==typeof e?"undefined":i(e))&&e);if(!o&&r.toggle&&/show|hide/.test(e)&&(r.toggle=!1),o||(o=new l(this,r),n.data(a,o)),"string"==typeof e){if(void 0===o[e])throw new Error('No method named "'+e+'"');o[e]()}})},o(l,null,[{key:"VERSION",get:function(){return s}},{key:"Default",get:function(){return d}}]),l}();return t(document).on(p.CLICK_DATA_API,v.DATA_TOGGLE,function(e){/input|textarea/i.test(e.target.tagName)||e.preventDefault();var n=t(this),i=r.getSelectorFromElement(this);t(i).each(function(){var e=t(this),i=e.data(a),o=i?"toggle":n.data();y._jQueryInterface.call(e,o)})}),t.fn[e]=y._jQueryInterface,t.fn[e].Constructor=y,t.fn[e].noConflict=function(){return t.fn[e]=u,y._jQueryInterface},y}(jQuery),function(t){if("undefined"==typeof Popper)throw new Error("Bootstrap dropdown require Popper.js (https://popper.js.org)");var e="dropdown",s="4.0.0-beta",a="bs.dropdown",l="."+a,h=".data-api",u=t.fn[e],c=27,d=32,f=9,p=38,g=40,m=3,v=new RegExp(p+"|"+g+"|"+c),y={HIDE:"hide"+l,HIDDEN:"hidden"+l,SHOW:"show"+l,SHOWN:"shown"+l,CLICK:"click"+l,CLICK_DATA_API:"click"+l+h,KEYDOWN_DATA_API:"keydown"+l+h,KEYUP_DATA_API:"keyup"+l+h},_={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left"},E={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled)"},T={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end"},b={placement:T.BOTTOM,offset:0,flip:!0},C={placement:"string",offset:"(number|string)",flip:"boolean"},A=function(){function h(t,e){n(this,h),this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}return h.prototype.toggle=function(){if(!this._element.disabled&&!t(this._element).hasClass(_.DISABLED)){var e=h._getParentFromElement(this._element),n=t(this._menu).hasClass(_.SHOW);if(h._clearMenus(),!n){var i={relatedTarget:this._element},o=t.Event(y.SHOW,i);if(t(e).trigger(o),!o.isDefaultPrevented()){var r=this._element;t(e).hasClass(_.DROPUP)&&(t(this._menu).hasClass(_.MENULEFT)||t(this._menu).hasClass(_.MENURIGHT))&&(r=e),this._popper=new Popper(r,this._menu,this._getPopperConfig()),"ontouchstart"in document.documentElement&&!t(e).closest(E.NAVBAR_NAV).length&&t("body").children().on("mouseover",null,t.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),t(this._menu).toggleClass(_.SHOW),t(e).toggleClass(_.SHOW).trigger(t.Event(y.SHOWN,i))}}}},h.prototype.dispose=function(){t.removeData(this._element,a),t(this._element).off(l),this._element=null,this._menu=null,null!==this._popper&&this._popper.destroy(),this._popper=null},h.prototype.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},h.prototype._addEventListeners=function(){var e=this;t(this._element).on(y.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},h.prototype._getConfig=function(n){var i=t(this._element).data();return void 0!==i.placement&&(i.placement=T[i.placement.toUpperCase()]),n=t.extend({},this.constructor.Default,t(this._element).data(),n),r.typeCheckConfig(e,n,this.constructor.DefaultType),n},h.prototype._getMenuElement=function(){if(!this._menu){var e=h._getParentFromElement(this._element);this._menu=t(e).find(E.MENU)[0]}return this._menu},h.prototype._getPlacement=function(){var e=t(this._element).parent(),n=this._config.placement;return e.hasClass(_.DROPUP)||this._config.placement===T.TOP?(n=T.TOP,t(this._menu).hasClass(_.MENURIGHT)&&(n=T.TOPEND)):t(this._menu).hasClass(_.MENURIGHT)&&(n=T.BOTTOMEND),n},h.prototype._detectNavbar=function(){return t(this._element).closest(".navbar").length>0},h.prototype._getPopperConfig=function(){var t={placement:this._getPlacement(),modifiers:{offset:{offset:this._config.offset},flip:{enabled:this._config.flip}}};return this._inNavbar&&(t.modifiers.applyStyle={enabled:!this._inNavbar}),t},h._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(a),o="object"===("undefined"==typeof e?"undefined":i(e))?e:null;if(n||(n=new h(this,o),t(this).data(a,n)),"string"==typeof e){if(void 0===n[e])throw new Error('No method named "'+e+'"');n[e]()}})},h._clearMenus=function(e){if(!e||e.which!==m&&("keyup"!==e.type||e.which===f))for(var n=t.makeArray(t(E.DATA_TOGGLE)),i=0;i<n.length;i++){var o=h._getParentFromElement(n[i]),r=t(n[i]).data(a),s={relatedTarget:n[i]};if(r){var l=r._menu;if(t(o).hasClass(_.SHOW)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&e.which===f)&&t.contains(o,e.target))){var u=t.Event(y.HIDE,s);t(o).trigger(u),u.isDefaultPrevented()||("ontouchstart"in document.documentElement&&t("body").children().off("mouseover",null,t.noop),n[i].setAttribute("aria-expanded","false"),t(l).removeClass(_.SHOW),t(o).removeClass(_.SHOW).trigger(t.Event(y.HIDDEN,s)))}}}},h._getParentFromElement=function(e){var n=void 0,i=r.getSelectorFromElement(e);return i&&(n=t(i)[0]),n||e.parentNode},h._dataApiKeydownHandler=function(e){if(!(!v.test(e.which)||/button/i.test(e.target.tagName)&&e.which===d||/input|textarea/i.test(e.target.tagName)||(e.preventDefault(),e.stopPropagation(),this.disabled||t(this).hasClass(_.DISABLED)))){var n=h._getParentFromElement(this),i=t(n).hasClass(_.SHOW);if(!i&&(e.which!==c||e.which!==d)||i&&(e.which===c||e.which===d)){if(e.which===c){var o=t(n).find(E.DATA_TOGGLE)[0];t(o).trigger("focus")}return void t(this).trigger("click")}var r=t(n).find(E.VISIBLE_ITEMS).get();if(r.length){var s=r.indexOf(e.target);e.which===p&&s>0&&s--,e.which===g&&s<r.length-1&&s++,s<0&&(s=0),r[s].focus()}}},o(h,null,[{key:"VERSION",get:function(){return s}},{key:"Default",get:function(){return b}},{key:"DefaultType",get:function(){return C}}]),h}();return t(document).on(y.KEYDOWN_DATA_API,E.DATA_TOGGLE,A._dataApiKeydownHandler).on(y.KEYDOWN_DATA_API,E.MENU,A._dataApiKeydownHandler).on(y.CLICK_DATA_API+" "+y.KEYUP_DATA_API,A._clearMenus).on(y.CLICK_DATA_API,E.DATA_TOGGLE,function(e){e.preventDefault(),e.stopPropagation(),A._jQueryInterface.call(t(this),"toggle")}).on(y.CLICK_DATA_API,E.FORM_CHILD,function(t){t.stopPropagation()}),t.fn[e]=A._jQueryInterface,t.fn[e].Constructor=A,t.fn[e].noConflict=function(){return t.fn[e]=u,A._jQueryInterface},A}(jQuery),function(t){var e="modal",s="4.0.0-beta",a="bs.modal",l="."+a,h=".data-api",u=t.fn[e],c=300,d=150,f=27,p={backdrop:!0,keyboard:!0,focus:!0,show:!0},g={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},m={HIDE:"hide"+l,HIDDEN:"hidden"+l,SHOW:"show"+l,SHOWN:"shown"+l,FOCUSIN:"focusin"+l,RESIZE:"resize"+l,CLICK_DISMISS:"click.dismiss"+l,KEYDOWN_DISMISS:"keydown.dismiss"+l,MOUSEUP_DISMISS:"mouseup.dismiss"+l,MOUSEDOWN_DISMISS:"mousedown.dismiss"+l,CLICK_DATA_API:"click"+l+h},v={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},y={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},_=function(){function h(e,i){n(this,h),this._config=this._getConfig(i),this._element=e,this._dialog=t(e).find(y.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return h.prototype.toggle=function(t){return this._isShown?this.hide():this.show(t)},h.prototype.show=function(e){var n=this;if(!this._isTransitioning){r.supportsTransitionEnd()&&t(this._element).hasClass(v.FADE)&&(this._isTransitioning=!0);var i=t.Event(m.SHOW,{relatedTarget:e});t(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),t(document.body).addClass(v.OPEN),this._setEscapeEvent(),this._setResizeEvent(),t(this._element).on(m.CLICK_DISMISS,y.DATA_DISMISS,function(t){return n.hide(t)}),t(this._dialog).on(m.MOUSEDOWN_DISMISS,function(){t(n._element).one(m.MOUSEUP_DISMISS,function(e){t(e.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(e)}))}},h.prototype.hide=function(e){var n=this;if(e&&e.preventDefault(),!this._isTransitioning&&this._isShown){var i=r.supportsTransitionEnd()&&t(this._element).hasClass(v.FADE);i&&(this._isTransitioning=!0);var o=t.Event(m.HIDE);t(this._element).trigger(o),this._isShown&&!o.isDefaultPrevented()&&(this._isShown=!1,this._setEscapeEvent(),this._setResizeEvent(),t(document).off(m.FOCUSIN),t(this._element).removeClass(v.SHOW),t(this._element).off(m.CLICK_DISMISS),t(this._dialog).off(m.MOUSEDOWN_DISMISS),i?t(this._element).one(r.TRANSITION_END,function(t){return n._hideModal(t)}).emulateTransitionEnd(c):this._hideModal())}},h.prototype.dispose=function(){t.removeData(this._element,a),t(window,document,this._element,this._backdrop).off(l),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},h.prototype.handleUpdate=function(){this._adjustDialog()},h.prototype._getConfig=function(n){return n=t.extend({},p,n),r.typeCheckConfig(e,n,g),n},h.prototype._showElement=function(e){var n=this,i=r.supportsTransitionEnd()&&t(this._element).hasClass(v.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&r.reflow(this._element),t(this._element).addClass(v.SHOW),this._config.focus&&this._enforceFocus();var o=t.Event(m.SHOWN,{relatedTarget:e}),s=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,t(n._element).trigger(o)};i?t(this._dialog).one(r.TRANSITION_END,s).emulateTransitionEnd(c):s()},h.prototype._enforceFocus=function(){var e=this;t(document).off(m.FOCUSIN).on(m.FOCUSIN,function(n){document===n.target||e._element===n.target||t(e._element).has(n.target).length||e._element.focus()})},h.prototype._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?t(this._element).on(m.KEYDOWN_DISMISS,function(t){t.which===f&&(t.preventDefault(),e.hide())}):this._isShown||t(this._element).off(m.KEYDOWN_DISMISS)},h.prototype._setResizeEvent=function(){var e=this;this._isShown?t(window).on(m.RESIZE,function(t){return e.handleUpdate(t)}):t(window).off(m.RESIZE)},h.prototype._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){t(document.body).removeClass(v.OPEN),e._resetAdjustments(),e._resetScrollbar(),t(e._element).trigger(m.HIDDEN)})},h.prototype._removeBackdrop=function(){this._backdrop&&(t(this._backdrop).remove(),this._backdrop=null)},h.prototype._showBackdrop=function(e){var n=this,i=t(this._element).hasClass(v.FADE)?v.FADE:"";if(this._isShown&&this._config.backdrop){var o=r.supportsTransitionEnd()&&i;if(this._backdrop=document.createElement("div"),this._backdrop.className=v.BACKDROP,i&&t(this._backdrop).addClass(i),t(this._backdrop).appendTo(document.body),t(this._element).on(m.CLICK_DISMISS,function(t){return n._ignoreBackdropClick?void(n._ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide()))}),o&&r.reflow(this._backdrop),t(this._backdrop).addClass(v.SHOW),!e)return;if(!o)return void e();t(this._backdrop).one(r.TRANSITION_END,e).emulateTransitionEnd(d)}else if(!this._isShown&&this._backdrop){t(this._backdrop).removeClass(v.SHOW);var s=function(){n._removeBackdrop(),e&&e()};r.supportsTransitionEnd()&&t(this._element).hasClass(v.FADE)?t(this._backdrop).one(r.TRANSITION_END,s).emulateTransitionEnd(d):s()}else e&&e()},h.prototype._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},h.prototype._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},h.prototype._checkScrollbar=function(){this._isBodyOverflowing=document.body.clientWidth<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},h.prototype._setScrollbar=function(){var e=this;if(this._isBodyOverflowing){t(y.FIXED_CONTENT).each(function(n,i){var o=t(i)[0].style.paddingRight,r=t(i).css("padding-right");t(i).data("padding-right",o).css("padding-right",parseFloat(r)+e._scrollbarWidth+"px")}),t(y.NAVBAR_TOGGLER).each(function(n,i){var o=t(i)[0].style.marginRight,r=t(i).css("margin-right");t(i).data("margin-right",o).css("margin-right",parseFloat(r)+e._scrollbarWidth+"px")});var n=document.body.style.paddingRight,i=t("body").css("padding-right");t("body").data("padding-right",n).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px")}},h.prototype._resetScrollbar=function(){t(y.FIXED_CONTENT).each(function(e,n){var i=t(n).data("padding-right");"undefined"!=typeof i&&t(n).css("padding-right",i).removeData("padding-right")}),t(y.NAVBAR_TOGGLER).each(function(e,n){var i=t(n).data("margin-right");"undefined"!=typeof i&&t(n).css("margin-right",i).removeData("margin-right")});var e=t("body").data("padding-right");"undefined"!=typeof e&&t("body").css("padding-right",e).removeData("padding-right")},h.prototype._getScrollbarWidth=function(){var t=document.createElement("div");t.className=v.SCROLLBAR_MEASURER,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},h._jQueryInterface=function(e,n){return this.each(function(){var o=t(this).data(a),r=t.extend({},h.Default,t(this).data(),"object"===("undefined"==typeof e?"undefined":i(e))&&e);if(o||(o=new h(this,r),t(this).data(a,o)),"string"==typeof e){if(void 0===o[e])throw new Error('No method named "'+e+'"');o[e](n)}else r.show&&o.show(n)})},o(h,null,[{key:"VERSION",get:function(){return s}},{key:"Default",get:function(){return p}}]),h}();return t(document).on(m.CLICK_DATA_API,y.DATA_TOGGLE,function(e){var n=this,i=void 0,o=r.getSelectorFromElement(this);o&&(i=t(o)[0]);var s=t(i).data(a)?"toggle":t.extend({},t(i).data(),t(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var l=t(i).one(m.SHOW,function(e){e.isDefaultPrevented()||l.one(m.HIDDEN,function(){t(n).is(":visible")&&n.focus()})});_._jQueryInterface.call(t(i),s,this)}),t.fn[e]=_._jQueryInterface,t.fn[e].Constructor=_,t.fn[e].noConflict=function(){return t.fn[e]=u,_._jQueryInterface},_}(jQuery),function(t){var e="scrollspy",s="4.0.0-beta",a="bs.scrollspy",l="."+a,h=".data-api",u=t.fn[e],c={offset:10,method:"auto",target:""},d={offset:"number",method:"string",target:"(string|element)"},f={ACTIVATE:"activate"+l,SCROLL:"scroll"+l,LOAD_DATA_API:"load"+l+h},p={DROPDOWN_ITEM:"dropdown-item",
DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},g={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},m={OFFSET:"offset",POSITION:"position"},v=function(){function h(e,i){var o=this;n(this,h),this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(i),this._selector=this._config.target+" "+g.NAV_LINKS+","+(this._config.target+" "+g.LIST_ITEMS+",")+(this._config.target+" "+g.DROPDOWN_ITEMS),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,t(this._scrollElement).on(f.SCROLL,function(t){return o._process(t)}),this.refresh(),this._process()}return h.prototype.refresh=function(){var e=this,n=this._scrollElement!==this._scrollElement.window?m.POSITION:m.OFFSET,i="auto"===this._config.method?n:this._config.method,o=i===m.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var s=t.makeArray(t(this._selector));s.map(function(e){var n=void 0,s=r.getSelectorFromElement(e);if(s&&(n=t(s)[0]),n){var a=n.getBoundingClientRect();if(a.width||a.height)return[t(n)[i]().top+o,s]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},h.prototype.dispose=function(){t.removeData(this._element,a),t(this._scrollElement).off(l),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},h.prototype._getConfig=function(n){if(n=t.extend({},c,n),"string"!=typeof n.target){var i=t(n.target).attr("id");i||(i=r.getUID(e),t(n.target).attr("id",i)),n.target="#"+i}return r.typeCheckConfig(e,n,d),n},h.prototype._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},h.prototype._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},h.prototype._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},h.prototype._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];return void(this._activeTarget!==i&&this._activate(i))}if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;){var r=this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&(void 0===this._offsets[o+1]||t<this._offsets[o+1]);r&&this._activate(this._targets[o])}},h.prototype._activate=function(e){this._activeTarget=e,this._clear();var n=this._selector.split(",");n=n.map(function(t){return t+'[data-target="'+e+'"],'+(t+'[href="'+e+'"]')});var i=t(n.join(","));i.hasClass(p.DROPDOWN_ITEM)?(i.closest(g.DROPDOWN).find(g.DROPDOWN_TOGGLE).addClass(p.ACTIVE),i.addClass(p.ACTIVE)):(i.addClass(p.ACTIVE),i.parents(g.NAV_LIST_GROUP).prev(g.NAV_LINKS+", "+g.LIST_ITEMS).addClass(p.ACTIVE)),t(this._scrollElement).trigger(f.ACTIVATE,{relatedTarget:e})},h.prototype._clear=function(){t(this._selector).filter(g.ACTIVE).removeClass(p.ACTIVE)},h._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(a),o="object"===("undefined"==typeof e?"undefined":i(e))&&e;if(n||(n=new h(this,o),t(this).data(a,n)),"string"==typeof e){if(void 0===n[e])throw new Error('No method named "'+e+'"');n[e]()}})},o(h,null,[{key:"VERSION",get:function(){return s}},{key:"Default",get:function(){return c}}]),h}();return t(window).on(f.LOAD_DATA_API,function(){for(var e=t.makeArray(t(g.DATA_SPY)),n=e.length;n--;){var i=t(e[n]);v._jQueryInterface.call(i,i.data())}}),t.fn[e]=v._jQueryInterface,t.fn[e].Constructor=v,t.fn[e].noConflict=function(){return t.fn[e]=u,v._jQueryInterface},v}(jQuery),function(t){var e="tab",i="4.0.0-beta",s="bs.tab",a="."+s,l=".data-api",h=t.fn[e],u=150,c={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,CLICK_DATA_API:"click"+a+l},d={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},f={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},p=function(){function e(t){n(this,e),this._element=t}return e.prototype.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&t(this._element).hasClass(d.ACTIVE)||t(this._element).hasClass(d.DISABLED))){var n=void 0,i=void 0,o=t(this._element).closest(f.NAV_LIST_GROUP)[0],s=r.getSelectorFromElement(this._element);o&&(i=t.makeArray(t(o).find(f.ACTIVE)),i=i[i.length-1]);var a=t.Event(c.HIDE,{relatedTarget:this._element}),l=t.Event(c.SHOW,{relatedTarget:i});if(i&&t(i).trigger(a),t(this._element).trigger(l),!l.isDefaultPrevented()&&!a.isDefaultPrevented()){s&&(n=t(s)[0]),this._activate(this._element,o);var h=function(){var n=t.Event(c.HIDDEN,{relatedTarget:e._element}),o=t.Event(c.SHOWN,{relatedTarget:i});t(i).trigger(n),t(e._element).trigger(o)};n?this._activate(n,n.parentNode,h):h()}}},e.prototype.dispose=function(){t.removeData(this._element,s),this._element=null},e.prototype._activate=function(e,n,i){var o=this,s=t(n).find(f.ACTIVE)[0],a=i&&r.supportsTransitionEnd()&&s&&t(s).hasClass(d.FADE),l=function(){return o._transitionComplete(e,s,a,i)};s&&a?t(s).one(r.TRANSITION_END,l).emulateTransitionEnd(u):l(),s&&t(s).removeClass(d.SHOW)},e.prototype._transitionComplete=function(e,n,i,o){if(n){t(n).removeClass(d.ACTIVE);var s=t(n.parentNode).find(f.DROPDOWN_ACTIVE_CHILD)[0];s&&t(s).removeClass(d.ACTIVE),n.setAttribute("aria-expanded",!1)}if(t(e).addClass(d.ACTIVE),e.setAttribute("aria-expanded",!0),i?(r.reflow(e),t(e).addClass(d.SHOW)):t(e).removeClass(d.FADE),e.parentNode&&t(e.parentNode).hasClass(d.DROPDOWN_MENU)){var a=t(e).closest(f.DROPDOWN)[0];a&&t(a).find(f.DROPDOWN_TOGGLE).addClass(d.ACTIVE),e.setAttribute("aria-expanded",!0)}o&&o()},e._jQueryInterface=function(n){return this.each(function(){var i=t(this),o=i.data(s);if(o||(o=new e(this),i.data(s,o)),"string"==typeof n){if(void 0===o[n])throw new Error('No method named "'+n+'"');o[n]()}})},o(e,null,[{key:"VERSION",get:function(){return i}}]),e}();return t(document).on(c.CLICK_DATA_API,f.DATA_TOGGLE,function(e){e.preventDefault(),p._jQueryInterface.call(t(this),"show")}),t.fn[e]=p._jQueryInterface,t.fn[e].Constructor=p,t.fn[e].noConflict=function(){return t.fn[e]=h,p._jQueryInterface},p}(jQuery),function(t){if("undefined"==typeof Popper)throw new Error("Bootstrap tooltips require Popper.js (https://popper.js.org)");var e="tooltip",s="4.0.0-beta",a="bs.tooltip",l="."+a,h=t.fn[e],u=150,c="bs-tooltip",d=new RegExp("(^|\\s)"+c+"\\S+","g"),f={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)"},p={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},g={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip"},m={SHOW:"show",OUT:"out"},v={HIDE:"hide"+l,HIDDEN:"hidden"+l,SHOW:"show"+l,SHOWN:"shown"+l,INSERTED:"inserted"+l,CLICK:"click"+l,FOCUSIN:"focusin"+l,FOCUSOUT:"focusout"+l,MOUSEENTER:"mouseenter"+l,MOUSELEAVE:"mouseleave"+l},y={FADE:"fade",SHOW:"show"},_={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},E={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},T=function(){function h(t,e){n(this,h),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}return h.prototype.enable=function(){this._isEnabled=!0},h.prototype.disable=function(){this._isEnabled=!1},h.prototype.toggleEnabled=function(){this._isEnabled=!this._isEnabled},h.prototype.toggle=function(e){if(e){var n=this.constructor.DATA_KEY,i=t(e.currentTarget).data(n);i||(i=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(n,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(t(this.getTipElement()).hasClass(y.SHOW))return void this._leave(null,this);this._enter(null,this)}},h.prototype.dispose=function(){clearTimeout(this._timeout),t.removeData(this.element,this.constructor.DATA_KEY),t(this.element).off(this.constructor.EVENT_KEY),t(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&t(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},h.prototype.show=function(){var e=this;if("none"===t(this.element).css("display"))throw new Error("Please use show on visible elements");var n=t.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){t(this.element).trigger(n);var i=t.contains(this.element.ownerDocument.documentElement,this.element);if(n.isDefaultPrevented()||!i)return;var o=this.getTipElement(),s=r.getUID(this.constructor.NAME);o.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&t(o).addClass(y.FADE);var a="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,l=this._getAttachment(a);this.addAttachmentClass(l);var u=this.config.container===!1?document.body:t(this.config.container);t(o).data(this.constructor.DATA_KEY,this),t.contains(this.element.ownerDocument.documentElement,this.tip)||t(o).appendTo(u),t(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new Popper(this.element,o,{placement:l,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:_.ARROW}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),t(o).addClass(y.SHOW),"ontouchstart"in document.documentElement&&t("body").children().on("mouseover",null,t.noop);var c=function(){e.config.animation&&e._fixTransition();var n=e._hoverState;e._hoverState=null,t(e.element).trigger(e.constructor.Event.SHOWN),n===m.OUT&&e._leave(null,e)};r.supportsTransitionEnd()&&t(this.tip).hasClass(y.FADE)?t(this.tip).one(r.TRANSITION_END,c).emulateTransitionEnd(h._TRANSITION_DURATION):c()}},h.prototype.hide=function(e){var n=this,i=this.getTipElement(),o=t.Event(this.constructor.Event.HIDE),s=function(){n._hoverState!==m.SHOW&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),t(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),e&&e()};t(this.element).trigger(o),o.isDefaultPrevented()||(t(i).removeClass(y.SHOW),"ontouchstart"in document.documentElement&&t("body").children().off("mouseover",null,t.noop),this._activeTrigger[E.CLICK]=!1,this._activeTrigger[E.FOCUS]=!1,this._activeTrigger[E.HOVER]=!1,r.supportsTransitionEnd()&&t(this.tip).hasClass(y.FADE)?t(i).one(r.TRANSITION_END,s).emulateTransitionEnd(u):s(),this._hoverState="")},h.prototype.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},h.prototype.isWithContent=function(){return Boolean(this.getTitle())},h.prototype.addAttachmentClass=function(e){t(this.getTipElement()).addClass(c+"-"+e)},h.prototype.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0]},h.prototype.setContent=function(){var e=t(this.getTipElement());this.setElementContent(e.find(_.TOOLTIP_INNER),this.getTitle()),e.removeClass(y.FADE+" "+y.SHOW)},h.prototype.setElementContent=function(e,n){var o=this.config.html;"object"===("undefined"==typeof n?"undefined":i(n))&&(n.nodeType||n.jquery)?o?t(n).parent().is(e)||e.empty().append(n):e.text(t(n).text()):e[o?"html":"text"](n)},h.prototype.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},h.prototype._getAttachment=function(t){return p[t.toUpperCase()]},h.prototype._setListeners=function(){var e=this,n=this.config.trigger.split(" ");n.forEach(function(n){if("click"===n)t(e.element).on(e.constructor.Event.CLICK,e.config.selector,function(t){return e.toggle(t)});else if(n!==E.MANUAL){var i=n===E.HOVER?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,o=n===E.HOVER?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;t(e.element).on(i,e.config.selector,function(t){return e._enter(t)}).on(o,e.config.selector,function(t){return e._leave(t)})}t(e.element).closest(".modal").on("hide.bs.modal",function(){return e.hide()})}),this.config.selector?this.config=t.extend({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},h.prototype._fixTitle=function(){var t=i(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},h.prototype._enter=function(e,n){var i=this.constructor.DATA_KEY;return n=n||t(e.currentTarget).data(i),n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusin"===e.type?E.FOCUS:E.HOVER]=!0),t(n.getTipElement()).hasClass(y.SHOW)||n._hoverState===m.SHOW?void(n._hoverState=m.SHOW):(clearTimeout(n._timeout),n._hoverState=m.SHOW,n.config.delay&&n.config.delay.show?void(n._timeout=setTimeout(function(){n._hoverState===m.SHOW&&n.show()},n.config.delay.show)):void n.show())},h.prototype._leave=function(e,n){var i=this.constructor.DATA_KEY;if(n=n||t(e.currentTarget).data(i),n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusout"===e.type?E.FOCUS:E.HOVER]=!1),!n._isWithActiveTrigger())return clearTimeout(n._timeout),n._hoverState=m.OUT,n.config.delay&&n.config.delay.hide?void(n._timeout=setTimeout(function(){n._hoverState===m.OUT&&n.hide()},n.config.delay.hide)):void n.hide()},h.prototype._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},h.prototype._getConfig=function(n){return n=t.extend({},this.constructor.Default,t(this.element).data(),n),n.delay&&"number"==typeof n.delay&&(n.delay={show:n.delay,hide:n.delay}),n.title&&"number"==typeof n.title&&(n.title=n.title.toString()),n.content&&"number"==typeof n.content&&(n.content=n.content.toString()),r.typeCheckConfig(e,n,this.constructor.DefaultType),n},h.prototype._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},h.prototype._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(d);null!==n&&n.length>0&&e.removeClass(n.join(""))},h.prototype._handlePopperPlacementChange=function(t){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},h.prototype._fixTransition=function(){var e=this.getTipElement(),n=this.config.animation;null===e.getAttribute("x-placement")&&(t(e).removeClass(y.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},h._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(a),o="object"===("undefined"==typeof e?"undefined":i(e))&&e;if((n||!/dispose|hide/.test(e))&&(n||(n=new h(this,o),t(this).data(a,n)),"string"==typeof e)){if(void 0===n[e])throw new Error('No method named "'+e+'"');n[e]()}})},o(h,null,[{key:"VERSION",get:function(){return s}},{key:"Default",get:function(){return g}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return a}},{key:"Event",get:function(){return v}},{key:"EVENT_KEY",get:function(){return l}},{key:"DefaultType",get:function(){return f}}]),h}();return t.fn[e]=T._jQueryInterface,t.fn[e].Constructor=T,t.fn[e].noConflict=function(){return t.fn[e]=h,T._jQueryInterface},T}(jQuery));(function(r){var a="popover",l="4.0.0-beta",h="bs.popover",u="."+h,c=r.fn[a],d="bs-popover",f=new RegExp("(^|\\s)"+d+"\\S+","g"),p=r.extend({},s.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),g=r.extend({},s.DefaultType,{content:"(string|element|function)"}),m={FADE:"fade",SHOW:"show"},v={TITLE:".popover-header",CONTENT:".popover-body"},y={HIDE:"hide"+u,HIDDEN:"hidden"+u,SHOW:"show"+u,SHOWN:"shown"+u,INSERTED:"inserted"+u,CLICK:"click"+u,FOCUSIN:"focusin"+u,FOCUSOUT:"focusout"+u,MOUSEENTER:"mouseenter"+u,MOUSELEAVE:"mouseleave"+u},_=function(s){function c(){return n(this,c),t(this,s.apply(this,arguments))}return e(c,s),c.prototype.isWithContent=function(){return this.getTitle()||this._getContent()},c.prototype.addAttachmentClass=function(t){r(this.getTipElement()).addClass(d+"-"+t)},c.prototype.getTipElement=function(){return this.tip=this.tip||r(this.config.template)[0]},c.prototype.setContent=function(){var t=r(this.getTipElement());this.setElementContent(t.find(v.TITLE),this.getTitle()),this.setElementContent(t.find(v.CONTENT),this._getContent()),t.removeClass(m.FADE+" "+m.SHOW)},c.prototype._getContent=function(){return this.element.getAttribute("data-content")||("function"==typeof this.config.content?this.config.content.call(this.element):this.config.content)},c.prototype._cleanTipClass=function(){var t=r(this.getTipElement()),e=t.attr("class").match(f);null!==e&&e.length>0&&t.removeClass(e.join(""))},c._jQueryInterface=function(t){return this.each(function(){var e=r(this).data(h),n="object"===("undefined"==typeof t?"undefined":i(t))?t:null;if((e||!/destroy|hide/.test(t))&&(e||(e=new c(this,n),r(this).data(h,e)),"string"==typeof t)){if(void 0===e[t])throw new Error('No method named "'+t+'"');e[t]()}})},o(c,null,[{key:"VERSION",get:function(){return l}},{key:"Default",get:function(){return p}},{key:"NAME",get:function(){return a}},{key:"DATA_KEY",get:function(){return h}},{key:"Event",get:function(){return y}},{key:"EVENT_KEY",get:function(){return u}},{key:"DefaultType",get:function(){return g}}]),c}(s);return r.fn[a]=_._jQueryInterface,r.fn[a].Constructor=_,r.fn[a].noConflict=function(){return r.fn[a]=c,_._jQueryInterface},_})(jQuery)}()},function(t,e,n){(function(e){t.exports=e.turbolinks=n(7)}).call(e,function(){return this}())},function(t,e,n){(function(e){t.exports=e.$=n(8)}).call(e,function(){return this}())},function(t,e,n){var i,o;(function(){(function(){(function(){this.Turbolinks={supported:function(){return null!=window.history.pushState&&null!=window.requestAnimationFrame&&null!=window.addEventListener}(),visit:function(t,e){return r.controller.visit(t,e)},clearCache:function(){return r.controller.clearCache()}}}).call(this)}).call(this);var r=this.Turbolinks;(function(){(function(){var t,e,n=[].slice;r.copyObject=function(t){var e,n,i;n={};for(e in t)i=t[e],n[e]=i;return n},r.closest=function(e,n){return t.call(e,n)},t=function(){var t,n;return t=document.documentElement,null!=(n=t.closest)?n:function(t){var n;for(n=this;n;){if(n.nodeType===Node.ELEMENT_NODE&&e.call(n,t))return n;n=n.parentNode}}}(),r.defer=function(t){return setTimeout(t,1)},r.throttle=function(t){var e;return e=null,function(){var i;return i=1<=arguments.length?n.call(arguments,0):[],null!=e?e:e=requestAnimationFrame(function(n){return function(){return e=null,t.apply(n,i)}}(this))}},r.dispatch=function(t,e){var n,i,o,r,s;return r=null!=e?e:{},s=r.target,n=r.cancelable,i=r.data,o=document.createEvent("Events"),o.initEvent(t,!0,n===!0),o.data=null!=i?i:{},(null!=s?s:document).dispatchEvent(o),o},r.match=function(t,n){return e.call(t,n)},e=function(){var t,e,n,i;return t=document.documentElement,null!=(e=null!=(n=null!=(i=t.matchesSelector)?i:t.webkitMatchesSelector)?n:t.msMatchesSelector)?e:t.mozMatchesSelector}(),r.uuid=function(){var t,e,n;for(n="",t=e=1;36>=e;t=++e)n+=9===t||14===t||19===t||24===t?"-":15===t?"4":20===t?(Math.floor(4*Math.random())+8).toString(16):Math.floor(15*Math.random()).toString(16);return n}}).call(this),function(){r.Location=function(){function t(t){var e,n;null==t&&(t=""),n=document.createElement("a"),n.href=t.toString(),this.absoluteURL=n.href,e=n.hash.length,2>e?this.requestURL=this.absoluteURL:(this.requestURL=this.absoluteURL.slice(0,-e),this.anchor=n.hash.slice(1))}var e,n,i,o;return t.wrap=function(t){return t instanceof this?t:new this(t)},t.prototype.getOrigin=function(){return this.absoluteURL.split("/",3).join("/")},t.prototype.getPath=function(){var t,e;return null!=(t=null!=(e=this.absoluteURL.match(/\/\/[^\/]*(\/[^?;]*)/))?e[1]:void 0)?t:"/"},t.prototype.getPathComponents=function(){return this.getPath().split("/").slice(1)},t.prototype.getLastPathComponent=function(){return this.getPathComponents().slice(-1)[0]},t.prototype.getExtension=function(){var t,e;return null!=(t=null!=(e=this.getLastPathComponent().match(/\.[^.]*$/))?e[0]:void 0)?t:""},t.prototype.isHTML=function(){return this.getExtension().match(/^(?:|\.(?:htm|html|xhtml))$/)},t.prototype.isPrefixedBy=function(t){var e;return e=n(t),this.isEqualTo(t)||o(this.absoluteURL,e)},t.prototype.isEqualTo=function(t){return this.absoluteURL===(null!=t?t.absoluteURL:void 0)},t.prototype.toCacheKey=function(){return this.requestURL},t.prototype.toJSON=function(){return this.absoluteURL},t.prototype.toString=function(){return this.absoluteURL},t.prototype.valueOf=function(){return this.absoluteURL},n=function(t){return e(t.getOrigin()+t.getPath())},e=function(t){return i(t,"/")?t:t+"/"},o=function(t,e){return t.slice(0,e.length)===e},i=function(t,e){return t.slice(-e.length)===e},t}()}.call(this),function(){var t=function(t,e){return function(){return t.apply(e,arguments)}};r.HttpRequest=function(){function e(e,n,i){this.delegate=e,this.requestCanceled=t(this.requestCanceled,this),this.requestTimedOut=t(this.requestTimedOut,this),this.requestFailed=t(this.requestFailed,this),this.requestLoaded=t(this.requestLoaded,this),this.requestProgressed=t(this.requestProgressed,this),this.url=r.Location.wrap(n).requestURL,this.referrer=r.Location.wrap(i).absoluteURL,this.createXHR()}return e.NETWORK_FAILURE=0,e.TIMEOUT_FAILURE=-1,e.timeout=60,e.prototype.send=function(){var t;return this.xhr&&!this.sent?(this.notifyApplicationBeforeRequestStart(),this.setProgress(0),this.xhr.send(),this.sent=!0,"function"==typeof(t=this.delegate).requestStarted?t.requestStarted():void 0):void 0},e.prototype.cancel=function(){return this.xhr&&this.sent?this.xhr.abort():void 0},e.prototype.requestProgressed=function(t){return t.lengthComputable?this.setProgress(t.loaded/t.total):void 0},e.prototype.requestLoaded=function(){return this.endRequest(function(t){return function(){var e;return 200<=(e=t.xhr.status)&&300>e?t.delegate.requestCompletedWithResponse(t.xhr.responseText,t.xhr.getResponseHeader("Turbolinks-Location")):(t.failed=!0,t.delegate.requestFailedWithStatusCode(t.xhr.status,t.xhr.responseText))}}(this))},e.prototype.requestFailed=function(){return this.endRequest(function(t){return function(){return t.failed=!0,t.delegate.requestFailedWithStatusCode(t.constructor.NETWORK_FAILURE)}}(this))},e.prototype.requestTimedOut=function(){return this.endRequest(function(t){return function(){return t.failed=!0,t.delegate.requestFailedWithStatusCode(t.constructor.TIMEOUT_FAILURE)}}(this))},e.prototype.requestCanceled=function(){return this.endRequest()},e.prototype.notifyApplicationBeforeRequestStart=function(){return r.dispatch("turbolinks:request-start",{data:{url:this.url,xhr:this.xhr}})},e.prototype.notifyApplicationAfterRequestEnd=function(){return r.dispatch("turbolinks:request-end",{data:{url:this.url,xhr:this.xhr}})},e.prototype.createXHR=function(){return this.xhr=new XMLHttpRequest,this.xhr.open("GET",this.url,!0),this.xhr.timeout=1e3*this.constructor.timeout,this.xhr.setRequestHeader("Accept","text/html, application/xhtml+xml"),this.xhr.setRequestHeader("Turbolinks-Referrer",this.referrer),this.xhr.onprogress=this.requestProgressed,this.xhr.onload=this.requestLoaded,this.xhr.onerror=this.requestFailed,this.xhr.ontimeout=this.requestTimedOut,this.xhr.onabort=this.requestCanceled},e.prototype.endRequest=function(t){return this.xhr?(this.notifyApplicationAfterRequestEnd(),null!=t&&t.call(this),this.destroy()):void 0},e.prototype.setProgress=function(t){var e;return this.progress=t,"function"==typeof(e=this.delegate).requestProgressed?e.requestProgressed(this.progress):void 0},e.prototype.destroy=function(){var t;return this.setProgress(1),"function"==typeof(t=this.delegate).requestFinished&&t.requestFinished(),this.delegate=null,this.xhr=null},e}()}.call(this),function(){var t=function(t,e){return function(){return t.apply(e,arguments)}};r.ProgressBar=function(){function e(){this.trickle=t(this.trickle,this),this.stylesheetElement=this.createStylesheetElement(),this.progressElement=this.createProgressElement()}var n;return n=300,e.defaultCSS=".turbolinks-progress-bar {\n  position: fixed;\n  display: block;\n  top: 0;\n  left: 0;\n  height: 3px;\n  background: #0076ff;\n  z-index: 9999;\n  transition: width "+n+"ms ease-out, opacity "+n/2+"ms "+n/2+"ms ease-in;\n  transform: translate3d(0, 0, 0);\n}",e.prototype.show=function(){return this.visible?void 0:(this.visible=!0,this.installStylesheetElement(),this.installProgressElement(),this.startTrickling())},e.prototype.hide=function(){return this.visible&&!this.hiding?(this.hiding=!0,this.fadeProgressElement(function(t){return function(){return t.uninstallProgressElement(),t.stopTrickling(),t.visible=!1,t.hiding=!1}}(this))):void 0},e.prototype.setValue=function(t){return this.value=t,this.refresh()},e.prototype.installStylesheetElement=function(){return document.head.insertBefore(this.stylesheetElement,document.head.firstChild)},e.prototype.installProgressElement=function(){return this.progressElement.style.width=0,this.progressElement.style.opacity=1,document.documentElement.insertBefore(this.progressElement,document.body),this.refresh()},e.prototype.fadeProgressElement=function(t){return this.progressElement.style.opacity=0,setTimeout(t,1.5*n)},e.prototype.uninstallProgressElement=function(){return this.progressElement.parentNode?document.documentElement.removeChild(this.progressElement):void 0},e.prototype.startTrickling=function(){return null!=this.trickleInterval?this.trickleInterval:this.trickleInterval=setInterval(this.trickle,n)},e.prototype.stopTrickling=function(){return clearInterval(this.trickleInterval),this.trickleInterval=null},e.prototype.trickle=function(){return this.setValue(this.value+Math.random()/100)},e.prototype.refresh=function(){return requestAnimationFrame(function(t){return function(){return t.progressElement.style.width=10+90*t.value+"%"}}(this))},e.prototype.createStylesheetElement=function(){var t;return t=document.createElement("style"),t.type="text/css",t.textContent=this.constructor.defaultCSS,t},e.prototype.createProgressElement=function(){var t;return t=document.createElement("div"),t.className="turbolinks-progress-bar",t},e}()}.call(this),function(){var t=function(t,e){return function(){return t.apply(e,arguments)}};r.BrowserAdapter=function(){function e(e){this.controller=e,this.showProgressBar=t(this.showProgressBar,this),this.progressBar=new r.ProgressBar}var n,i,o,s;return s=r.HttpRequest,n=s.NETWORK_FAILURE,o=s.TIMEOUT_FAILURE,i=500,e.prototype.visitProposedToLocationWithAction=function(t,e){return this.controller.startVisitToLocationWithAction(t,e)},e.prototype.visitStarted=function(t){return t.issueRequest(),t.changeHistory(),t.loadCachedSnapshot()},e.prototype.visitRequestStarted=function(t){return this.progressBar.setValue(0),t.hasCachedSnapshot()||"restore"!==t.action?this.showProgressBarAfterDelay():this.showProgressBar()},e.prototype.visitRequestProgressed=function(t){return this.progressBar.setValue(t.progress)},e.prototype.visitRequestCompleted=function(t){return t.loadResponse()},e.prototype.visitRequestFailedWithStatusCode=function(t,e){switch(e){case n:case o:return this.reload();default:return t.loadResponse()}},e.prototype.visitRequestFinished=function(t){return this.hideProgressBar()},e.prototype.visitCompleted=function(t){return t.followRedirect()},e.prototype.pageInvalidated=function(){return this.reload()},e.prototype.showProgressBarAfterDelay=function(){return this.progressBarTimeout=setTimeout(this.showProgressBar,i)},e.prototype.showProgressBar=function(){return this.progressBar.show()},e.prototype.hideProgressBar=function(){return this.progressBar.hide(),clearTimeout(this.progressBarTimeout)},e.prototype.reload=function(){return window.location.reload()},e}()}.call(this),function(){var t=function(t,e){return function(){return t.apply(e,arguments)}};r.History=function(){function e(e){this.delegate=e,this.onPageLoad=t(this.onPageLoad,this),this.onPopState=t(this.onPopState,this)}return e.prototype.start=function(){return this.started?void 0:(addEventListener("popstate",this.onPopState,!1),addEventListener("load",this.onPageLoad,!1),this.started=!0)},e.prototype.stop=function(){return this.started?(removeEventListener("popstate",this.onPopState,!1),removeEventListener("load",this.onPageLoad,!1),this.started=!1):void 0},e.prototype.push=function(t,e){return t=r.Location.wrap(t),this.update("push",t,e)},e.prototype.replace=function(t,e){return t=r.Location.wrap(t),this.update("replace",t,e)},e.prototype.onPopState=function(t){var e,n,i,o;return this.shouldHandlePopState()&&(o=null!=(n=t.state)?n.turbolinks:void 0)?(e=r.Location.wrap(window.location),i=o.restorationIdentifier,this.delegate.historyPoppedToLocationWithRestorationIdentifier(e,i)):void 0},e.prototype.onPageLoad=function(t){return r.defer(function(t){return function(){return t.pageLoaded=!0}}(this))},e.prototype.shouldHandlePopState=function(){return this.pageIsLoaded()},e.prototype.pageIsLoaded=function(){return this.pageLoaded||"complete"===document.readyState},e.prototype.update=function(t,e,n){var i;return i={turbolinks:{restorationIdentifier:n}},history[t+"State"](i,null,e)},e}()}.call(this),function(){r.Snapshot=function(){function t(t){var e,n;n=t.head,e=t.body,this.head=null!=n?n:document.createElement("head"),this.body=null!=e?e:document.createElement("body")}return t.wrap=function(t){return t instanceof this?t:this.fromHTML(t)},t.fromHTML=function(t){var e;return e=document.createElement("html"),e.innerHTML=t,this.fromElement(e)},t.fromElement=function(t){return new this({head:t.querySelector("head"),body:t.querySelector("body")})},t.prototype.clone=function(){return new t({head:this.head.cloneNode(!0),body:this.body.cloneNode(!0)})},t.prototype.getRootLocation=function(){var t,e;return e=null!=(t=this.getSetting("root"))?t:"/",new r.Location(e)},t.prototype.getCacheControlValue=function(){return this.getSetting("cache-control")},t.prototype.hasAnchor=function(t){try{return null!=this.body.querySelector("[id='"+t+"']")}catch(t){}},t.prototype.isPreviewable=function(){return"no-preview"!==this.getCacheControlValue()},t.prototype.isCacheable=function(){return"no-cache"!==this.getCacheControlValue()},t.prototype.getSetting=function(t){var e,n;return n=this.head.querySelectorAll("meta[name='turbolinks-"+t+"']"),
e=n[n.length-1],null!=e?e.getAttribute("content"):void 0},t}()}.call(this),function(){var t=[].slice;r.Renderer=function(){function e(){}var n;return e.render=function(){var e,n,i,o;return i=arguments[0],n=arguments[1],e=3<=arguments.length?t.call(arguments,2):[],o=function(t,e,n){n.prototype=t.prototype;var i=new n,o=t.apply(i,e);return Object(o)===o?o:i}(this,e,function(){}),o.delegate=i,o.render(n),o},e.prototype.renderView=function(t){return this.delegate.viewWillRender(this.newBody),t(),this.delegate.viewRendered(this.newBody)},e.prototype.invalidateView=function(){return this.delegate.viewInvalidated()},e.prototype.createScriptElement=function(t){var e;return"false"===t.getAttribute("data-turbolinks-eval")?t:(e=document.createElement("script"),e.textContent=t.textContent,n(e,t),e)},n=function(t,e){var n,i,o,r,s,a,l;for(r=e.attributes,a=[],n=0,i=r.length;i>n;n++)s=r[n],o=s.name,l=s.value,a.push(t.setAttribute(o,l));return a},e}()}.call(this),function(){r.HeadDetails=function(){function t(t){var e,n,r,s,a,l,h;for(this.element=t,this.elements={},h=this.element.childNodes,s=0,l=h.length;l>s;s++)r=h[s],r.nodeType===Node.ELEMENT_NODE&&(a=r.outerHTML,n=null!=(e=this.elements)[a]?e[a]:e[a]={type:o(r),tracked:i(r),elements:[]},n.elements.push(r))}var e,n,i,o;return t.prototype.hasElementWithKey=function(t){return t in this.elements},t.prototype.getTrackedElementSignature=function(){var t,e;return function(){var n,i;n=this.elements,i=[];for(t in n)e=n[t].tracked,e&&i.push(t);return i}.call(this).join("")},t.prototype.getScriptElementsNotInDetails=function(t){return this.getElementsMatchingTypeNotInDetails("script",t)},t.prototype.getStylesheetElementsNotInDetails=function(t){return this.getElementsMatchingTypeNotInDetails("stylesheet",t)},t.prototype.getElementsMatchingTypeNotInDetails=function(t,e){var n,i,o,r,s,a;o=this.elements,s=[];for(i in o)r=o[i],a=r.type,n=r.elements,a!==t||e.hasElementWithKey(i)||s.push(n[0]);return s},t.prototype.getProvisionalElements=function(){var t,e,n,i,o,r,s;n=[],i=this.elements;for(e in i)o=i[e],s=o.type,r=o.tracked,t=o.elements,null!=s||r?t.length>1&&n.push.apply(n,t.slice(1)):n.push.apply(n,t);return n},o=function(t){return e(t)?"script":n(t)?"stylesheet":void 0},i=function(t){return"reload"===t.getAttribute("data-turbolinks-track")},e=function(t){var e;return e=t.tagName.toLowerCase(),"script"===e},n=function(t){var e;return e=t.tagName.toLowerCase(),"style"===e||"link"===e&&"stylesheet"===t.getAttribute("rel")},t}()}.call(this),function(){var t=function(t,n){function i(){this.constructor=t}for(var o in n)e.call(n,o)&&(t[o]=n[o]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t},e={}.hasOwnProperty;r.SnapshotRenderer=function(e){function n(t,e){this.currentSnapshot=t,this.newSnapshot=e,this.currentHeadDetails=new r.HeadDetails(this.currentSnapshot.head),this.newHeadDetails=new r.HeadDetails(this.newSnapshot.head),this.newBody=this.newSnapshot.body}return t(n,e),n.prototype.render=function(t){return this.trackedElementsAreIdentical()?(this.mergeHead(),this.renderView(function(e){return function(){return e.replaceBody(),e.focusFirstAutofocusableElement(),t()}}(this))):this.invalidateView()},n.prototype.mergeHead=function(){return this.copyNewHeadStylesheetElements(),this.copyNewHeadScriptElements(),this.removeCurrentHeadProvisionalElements(),this.copyNewHeadProvisionalElements()},n.prototype.replaceBody=function(){return this.activateBodyScriptElements(),this.importBodyPermanentElements(),this.assignNewBody()},n.prototype.trackedElementsAreIdentical=function(){return this.currentHeadDetails.getTrackedElementSignature()===this.newHeadDetails.getTrackedElementSignature()},n.prototype.copyNewHeadStylesheetElements=function(){var t,e,n,i,o;for(i=this.getNewHeadStylesheetElements(),o=[],e=0,n=i.length;n>e;e++)t=i[e],o.push(document.head.appendChild(t));return o},n.prototype.copyNewHeadScriptElements=function(){var t,e,n,i,o;for(i=this.getNewHeadScriptElements(),o=[],e=0,n=i.length;n>e;e++)t=i[e],o.push(document.head.appendChild(this.createScriptElement(t)));return o},n.prototype.removeCurrentHeadProvisionalElements=function(){var t,e,n,i,o;for(i=this.getCurrentHeadProvisionalElements(),o=[],e=0,n=i.length;n>e;e++)t=i[e],o.push(document.head.removeChild(t));return o},n.prototype.copyNewHeadProvisionalElements=function(){var t,e,n,i,o;for(i=this.getNewHeadProvisionalElements(),o=[],e=0,n=i.length;n>e;e++)t=i[e],o.push(document.head.appendChild(t));return o},n.prototype.importBodyPermanentElements=function(){var t,e,n,i,o,r;for(i=this.getNewBodyPermanentElements(),r=[],e=0,n=i.length;n>e;e++)o=i[e],(t=this.findCurrentBodyPermanentElement(o))?r.push(o.parentNode.replaceChild(t,o)):r.push(void 0);return r},n.prototype.activateBodyScriptElements=function(){var t,e,n,i,o,r;for(i=this.getNewBodyScriptElements(),r=[],e=0,n=i.length;n>e;e++)o=i[e],t=this.createScriptElement(o),r.push(o.parentNode.replaceChild(t,o));return r},n.prototype.assignNewBody=function(){return document.body=this.newBody},n.prototype.focusFirstAutofocusableElement=function(){var t;return null!=(t=this.findFirstAutofocusableElement())?t.focus():void 0},n.prototype.getNewHeadStylesheetElements=function(){return this.newHeadDetails.getStylesheetElementsNotInDetails(this.currentHeadDetails)},n.prototype.getNewHeadScriptElements=function(){return this.newHeadDetails.getScriptElementsNotInDetails(this.currentHeadDetails)},n.prototype.getCurrentHeadProvisionalElements=function(){return this.currentHeadDetails.getProvisionalElements()},n.prototype.getNewHeadProvisionalElements=function(){return this.newHeadDetails.getProvisionalElements()},n.prototype.getNewBodyPermanentElements=function(){return this.newBody.querySelectorAll("[id][data-turbolinks-permanent]")},n.prototype.findCurrentBodyPermanentElement=function(t){return document.body.querySelector("#"+t.id+"[data-turbolinks-permanent]")},n.prototype.getNewBodyScriptElements=function(){return this.newBody.querySelectorAll("script")},n.prototype.findFirstAutofocusableElement=function(){return document.body.querySelector("[autofocus]")},n}(r.Renderer)}.call(this),function(){var t=function(t,n){function i(){this.constructor=t}for(var o in n)e.call(n,o)&&(t[o]=n[o]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t},e={}.hasOwnProperty;r.ErrorRenderer=function(e){function n(t){this.html=t}return t(n,e),n.prototype.render=function(t){return this.renderView(function(e){return function(){return e.replaceDocumentHTML(),e.activateBodyScriptElements(),t()}}(this))},n.prototype.replaceDocumentHTML=function(){return document.documentElement.innerHTML=this.html},n.prototype.activateBodyScriptElements=function(){var t,e,n,i,o,r;for(i=this.getScriptElements(),r=[],e=0,n=i.length;n>e;e++)o=i[e],t=this.createScriptElement(o),r.push(o.parentNode.replaceChild(t,o));return r},n.prototype.getScriptElements=function(){return document.documentElement.querySelectorAll("script")},n}(r.Renderer)}.call(this),function(){r.View=function(){function t(t){this.delegate=t,this.element=document.documentElement}return t.prototype.getRootLocation=function(){return this.getSnapshot().getRootLocation()},t.prototype.getSnapshot=function(){return r.Snapshot.fromElement(this.element)},t.prototype.render=function(t,e){var n,i,o;return o=t.snapshot,n=t.error,i=t.isPreview,this.markAsPreview(i),null!=o?this.renderSnapshot(o,e):this.renderError(n,e)},t.prototype.markAsPreview=function(t){return t?this.element.setAttribute("data-turbolinks-preview",""):this.element.removeAttribute("data-turbolinks-preview")},t.prototype.renderSnapshot=function(t,e){return r.SnapshotRenderer.render(this.delegate,e,this.getSnapshot(),r.Snapshot.wrap(t))},t.prototype.renderError=function(t,e){return r.ErrorRenderer.render(this.delegate,e,t)},t}()}.call(this),function(){var t=function(t,e){return function(){return t.apply(e,arguments)}};r.ScrollManager=function(){function e(e){this.delegate=e,this.onScroll=t(this.onScroll,this),this.onScroll=r.throttle(this.onScroll)}return e.prototype.start=function(){return this.started?void 0:(addEventListener("scroll",this.onScroll,!1),this.onScroll(),this.started=!0)},e.prototype.stop=function(){return this.started?(removeEventListener("scroll",this.onScroll,!1),this.started=!1):void 0},e.prototype.scrollToElement=function(t){return t.scrollIntoView()},e.prototype.scrollToPosition=function(t){var e,n;return e=t.x,n=t.y,window.scrollTo(e,n)},e.prototype.onScroll=function(t){return this.updatePosition({x:window.pageXOffset,y:window.pageYOffset})},e.prototype.updatePosition=function(t){var e;return this.position=t,null!=(e=this.delegate)?e.scrollPositionChanged(this.position):void 0},e}()}.call(this),function(){r.SnapshotCache=function(){function t(t){this.size=t,this.keys=[],this.snapshots={}}var e;return t.prototype.has=function(t){var n;return n=e(t),n in this.snapshots},t.prototype.get=function(t){var e;if(this.has(t))return e=this.read(t),this.touch(t),e},t.prototype.put=function(t,e){return this.write(t,e),this.touch(t),e},t.prototype.read=function(t){var n;return n=e(t),this.snapshots[n]},t.prototype.write=function(t,n){var i;return i=e(t),this.snapshots[i]=n},t.prototype.touch=function(t){var n,i;return i=e(t),n=this.keys.indexOf(i),n>-1&&this.keys.splice(n,1),this.keys.unshift(i),this.trim()},t.prototype.trim=function(){var t,e,n,i,o;for(i=this.keys.splice(this.size),o=[],t=0,n=i.length;n>t;t++)e=i[t],o.push(delete this.snapshots[e]);return o},e=function(t){return r.Location.wrap(t).toCacheKey()},t}()}.call(this),function(){var t=function(t,e){return function(){return t.apply(e,arguments)}};r.Visit=function(){function e(e,n,i){this.controller=e,this.action=i,this.performScroll=t(this.performScroll,this),this.identifier=r.uuid(),this.location=r.Location.wrap(n),this.adapter=this.controller.adapter,this.state="initialized",this.timingMetrics={}}var n;return e.prototype.start=function(){return"initialized"===this.state?(this.recordTimingMetric("visitStart"),this.state="started",this.adapter.visitStarted(this)):void 0},e.prototype.cancel=function(){var t;return"started"===this.state?(null!=(t=this.request)&&t.cancel(),this.cancelRender(),this.state="canceled"):void 0},e.prototype.complete=function(){var t;return"started"===this.state?(this.recordTimingMetric("visitEnd"),this.state="completed","function"==typeof(t=this.adapter).visitCompleted&&t.visitCompleted(this),this.controller.visitCompleted(this)):void 0},e.prototype.fail=function(){var t;return"started"===this.state?(this.state="failed","function"==typeof(t=this.adapter).visitFailed?t.visitFailed(this):void 0):void 0},e.prototype.changeHistory=function(){var t,e;return this.historyChanged?void 0:(t=this.location.isEqualTo(this.referrer)?"replace":this.action,e=n(t),this.controller[e](this.location,this.restorationIdentifier),this.historyChanged=!0)},e.prototype.issueRequest=function(){return this.shouldIssueRequest()&&null==this.request?(this.progress=0,this.request=new r.HttpRequest(this,this.location,this.referrer),this.request.send()):void 0},e.prototype.getCachedSnapshot=function(){var t;return!(t=this.controller.getCachedSnapshotForLocation(this.location))||null!=this.location.anchor&&!t.hasAnchor(this.location.anchor)||"restore"!==this.action&&!t.isPreviewable()?void 0:t},e.prototype.hasCachedSnapshot=function(){return null!=this.getCachedSnapshot()},e.prototype.loadCachedSnapshot=function(){var t,e;return(e=this.getCachedSnapshot())?(t=this.shouldIssueRequest(),this.render(function(){var n;return this.cacheSnapshot(),this.controller.render({snapshot:e,isPreview:t},this.performScroll),"function"==typeof(n=this.adapter).visitRendered&&n.visitRendered(this),t?void 0:this.complete()})):void 0},e.prototype.loadResponse=function(){return null!=this.response?this.render(function(){var t,e;return this.cacheSnapshot(),this.request.failed?(this.controller.render({error:this.response},this.performScroll),"function"==typeof(t=this.adapter).visitRendered&&t.visitRendered(this),this.fail()):(this.controller.render({snapshot:this.response},this.performScroll),"function"==typeof(e=this.adapter).visitRendered&&e.visitRendered(this),this.complete())}):void 0},e.prototype.followRedirect=function(){return this.redirectedToLocation&&!this.followedRedirect?(this.location=this.redirectedToLocation,this.controller.replaceHistoryWithLocationAndRestorationIdentifier(this.redirectedToLocation,this.restorationIdentifier),this.followedRedirect=!0):void 0},e.prototype.requestStarted=function(){var t;return this.recordTimingMetric("requestStart"),"function"==typeof(t=this.adapter).visitRequestStarted?t.visitRequestStarted(this):void 0},e.prototype.requestProgressed=function(t){var e;return this.progress=t,"function"==typeof(e=this.adapter).visitRequestProgressed?e.visitRequestProgressed(this):void 0},e.prototype.requestCompletedWithResponse=function(t,e){return this.response=t,null!=e&&(this.redirectedToLocation=r.Location.wrap(e)),this.adapter.visitRequestCompleted(this)},e.prototype.requestFailedWithStatusCode=function(t,e){return this.response=e,this.adapter.visitRequestFailedWithStatusCode(this,t)},e.prototype.requestFinished=function(){var t;return this.recordTimingMetric("requestEnd"),"function"==typeof(t=this.adapter).visitRequestFinished?t.visitRequestFinished(this):void 0},e.prototype.performScroll=function(){return this.scrolled?void 0:("restore"===this.action?this.scrollToRestoredPosition()||this.scrollToTop():this.scrollToAnchor()||this.scrollToTop(),this.scrolled=!0)},e.prototype.scrollToRestoredPosition=function(){var t,e;return t=null!=(e=this.restorationData)?e.scrollPosition:void 0,null!=t?(this.controller.scrollToPosition(t),!0):void 0},e.prototype.scrollToAnchor=function(){return null!=this.location.anchor?(this.controller.scrollToAnchor(this.location.anchor),!0):void 0},e.prototype.scrollToTop=function(){return this.controller.scrollToPosition({x:0,y:0})},e.prototype.recordTimingMetric=function(t){var e;return null!=(e=this.timingMetrics)[t]?e[t]:e[t]=(new Date).getTime()},e.prototype.getTimingMetrics=function(){return r.copyObject(this.timingMetrics)},n=function(t){switch(t){case"replace":return"replaceHistoryWithLocationAndRestorationIdentifier";case"advance":case"restore":return"pushHistoryWithLocationAndRestorationIdentifier"}},e.prototype.shouldIssueRequest=function(){return"restore"!==this.action||!this.hasCachedSnapshot()},e.prototype.cacheSnapshot=function(){return this.snapshotCached?void 0:(this.controller.cacheSnapshot(),this.snapshotCached=!0)},e.prototype.render=function(t){return this.cancelRender(),this.frame=requestAnimationFrame(function(e){return function(){return e.frame=null,t.call(e)}}(this))},e.prototype.cancelRender=function(){return this.frame?cancelAnimationFrame(this.frame):void 0},e}()}.call(this),function(){var t=function(t,e){return function(){return t.apply(e,arguments)}};r.Controller=function(){function e(){this.clickBubbled=t(this.clickBubbled,this),this.clickCaptured=t(this.clickCaptured,this),this.pageLoaded=t(this.pageLoaded,this),this.history=new r.History(this),this.view=new r.View(this),this.scrollManager=new r.ScrollManager(this),this.restorationData={},this.clearCache()}return e.prototype.start=function(){return r.supported&&!this.started?(addEventListener("click",this.clickCaptured,!0),addEventListener("DOMContentLoaded",this.pageLoaded,!1),this.scrollManager.start(),this.startHistory(),this.started=!0,this.enabled=!0):void 0},e.prototype.disable=function(){return this.enabled=!1},e.prototype.stop=function(){return this.started?(removeEventListener("click",this.clickCaptured,!0),removeEventListener("DOMContentLoaded",this.pageLoaded,!1),this.scrollManager.stop(),this.stopHistory(),this.started=!1):void 0},e.prototype.clearCache=function(){return this.cache=new r.SnapshotCache(10)},e.prototype.visit=function(t,e){var n,i;return null==e&&(e={}),t=r.Location.wrap(t),this.applicationAllowsVisitingLocation(t)?this.locationIsVisitable(t)?(n=null!=(i=e.action)?i:"advance",this.adapter.visitProposedToLocationWithAction(t,n)):window.location=t:void 0},e.prototype.startVisitToLocationWithAction=function(t,e,n){var i;return r.supported?(i=this.getRestorationDataForIdentifier(n),this.startVisit(t,e,{restorationData:i})):window.location=t},e.prototype.startHistory=function(){return this.location=r.Location.wrap(window.location),this.restorationIdentifier=r.uuid(),this.history.start(),this.history.replace(this.location,this.restorationIdentifier)},e.prototype.stopHistory=function(){return this.history.stop()},e.prototype.pushHistoryWithLocationAndRestorationIdentifier=function(t,e){return this.restorationIdentifier=e,this.location=r.Location.wrap(t),this.history.push(this.location,this.restorationIdentifier)},e.prototype.replaceHistoryWithLocationAndRestorationIdentifier=function(t,e){return this.restorationIdentifier=e,this.location=r.Location.wrap(t),this.history.replace(this.location,this.restorationIdentifier)},e.prototype.historyPoppedToLocationWithRestorationIdentifier=function(t,e){var n;return this.restorationIdentifier=e,this.enabled?(n=this.getRestorationDataForIdentifier(this.restorationIdentifier),this.startVisit(t,"restore",{restorationIdentifier:this.restorationIdentifier,restorationData:n,historyChanged:!0}),this.location=r.Location.wrap(t)):this.adapter.pageInvalidated()},e.prototype.getCachedSnapshotForLocation=function(t){var e;return e=this.cache.get(t),e?e.clone():void 0},e.prototype.shouldCacheSnapshot=function(){return this.view.getSnapshot().isCacheable()},e.prototype.cacheSnapshot=function(){var t;return this.shouldCacheSnapshot()?(this.notifyApplicationBeforeCachingSnapshot(),t=this.view.getSnapshot(),this.cache.put(this.lastRenderedLocation,t.clone())):void 0},e.prototype.scrollToAnchor=function(t){var e;return(e=document.getElementById(t))?this.scrollToElement(e):this.scrollToPosition({x:0,y:0})},e.prototype.scrollToElement=function(t){return this.scrollManager.scrollToElement(t)},e.prototype.scrollToPosition=function(t){return this.scrollManager.scrollToPosition(t)},e.prototype.scrollPositionChanged=function(t){var e;return e=this.getCurrentRestorationData(),e.scrollPosition=t},e.prototype.render=function(t,e){return this.view.render(t,e)},e.prototype.viewInvalidated=function(){return this.adapter.pageInvalidated()},e.prototype.viewWillRender=function(t){return this.notifyApplicationBeforeRender(t)},e.prototype.viewRendered=function(){return this.lastRenderedLocation=this.currentVisit.location,this.notifyApplicationAfterRender()},e.prototype.pageLoaded=function(){return this.lastRenderedLocation=this.location,this.notifyApplicationAfterPageLoad()},e.prototype.clickCaptured=function(){return removeEventListener("click",this.clickBubbled,!1),addEventListener("click",this.clickBubbled,!1)},e.prototype.clickBubbled=function(t){var e,n,i;return this.enabled&&this.clickEventIsSignificant(t)&&(n=this.getVisitableLinkForNode(t.target))&&(i=this.getVisitableLocationForLink(n))&&this.applicationAllowsFollowingLinkToLocation(n,i)?(t.preventDefault(),e=this.getActionForLink(n),this.visit(i,{action:e})):void 0},e.prototype.applicationAllowsFollowingLinkToLocation=function(t,e){var n;return n=this.notifyApplicationAfterClickingLinkToLocation(t,e),!n.defaultPrevented},e.prototype.applicationAllowsVisitingLocation=function(t){var e;return e=this.notifyApplicationBeforeVisitingLocation(t),!e.defaultPrevented},e.prototype.notifyApplicationAfterClickingLinkToLocation=function(t,e){return r.dispatch("turbolinks:click",{target:t,data:{url:e.absoluteURL},cancelable:!0})},e.prototype.notifyApplicationBeforeVisitingLocation=function(t){return r.dispatch("turbolinks:before-visit",{data:{url:t.absoluteURL},cancelable:!0})},e.prototype.notifyApplicationAfterVisitingLocation=function(t){return r.dispatch("turbolinks:visit",{data:{url:t.absoluteURL}})},e.prototype.notifyApplicationBeforeCachingSnapshot=function(){return r.dispatch("turbolinks:before-cache")},e.prototype.notifyApplicationBeforeRender=function(t){return r.dispatch("turbolinks:before-render",{data:{newBody:t}})},e.prototype.notifyApplicationAfterRender=function(){return r.dispatch("turbolinks:render")},e.prototype.notifyApplicationAfterPageLoad=function(t){return null==t&&(t={}),r.dispatch("turbolinks:load",{data:{url:this.location.absoluteURL,timing:t}})},e.prototype.startVisit=function(t,e,n){var i;return null!=(i=this.currentVisit)&&i.cancel(),this.currentVisit=this.createVisit(t,e,n),this.currentVisit.start(),this.notifyApplicationAfterVisitingLocation(t)},e.prototype.createVisit=function(t,e,n){var i,o,s,a,l;return o=null!=n?n:{},a=o.restorationIdentifier,s=o.restorationData,i=o.historyChanged,l=new r.Visit(this,t,e),l.restorationIdentifier=null!=a?a:r.uuid(),l.restorationData=r.copyObject(s),l.historyChanged=i,l.referrer=this.location,l},e.prototype.visitCompleted=function(t){return this.notifyApplicationAfterPageLoad(t.getTimingMetrics())},e.prototype.clickEventIsSignificant=function(t){return!(t.defaultPrevented||t.target.isContentEditable||t.which>1||t.altKey||t.ctrlKey||t.metaKey||t.shiftKey)},e.prototype.getVisitableLinkForNode=function(t){return this.nodeIsVisitable(t)?r.closest(t,"a[href]:not([target]):not([download])"):void 0},e.prototype.getVisitableLocationForLink=function(t){var e;return e=new r.Location(t.getAttribute("href")),this.locationIsVisitable(e)?e:void 0},e.prototype.getActionForLink=function(t){var e;return null!=(e=t.getAttribute("data-turbolinks-action"))?e:"advance"},e.prototype.nodeIsVisitable=function(t){var e;return!(e=r.closest(t,"[data-turbolinks]"))||"false"!==e.getAttribute("data-turbolinks")},e.prototype.locationIsVisitable=function(t){return t.isPrefixedBy(this.view.getRootLocation())&&t.isHTML()},e.prototype.getCurrentRestorationData=function(){return this.getRestorationDataForIdentifier(this.restorationIdentifier)},e.prototype.getRestorationDataForIdentifier=function(t){var e;return null!=(e=this.restorationData)[t]?e[t]:e[t]={}},e}()}.call(this),function(){var t,e,n;r.start=function(){return e()?(null==r.controller&&(r.controller=t()),r.controller.start()):void 0},e=function(){return null==window.Turbolinks&&(window.Turbolinks=r),n()},t=function(){var t;return t=new r.Controller,t.adapter=new r.BrowserAdapter(t),t},n=function(){return window.Turbolinks===r},n()&&r.start()}.call(this)}).call(this),"object"==typeof t&&t.exports?t.exports=r:n(9)&&(i=r,o="function"==typeof i?i.call(e,n,e,t):i,!(void 0!==o&&(t.exports=o)))}).call(this)},function(t,e){(function(e){t.exports=e}).call(e,{})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdmVuZG9yLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCAxMjVlM2QwZGM2ODkyZjVjNzRhZCIsIndlYnBhY2s6Ly8vLi9+L3RldGhlci9kaXN0L2pzL3RldGhlci5qcz81ZDlmIiwid2VicGFjazovLy8uL34vdGV0aGVyL2Rpc3QvanMvdGV0aGVyLmpzP2JjY2IiLCJ3ZWJwYWNrOi8vLy4vfi90ZXRoZXIvZGlzdC9qcy90ZXRoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9ib290c3RyYXAvZGlzdC9qcy9ib290c3RyYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi90dXJib2xpbmtzL2Rpc3QvdHVyYm9saW5rcy5qcz9mNDAyIiwid2VicGFjazovLy8uL34vdHVyYm9saW5rcy9kaXN0L3R1cmJvbGlua3MuanM/ZGVkMiIsIndlYnBhY2s6Ly8vLi9+L3R1cmJvbGlua3MvZGlzdC90dXJib2xpbmtzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwid2luZG93IiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImNodW5rSWQiLCJpIiwiY2FsbGJhY2tzIiwibGVuZ3RoIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsImFwcGx5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJzaGlmdCIsIjEiLCJlIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJoZWFkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiY2hhcnNldCIsImFzeW5jIiwic3JjIiwicCIsImFwcGVuZENoaWxkIiwibSIsImMiLCJnbG9iYWwiLCJ0aGlzIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJyb290IiwiZmFjdG9yeSIsInJlcXVpcmUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiZ2V0QWN0dWFsQm91bmRpbmdDbGllbnRSZWN0Iiwibm9kZSIsImJvdW5kaW5nUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlY3QiLCJrIiwib3duZXJEb2N1bWVudCIsIl9mcmFtZUVsZW1lbnQiLCJkZWZhdWx0VmlldyIsImZyYW1lRWxlbWVudCIsImZyYW1lUmVjdCIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsImdldFNjcm9sbFBhcmVudHMiLCJlbCIsImNvbXB1dGVkU3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwicG9zaXRpb24iLCJwYXJlbnRzIiwicGFyZW50IiwicGFyZW50Tm9kZSIsIm5vZGVUeXBlIiwic3R5bGUiLCJlcnIiLCJfc3R5bGUiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInRlc3QiLCJpbmRleE9mIiwiYm9keSIsInJlbW92ZVV0aWxFbGVtZW50cyIsInplcm9FbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJnZXRCb3VuZHMiLCJkb2MiLCJkb2N1bWVudEVsZW1lbnQiLCJkb2NFbCIsImJveCIsIm9yaWdpbiIsImdldE9yaWdpbiIsIndpZHRoIiwic2Nyb2xsV2lkdGgiLCJoZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnZXRPZmZzZXRQYXJlbnQiLCJvZmZzZXRQYXJlbnQiLCJnZXRTY3JvbGxCYXJTaXplIiwiX3Njcm9sbEJhclNpemUiLCJpbm5lciIsIm91dGVyIiwiZXh0ZW5kIiwicG9pbnRlckV2ZW50cyIsInZpc2liaWxpdHkiLCJ3aWR0aENvbnRhaW5lZCIsIm9mZnNldFdpZHRoIiwid2lkdGhTY3JvbGwiLCJvdXQiLCJhcmd1bWVudHMiLCJhcmdzIiwiQXJyYXkiLCJzbGljZSIsImZvckVhY2giLCJvYmoiLCJrZXkiLCJyZW1vdmVDbGFzcyIsIm5hbWUiLCJjbGFzc0xpc3QiLCJzcGxpdCIsImNscyIsInRyaW0iLCJyZW1vdmUiLCJyZWdleCIsIlJlZ0V4cCIsImpvaW4iLCJjbGFzc05hbWUiLCJnZXRDbGFzc05hbWUiLCJyZXBsYWNlIiwic2V0Q2xhc3NOYW1lIiwiYWRkQ2xhc3MiLCJhZGQiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwiU1ZHQW5pbWF0ZWRTdHJpbmciLCJiYXNlVmFsIiwic2V0QXR0cmlidXRlIiwidXBkYXRlQ2xhc3NlcyIsImFsbCIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIndpdGhpbiIsImEiLCJiIiwiZGlmZiIsIm5vdyIsInBlcmZvcm1hbmNlIiwiRGF0ZSIsImFkZE9mZnNldCIsIl9sZW4iLCJvZmZzZXRzIiwiX2tleSIsIl9yZWYiLCJwYXJzZUZsb2F0Iiwib2Zmc2V0VG9QeCIsIm9mZnNldCIsInNpemUiLCJnZXRCb3VuZGluZ1JlY3QiLCJ0ZXRoZXIiLCJ0byIsInNjcm9sbFBhcmVudHMiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwicG9zIiwid2luIiwiQk9VTkRTX0ZPUk1BVCIsInNpZGUiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIlRldGhlckJhc2UiLCJ1bmlxdWVJZCIsInplcm9Qb3NDYWNoZSIsImdldEF0dHJpYnV0ZSIsImRlZmVyIiwiZGVmZXJyZWQiLCJmbiIsImZsdXNoIiwicG9wIiwiRXZlbnRlZCIsImV2ZW50IiwiaGFuZGxlciIsImN0eCIsIm9uY2UiLCJiaW5kaW5ncyIsIm9uIiwic3BsaWNlIiwiX2JpbmRpbmdzJGV2ZW50JGkiLCJjb250ZXh0IiwiVXRpbHMiLCJfc2xpY2VkVG9BcnJheSIsInNsaWNlSXRlcmF0b3IiLCJhcnIiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJpc0FycmF5IiwiX2dldCIsIl94NiIsIl94NyIsIl94OCIsIl9hZ2FpbiIsIm9iamVjdCIsInByb3BlcnR5IiwicmVjZWl2ZXIiLCJGdW5jdGlvbiIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJnZXQiLCJnZXRQcm90b3R5cGVPZiIsIkVycm9yIiwiX1RldGhlckJhc2UkVXRpbHMiLCJ0cmFuc2Zvcm1LZXkiLCJ0cmFuc2Zvcm1zIiwidGV0aGVycyIsImxhc3RDYWxsIiwibGFzdER1cmF0aW9uIiwicGVuZGluZ1RpbWVvdXQiLCJ0aWNrIiwiTWF0aCIsIm1pbiIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJhZGRFdmVudExpc3RlbmVyIiwiTUlSUk9SX0xSIiwiY2VudGVyIiwiTUlSUk9SX1RCIiwibWlkZGxlIiwiT0ZGU0VUX01BUCIsImF1dG9Ub0ZpeGVkQXR0YWNobWVudCIsImF0dGFjaG1lbnQiLCJyZWxhdGl2ZVRvQXR0YWNobWVudCIsImF0dGFjaG1lbnRUb09mZnNldCIsInBhcnNlT2Zmc2V0IiwiX3ZhbHVlJHNwbGl0IiwiX3ZhbHVlJHNwbGl0MiIsInBhcnNlQXR0YWNobWVudCIsIlRldGhlckNsYXNzIiwiX0V2ZW50ZWQiLCJvcHRpb25zIiwiX3RoaXMiLCJiaW5kIiwiaGlzdG9yeSIsInNldE9wdGlvbnMiLCJpbml0aWFsaXplIiwiY2xhc3NlcyIsImNsYXNzUHJlZml4IiwiX3RoaXMyIiwiZGVmYXVsdHMiLCJ0YXJnZXRPZmZzZXQiLCJ0YXJnZXRBdHRhY2htZW50IiwiX29wdGlvbnMiLCJlbGVtZW50IiwidGFyZ2V0TW9kaWZpZXIiLCJqcXVlcnkiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0Q2xhc3MiLCJhZGRUYXJnZXRDbGFzc2VzIiwiZGlzYWJsZSIsImVuYWJsZWQiLCJlbmFibGUiLCJib3VuZHMiLCJoYXNCb3R0b21TY3JvbGwiLCJzY3JvbGxCb3R0b20iLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwiZml0QWRqIiwicG93IiwibWF4Iiwic2Nyb2xsUGVyY2VudGFnZSIsInNjcm9sbFRvcCIsIl9jYWNoZSIsIl90aGlzMyIsIl90aGlzNCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfdGhpczUiLCJlbGVtZW50QXR0YWNoIiwidGFyZ2V0QXR0YWNoIiwiX3RoaXM2Iiwic2lkZXMiLCJfYWRkQXR0YWNoQ2xhc3NlcyIsIl90aGlzNyIsImZsdXNoQ2hhbmdlcyIsImNsZWFyQ2FjaGUiLCJ1cGRhdGVBdHRhY2hDbGFzc2VzIiwiZWxlbWVudFBvcyIsImNhY2hlIiwibGFzdFNpemUiLCJfbGFzdFNpemUiLCJ0YXJnZXRQb3MiLCJnZXRUYXJnZXRCb3VuZHMiLCJ0YXJnZXRTaXplIiwibWFudWFsT2Zmc2V0IiwibWFudWFsVGFyZ2V0T2Zmc2V0IiwiX21vZHVsZTIiLCJyZXQiLCJzY3JvbGxiYXJTaXplIiwicGFnZSIsInZpZXdwb3J0IiwicGFyZW50RWxlbWVudCIsIm9wdGltaXphdGlvbnMiLCJtb3ZlRWxlbWVudCIsIm9mZnNldFBvc2l0aW9uIiwib2Zmc2V0UGFyZW50U3R5bGUiLCJvZmZzZXRQYXJlbnRTaXplIiwib2Zmc2V0Qm9yZGVyIiwidG9Mb3dlckNhc2UiLCJzY3JvbGxMZWZ0IiwibW92ZSIsInVuc2hpZnQiLCJfdGhpczgiLCJzYW1lIiwiZm91bmQiLCJwb2ludCIsImNzcyIsInRyYW5zY3JpYmUiLCJfc2FtZSIsIl9wb3MiLCJoYXNPcHRpbWl6YXRpb25zIiwiZ3B1IiwieVBvcyIsInhQb3MiLCJtYXRjaE1lZGlhIiwicmV0aW5hIiwibWF0Y2hlcyIsInJvdW5kIiwibW92ZWQiLCJib2R5RWxlbWVudCIsIm9mZnNldFBhcmVudElzQm9keSIsImN1cnJlbnROb2RlIiwidGFnTmFtZSIsIndyaXRlQ1NTIiwid3JpdGUiLCJ2YWwiLCJlbFZhbCIsInRyaWdnZXIiLCJUZXRoZXIiLCJjb25zdHJhaW50cyIsInRhcmdldEhlaWdodCIsInRhcmdldFdpZHRoIiwiYWxsQ2xhc3NlcyIsImNvbnN0cmFpbnQiLCJvdXRPZkJvdW5kc0NsYXNzIiwicGlubmVkQ2xhc3MiLCJhZGRDbGFzc2VzIiwidEF0dGFjaG1lbnQiLCJlQXR0YWNobWVudCIsInBpbiIsImNoYW5nZUF0dGFjaFgiLCJjaGFuZ2VBdHRhY2hZIiwiX2F0dGFjaG1lbnQkc3BsaXQiLCJfYXR0YWNobWVudCRzcGxpdDIiLCJtYXAiLCJwaW5uZWQiLCJvb2IiLCJvb2JDbGFzcyIsImFidXR0ZWQiLCJ0YXJnZXRQb3NTaWRlIiwic2hpZnRUb3AiLCJzaGlmdExlZnQiLCJfc2hpZnQiLCJfc2hpZnQyIiwialF1ZXJ5IiwiJCIsInZlcnNpb24iLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl90eXBlb2YiLCJVdGlsIiwidG9UeXBlIiwidG9TdHJpbmciLCJtYXRjaCIsImlzRWxlbWVudCIsImdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQiLCJiaW5kVHlwZSIsInRyYW5zaXRpb24iLCJlbmQiLCJkZWxlZ2F0ZVR5cGUiLCJoYW5kbGUiLCJpcyIsImhhbmRsZU9iaiIsInRyYW5zaXRpb25FbmRUZXN0IiwiUVVuaXQiLCJUcmFuc2l0aW9uRW5kRXZlbnQiLCJ0cmFuc2l0aW9uRW5kRW11bGF0b3IiLCJkdXJhdGlvbiIsImNhbGxlZCIsIm9uZSIsIlRSQU5TSVRJT05fRU5EIiwidHJpZ2dlclRyYW5zaXRpb25FbmQiLCJzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwic3VwcG9ydHNUcmFuc2l0aW9uRW5kIiwic3BlY2lhbCIsIk1BWF9VSUQiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwiZ2V0VUlEIiwicHJlZml4IiwicmFuZG9tIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRTZWxlY3RvckZyb21FbGVtZW50Iiwic2VsZWN0b3IiLCIkc2VsZWN0b3IiLCJlcnJvciIsInJlZmxvdyIsIm9mZnNldEhlaWdodCIsIkJvb2xlYW4iLCJ0eXBlQ2hlY2tDb25maWciLCJjb21wb25lbnROYW1lIiwiY29uZmlnIiwiY29uZmlnVHlwZXMiLCJleHBlY3RlZFR5cGVzIiwidmFsdWVUeXBlIiwiVG9vbHRpcCIsIk5BTUUiLCJWRVJTSU9OIiwiREFUQV9LRVkiLCJFVkVOVF9LRVkiLCJEQVRBX0FQSV9LRVkiLCJKUVVFUllfTk9fQ09ORkxJQ1QiLCJUUkFOU0lUSU9OX0RVUkFUSU9OIiwiU2VsZWN0b3IiLCJESVNNSVNTIiwiRXZlbnQiLCJDTE9TRSIsIkNMT1NFRCIsIkNMSUNLX0RBVEFfQVBJIiwiQ2xhc3NOYW1lIiwiQUxFUlQiLCJGQURFIiwiU0hPVyIsIkFsZXJ0IiwiX2VsZW1lbnQiLCJjbG9zZSIsInJvb3RFbGVtZW50IiwiX2dldFJvb3RFbGVtZW50IiwiY3VzdG9tRXZlbnQiLCJfdHJpZ2dlckNsb3NlRXZlbnQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJfcmVtb3ZlRWxlbWVudCIsImRpc3Bvc2UiLCJyZW1vdmVEYXRhIiwiY2xvc2VzdCIsImNsb3NlRXZlbnQiLCJfZGVzdHJveUVsZW1lbnQiLCJkZXRhY2giLCJfalF1ZXJ5SW50ZXJmYWNlIiwiZWFjaCIsIiRlbGVtZW50IiwiZGF0YSIsIl9oYW5kbGVEaXNtaXNzIiwiYWxlcnRJbnN0YW5jZSIsInByZXZlbnREZWZhdWx0Iiwibm9Db25mbGljdCIsIkFDVElWRSIsIkJVVFRPTiIsIkZPQ1VTIiwiREFUQV9UT0dHTEVfQ0FSUk9UIiwiREFUQV9UT0dHTEUiLCJJTlBVVCIsIkZPQ1VTX0JMVVJfREFUQV9BUEkiLCJCdXR0b24iLCJ0b2dnbGUiLCJ0cmlnZ2VyQ2hhbmdlRXZlbnQiLCJhZGRBcmlhUHJlc3NlZCIsImlucHV0IiwiZmluZCIsImNoZWNrZWQiLCJhY3RpdmVFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwiZm9jdXMiLCJ0b2dnbGVDbGFzcyIsImJ1dHRvbiIsIkFSUk9XX0xFRlRfS0VZQ09ERSIsIkFSUk9XX1JJR0hUX0tFWUNPREUiLCJUT1VDSEVWRU5UX0NPTVBBVF9XQUlUIiwiRGVmYXVsdCIsImludGVydmFsIiwia2V5Ym9hcmQiLCJzbGlkZSIsInBhdXNlIiwid3JhcCIsIkRlZmF1bHRUeXBlIiwiRGlyZWN0aW9uIiwiTkVYVCIsIlBSRVYiLCJMRUZUIiwiUklHSFQiLCJTTElERSIsIlNMSUQiLCJLRVlET1dOIiwiTU9VU0VFTlRFUiIsIk1PVVNFTEVBVkUiLCJUT1VDSEVORCIsIkxPQURfREFUQV9BUEkiLCJDQVJPVVNFTCIsIklURU0iLCJBQ1RJVkVfSVRFTSIsIk5FWFRfUFJFViIsIklORElDQVRPUlMiLCJEQVRBX1NMSURFIiwiREFUQV9SSURFIiwiQ2Fyb3VzZWwiLCJfaXRlbXMiLCJfaW50ZXJ2YWwiLCJfYWN0aXZlRWxlbWVudCIsIl9pc1BhdXNlZCIsIl9pc1NsaWRpbmciLCJ0b3VjaFRpbWVvdXQiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl9hZGRFdmVudExpc3RlbmVycyIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImhpZGRlbiIsInByZXYiLCJjeWNsZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInZpc2liaWxpdHlTdGF0ZSIsImluZGV4IiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiZGlyZWN0aW9uIiwib2ZmIiwiX2tleWRvd24iLCJ3aGljaCIsIm1ha2VBcnJheSIsIl9nZXRJdGVtQnlEaXJlY3Rpb24iLCJpc05leHREaXJlY3Rpb24iLCJpc1ByZXZEaXJlY3Rpb24iLCJsYXN0SXRlbUluZGV4IiwiaXNHb2luZ1RvV3JhcCIsImRlbHRhIiwiaXRlbUluZGV4IiwiX3RyaWdnZXJTbGlkZUV2ZW50IiwicmVsYXRlZFRhcmdldCIsImV2ZW50RGlyZWN0aW9uTmFtZSIsInRhcmdldEluZGV4IiwiZnJvbUluZGV4Iiwic2xpZGVFdmVudCIsImZyb20iLCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCIsIm5leHRJbmRpY2F0b3IiLCJjaGlsZHJlbiIsImFjdGl2ZUVsZW1lbnRJbmRleCIsIm5leHRFbGVtZW50IiwibmV4dEVsZW1lbnRJbmRleCIsImlzQ3ljbGluZyIsImRpcmVjdGlvbmFsQ2xhc3NOYW1lIiwib3JkZXJDbGFzc05hbWUiLCJzbGlkRXZlbnQiLCJhY3Rpb24iLCJfZGF0YUFwaUNsaWNrSGFuZGxlciIsInNsaWRlSW5kZXgiLCIkY2Fyb3VzZWwiLCJTSE9XTiIsIkhJREUiLCJISURERU4iLCJDT0xMQVBTRSIsIkNPTExBUFNJTkciLCJDT0xMQVBTRUQiLCJEaW1lbnNpb24iLCJXSURUSCIsIkhFSUdIVCIsIkFDVElWRVMiLCJDb2xsYXBzZSIsIl9pc1RyYW5zaXRpb25pbmciLCJfdHJpZ2dlckFycmF5IiwidGFiVG9nZ2xlcyIsImVsZW0iLCJmaWx0ZXIiLCJfcGFyZW50IiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJoaWRlIiwic2hvdyIsImFjdGl2ZXMiLCJhY3RpdmVzRGF0YSIsInN0YXJ0RXZlbnQiLCJkaW1lbnNpb24iLCJfZ2V0RGltZW5zaW9uIiwiYXR0ciIsInNldFRyYW5zaXRpb25pbmciLCJjb21wbGV0ZSIsImNhcGl0YWxpemVkRGltZW5zaW9uIiwic2Nyb2xsU2l6ZSIsIiRlbGVtIiwiaXNUcmFuc2l0aW9uaW5nIiwiaGFzV2lkdGgiLCJfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCIkdGhpcyIsIiR0cmlnZ2VyIiwiJHRhcmdldCIsIlBvcHBlciIsIkVTQ0FQRV9LRVlDT0RFIiwiU1BBQ0VfS0VZQ09ERSIsIlRBQl9LRVlDT0RFIiwiQVJST1dfVVBfS0VZQ09ERSIsIkFSUk9XX0RPV05fS0VZQ09ERSIsIlJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCIsIlJFR0VYUF9LRVlET1dOIiwiQ0xJQ0siLCJLRVlET1dOX0RBVEFfQVBJIiwiS0VZVVBfREFUQV9BUEkiLCJESVNBQkxFRCIsIkRST1BVUCIsIk1FTlVSSUdIVCIsIk1FTlVMRUZUIiwiRk9STV9DSElMRCIsIk1FTlUiLCJOQVZCQVJfTkFWIiwiVklTSUJMRV9JVEVNUyIsIkF0dGFjaG1lbnRNYXAiLCJUT1AiLCJUT1BFTkQiLCJCT1RUT00iLCJCT1RUT01FTkQiLCJwbGFjZW1lbnQiLCJmbGlwIiwiRHJvcGRvd24iLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiZGlzYWJsZWQiLCJfZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJpc0FjdGl2ZSIsIl9jbGVhck1lbnVzIiwic2hvd0V2ZW50IiwiX2dldFBvcHBlckNvbmZpZyIsIm5vb3AiLCJkZXN0cm95IiwidXBkYXRlIiwic2NoZWR1bGVVcGRhdGUiLCJfdGhpczkiLCJzdG9wUHJvcGFnYXRpb24iLCJlbGVtZW50RGF0YSIsIl9nZXRQbGFjZW1lbnQiLCIkcGFyZW50RHJvcGRvd24iLCJwb3BwZXJDb25maWciLCJtb2RpZmllcnMiLCJhcHBseVN0eWxlIiwidG9nZ2xlcyIsImRyb3Bkb3duTWVudSIsImhpZGVFdmVudCIsIl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIiLCJpdGVtcyIsIkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04iLCJiYWNrZHJvcCIsIkZPQ1VTSU4iLCJSRVNJWkUiLCJDTElDS19ESVNNSVNTIiwiS0VZRE9XTl9ESVNNSVNTIiwiTU9VU0VVUF9ESVNNSVNTIiwiTU9VU0VET1dOX0RJU01JU1MiLCJTQ1JPTExCQVJfTUVBU1VSRVIiLCJCQUNLRFJPUCIsIk9QRU4iLCJESUFMT0ciLCJEQVRBX0RJU01JU1MiLCJGSVhFRF9DT05URU5UIiwiTkFWQkFSX1RPR0dMRVIiLCJNb2RhbCIsIl9kaWFsb2ciLCJfYmFja2Ryb3AiLCJfaXNTaG93biIsIl9pc0JvZHlPdmVyZmxvd2luZyIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX29yaWdpbmFsQm9keVBhZGRpbmciLCJfc2Nyb2xsYmFyV2lkdGgiLCJfdGhpczEwIiwiX2NoZWNrU2Nyb2xsYmFyIiwiX3NldFNjcm9sbGJhciIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJfdGhpczExIiwiX2hpZGVNb2RhbCIsImhhbmRsZVVwZGF0ZSIsIl9hZGp1c3REaWFsb2ciLCJfdGhpczEyIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsImRpc3BsYXkiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfZW5mb3JjZUZvY3VzIiwic2hvd25FdmVudCIsInRyYW5zaXRpb25Db21wbGV0ZSIsIl90aGlzMTMiLCJoYXMiLCJfdGhpczE0IiwiX3RoaXMxNSIsIl90aGlzMTYiLCJfcmVzZXRBZGp1c3RtZW50cyIsIl9yZXNldFNjcm9sbGJhciIsIl9yZW1vdmVCYWNrZHJvcCIsIl90aGlzMTciLCJhbmltYXRlIiwiZG9BbmltYXRlIiwiYXBwZW5kVG8iLCJjdXJyZW50VGFyZ2V0IiwiY2FsbGJhY2tSZW1vdmUiLCJpc01vZGFsT3ZlcmZsb3dpbmciLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsIl9nZXRTY3JvbGxiYXJXaWR0aCIsIl90aGlzMTgiLCJhY3R1YWxQYWRkaW5nIiwiY2FsY3VsYXRlZFBhZGRpbmciLCJhY3R1YWxNYXJnaW4iLCJtYXJnaW5SaWdodCIsImNhbGN1bGF0ZWRNYXJnaW4iLCJwYWRkaW5nIiwibWFyZ2luIiwic2Nyb2xsRGl2Iiwic2Nyb2xsYmFyV2lkdGgiLCJfdGhpczE5IiwibWV0aG9kIiwiQUNUSVZBVEUiLCJTQ1JPTEwiLCJEUk9QRE9XTl9JVEVNIiwiRFJPUERPV05fTUVOVSIsIkRBVEFfU1BZIiwiTkFWX0xJU1RfR1JPVVAiLCJOQVZfTElOS1MiLCJMSVNUX0lURU1TIiwiRFJPUERPV04iLCJEUk9QRE9XTl9JVEVNUyIsIkRST1BET1dOX1RPR0dMRSIsIk9mZnNldE1ldGhvZCIsIk9GRlNFVCIsIlBPU0lUSU9OIiwiU2Nyb2xsU3B5IiwiX3RoaXMyMCIsIl9zY3JvbGxFbGVtZW50IiwiX3NlbGVjdG9yIiwiX29mZnNldHMiLCJfdGFyZ2V0cyIsIl9hY3RpdmVUYXJnZXQiLCJfc2Nyb2xsSGVpZ2h0IiwiX3Byb2Nlc3MiLCJyZWZyZXNoIiwiX3RoaXMyMSIsImF1dG9NZXRob2QiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiX2dldFNjcm9sbFRvcCIsIl9nZXRTY3JvbGxIZWlnaHQiLCJ0YXJnZXRzIiwidGFyZ2V0U2VsZWN0b3IiLCJ0YXJnZXRCQ1IiLCJpdGVtIiwic29ydCIsIl9nZXRPZmZzZXRIZWlnaHQiLCJtYXhTY3JvbGwiLCJfYWN0aXZhdGUiLCJfY2xlYXIiLCJpc0FjdGl2ZVRhcmdldCIsInF1ZXJpZXMiLCIkbGluayIsInNjcm9sbFNweXMiLCIkc3B5IiwiRFJPUERPV05fQUNUSVZFX0NISUxEIiwiVGFiIiwiX3RoaXMyMiIsInByZXZpb3VzIiwibGlzdEVsZW1lbnQiLCJoaWRkZW5FdmVudCIsImNvbnRhaW5lciIsIl90aGlzMjMiLCJhY3RpdmUiLCJfdHJhbnNpdGlvbkNvbXBsZXRlIiwiZHJvcGRvd25DaGlsZCIsImRyb3Bkb3duRWxlbWVudCIsIkNMQVNTX1BSRUZJWCIsIkJTQ0xTX1BSRUZJWF9SRUdFWCIsImFuaW1hdGlvbiIsInRlbXBsYXRlIiwidGl0bGUiLCJkZWxheSIsImh0bWwiLCJmYWxsYmFja1BsYWNlbWVudCIsIkFVVE8iLCJIb3ZlclN0YXRlIiwiT1VUIiwiSU5TRVJURUQiLCJGT0NVU09VVCIsIlRPT0xUSVAiLCJUT09MVElQX0lOTkVSIiwiQVJST1ciLCJUcmlnZ2VyIiwiSE9WRVIiLCJNQU5VQUwiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwidGlwIiwiX3NldExpc3RlbmVycyIsInRvZ2dsZUVuYWJsZWQiLCJkYXRhS2V5IiwiX2dldERlbGVnYXRlQ29uZmlnIiwiY2xpY2siLCJfaXNXaXRoQWN0aXZlVHJpZ2dlciIsIl9lbnRlciIsIl9sZWF2ZSIsImdldFRpcEVsZW1lbnQiLCJfdGhpczI0IiwiaXNXaXRoQ29udGVudCIsImlzSW5UaGVEb20iLCJ0aXBJZCIsInNldENvbnRlbnQiLCJfZ2V0QXR0YWNobWVudCIsImFkZEF0dGFjaG1lbnRDbGFzcyIsImJlaGF2aW9yIiwiYXJyb3ciLCJvbkNyZWF0ZSIsIm9yaWdpbmFsUGxhY2VtZW50IiwiX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSIsIm9uVXBkYXRlIiwiX2ZpeFRyYW5zaXRpb24iLCJwcmV2SG92ZXJTdGF0ZSIsIl9UUkFOU0lUSU9OX0RVUkFUSU9OIiwiX3RoaXMyNSIsIl9jbGVhblRpcENsYXNzIiwiZ2V0VGl0bGUiLCIkdGlwIiwic2V0RWxlbWVudENvbnRlbnQiLCJjb250ZW50IiwiZW1wdHkiLCJhcHBlbmQiLCJ0ZXh0IiwiX3RoaXMyNiIsInRyaWdnZXJzIiwiZXZlbnRJbiIsImV2ZW50T3V0IiwiX2ZpeFRpdGxlIiwidGl0bGVUeXBlIiwidGFiQ2xhc3MiLCJpbml0Q29uZmlnQW5pbWF0aW9uIiwiVElUTEUiLCJDT05URU5UIiwiUG9wb3ZlciIsIl9Ub29sdGlwIiwiX2dldENvbnRlbnQiLCJUdXJib2xpbmtzIiwic3VwcG9ydGVkIiwicHVzaFN0YXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidmlzaXQiLCJyIiwidCIsImNvbnRyb2xsZXIiLCJuIiwiY29weU9iamVjdCIsInRocm90dGxlIiwiZGlzcGF0Y2giLCJvIiwicyIsImNhbmNlbGFibGUiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsInV1aWQiLCJmbG9vciIsIkxvY2F0aW9uIiwiaHJlZiIsImFic29sdXRlVVJMIiwiaGFzaCIsInJlcXVlc3RVUkwiLCJhbmNob3IiLCJnZXRQYXRoIiwiZ2V0UGF0aENvbXBvbmVudHMiLCJnZXRMYXN0UGF0aENvbXBvbmVudCIsImdldEV4dGVuc2lvbiIsImlzSFRNTCIsImlzUHJlZml4ZWRCeSIsImlzRXF1YWxUbyIsInRvQ2FjaGVLZXkiLCJ0b0pTT04iLCJ2YWx1ZU9mIiwiSHR0cFJlcXVlc3QiLCJkZWxlZ2F0ZSIsInJlcXVlc3RDYW5jZWxlZCIsInJlcXVlc3RUaW1lZE91dCIsInJlcXVlc3RGYWlsZWQiLCJyZXF1ZXN0TG9hZGVkIiwicmVxdWVzdFByb2dyZXNzZWQiLCJ1cmwiLCJyZWZlcnJlciIsImNyZWF0ZVhIUiIsIk5FVFdPUktfRkFJTFVSRSIsIlRJTUVPVVRfRkFJTFVSRSIsInRpbWVvdXQiLCJzZW5kIiwieGhyIiwic2VudCIsIm5vdGlmeUFwcGxpY2F0aW9uQmVmb3JlUmVxdWVzdFN0YXJ0Iiwic2V0UHJvZ3Jlc3MiLCJyZXF1ZXN0U3RhcnRlZCIsImNhbmNlbCIsImFib3J0IiwibGVuZ3RoQ29tcHV0YWJsZSIsInRvdGFsIiwiZW5kUmVxdWVzdCIsInN0YXR1cyIsInJlcXVlc3RDb21wbGV0ZWRXaXRoUmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJnZXRSZXNwb25zZUhlYWRlciIsImZhaWxlZCIsInJlcXVlc3RGYWlsZWRXaXRoU3RhdHVzQ29kZSIsIm5vdGlmeUFwcGxpY2F0aW9uQWZ0ZXJSZXF1ZXN0RW5kIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ucHJvZ3Jlc3MiLCJvbmxvYWQiLCJvbmVycm9yIiwib250aW1lb3V0Iiwib25hYm9ydCIsInByb2dyZXNzIiwicmVxdWVzdEZpbmlzaGVkIiwiUHJvZ3Jlc3NCYXIiLCJ0cmlja2xlIiwic3R5bGVzaGVldEVsZW1lbnQiLCJjcmVhdGVTdHlsZXNoZWV0RWxlbWVudCIsInByb2dyZXNzRWxlbWVudCIsImNyZWF0ZVByb2dyZXNzRWxlbWVudCIsImRlZmF1bHRDU1MiLCJ2aXNpYmxlIiwiaW5zdGFsbFN0eWxlc2hlZXRFbGVtZW50IiwiaW5zdGFsbFByb2dyZXNzRWxlbWVudCIsInN0YXJ0VHJpY2tsaW5nIiwiaGlkaW5nIiwiZmFkZVByb2dyZXNzRWxlbWVudCIsInVuaW5zdGFsbFByb2dyZXNzRWxlbWVudCIsInN0b3BUcmlja2xpbmciLCJzZXRWYWx1ZSIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJvcGFjaXR5IiwidHJpY2tsZUludGVydmFsIiwidGV4dENvbnRlbnQiLCJCcm93c2VyQWRhcHRlciIsInNob3dQcm9ncmVzc0JhciIsInByb2dyZXNzQmFyIiwidmlzaXRQcm9wb3NlZFRvTG9jYXRpb25XaXRoQWN0aW9uIiwic3RhcnRWaXNpdFRvTG9jYXRpb25XaXRoQWN0aW9uIiwidmlzaXRTdGFydGVkIiwiaXNzdWVSZXF1ZXN0IiwiY2hhbmdlSGlzdG9yeSIsImxvYWRDYWNoZWRTbmFwc2hvdCIsInZpc2l0UmVxdWVzdFN0YXJ0ZWQiLCJoYXNDYWNoZWRTbmFwc2hvdCIsInNob3dQcm9ncmVzc0JhckFmdGVyRGVsYXkiLCJ2aXNpdFJlcXVlc3RQcm9ncmVzc2VkIiwidmlzaXRSZXF1ZXN0Q29tcGxldGVkIiwibG9hZFJlc3BvbnNlIiwidmlzaXRSZXF1ZXN0RmFpbGVkV2l0aFN0YXR1c0NvZGUiLCJyZWxvYWQiLCJ2aXNpdFJlcXVlc3RGaW5pc2hlZCIsImhpZGVQcm9ncmVzc0JhciIsInZpc2l0Q29tcGxldGVkIiwiZm9sbG93UmVkaXJlY3QiLCJwYWdlSW52YWxpZGF0ZWQiLCJwcm9ncmVzc0JhclRpbWVvdXQiLCJsb2NhdGlvbiIsIkhpc3RvcnkiLCJvblBhZ2VMb2FkIiwib25Qb3BTdGF0ZSIsInN0YXJ0Iiwic3RhcnRlZCIsInN0b3AiLCJzaG91bGRIYW5kbGVQb3BTdGF0ZSIsInN0YXRlIiwidHVyYm9saW5rcyIsInJlc3RvcmF0aW9uSWRlbnRpZmllciIsImhpc3RvcnlQb3BwZWRUb0xvY2F0aW9uV2l0aFJlc3RvcmF0aW9uSWRlbnRpZmllciIsInBhZ2VMb2FkZWQiLCJwYWdlSXNMb2FkZWQiLCJyZWFkeVN0YXRlIiwiU25hcHNob3QiLCJmcm9tSFRNTCIsImlubmVySFRNTCIsImZyb21FbGVtZW50IiwiY2xvbmUiLCJjbG9uZU5vZGUiLCJnZXRSb290TG9jYXRpb24iLCJnZXRTZXR0aW5nIiwiZ2V0Q2FjaGVDb250cm9sVmFsdWUiLCJoYXNBbmNob3IiLCJpc1ByZXZpZXdhYmxlIiwiaXNDYWNoZWFibGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiUmVuZGVyZXIiLCJyZW5kZXIiLCJyZW5kZXJWaWV3Iiwidmlld1dpbGxSZW5kZXIiLCJuZXdCb2R5Iiwidmlld1JlbmRlcmVkIiwiaW52YWxpZGF0ZVZpZXciLCJ2aWV3SW52YWxpZGF0ZWQiLCJjcmVhdGVTY3JpcHRFbGVtZW50IiwidSIsImF0dHJpYnV0ZXMiLCJIZWFkRGV0YWlscyIsImwiLCJlbGVtZW50cyIsImNoaWxkTm9kZXMiLCJvdXRlckhUTUwiLCJ0cmFja2VkIiwiaGFzRWxlbWVudFdpdGhLZXkiLCJnZXRUcmFja2VkRWxlbWVudFNpZ25hdHVyZSIsImdldFNjcmlwdEVsZW1lbnRzTm90SW5EZXRhaWxzIiwiZ2V0RWxlbWVudHNNYXRjaGluZ1R5cGVOb3RJbkRldGFpbHMiLCJnZXRTdHlsZXNoZWV0RWxlbWVudHNOb3RJbkRldGFpbHMiLCJnZXRQcm92aXNpb25hbEVsZW1lbnRzIiwiX19zdXBlcl9fIiwiU25hcHNob3RSZW5kZXJlciIsImN1cnJlbnRTbmFwc2hvdCIsIm5ld1NuYXBzaG90IiwiY3VycmVudEhlYWREZXRhaWxzIiwibmV3SGVhZERldGFpbHMiLCJ0cmFja2VkRWxlbWVudHNBcmVJZGVudGljYWwiLCJtZXJnZUhlYWQiLCJyZXBsYWNlQm9keSIsImZvY3VzRmlyc3RBdXRvZm9jdXNhYmxlRWxlbWVudCIsImNvcHlOZXdIZWFkU3R5bGVzaGVldEVsZW1lbnRzIiwiY29weU5ld0hlYWRTY3JpcHRFbGVtZW50cyIsInJlbW92ZUN1cnJlbnRIZWFkUHJvdmlzaW9uYWxFbGVtZW50cyIsImNvcHlOZXdIZWFkUHJvdmlzaW9uYWxFbGVtZW50cyIsImFjdGl2YXRlQm9keVNjcmlwdEVsZW1lbnRzIiwiaW1wb3J0Qm9keVBlcm1hbmVudEVsZW1lbnRzIiwiYXNzaWduTmV3Qm9keSIsImdldE5ld0hlYWRTdHlsZXNoZWV0RWxlbWVudHMiLCJnZXROZXdIZWFkU2NyaXB0RWxlbWVudHMiLCJnZXRDdXJyZW50SGVhZFByb3Zpc2lvbmFsRWxlbWVudHMiLCJnZXROZXdIZWFkUHJvdmlzaW9uYWxFbGVtZW50cyIsImdldE5ld0JvZHlQZXJtYW5lbnRFbGVtZW50cyIsImZpbmRDdXJyZW50Qm9keVBlcm1hbmVudEVsZW1lbnQiLCJyZXBsYWNlQ2hpbGQiLCJnZXROZXdCb2R5U2NyaXB0RWxlbWVudHMiLCJmaW5kRmlyc3RBdXRvZm9jdXNhYmxlRWxlbWVudCIsIkVycm9yUmVuZGVyZXIiLCJyZXBsYWNlRG9jdW1lbnRIVE1MIiwiZ2V0U2NyaXB0RWxlbWVudHMiLCJWaWV3IiwiZ2V0U25hcHNob3QiLCJzbmFwc2hvdCIsImlzUHJldmlldyIsIm1hcmtBc1ByZXZpZXciLCJyZW5kZXJTbmFwc2hvdCIsInJlbmRlckVycm9yIiwiU2Nyb2xsTWFuYWdlciIsIm9uU2Nyb2xsIiwic2Nyb2xsVG9FbGVtZW50Iiwic2Nyb2xsSW50b1ZpZXciLCJzY3JvbGxUb1Bvc2l0aW9uIiwieCIsInkiLCJzY3JvbGxUbyIsInVwZGF0ZVBvc2l0aW9uIiwic2Nyb2xsUG9zaXRpb25DaGFuZ2VkIiwiU25hcHNob3RDYWNoZSIsImtleXMiLCJzbmFwc2hvdHMiLCJyZWFkIiwidG91Y2giLCJwdXQiLCJWaXNpdCIsInBlcmZvcm1TY3JvbGwiLCJpZGVudGlmaWVyIiwiYWRhcHRlciIsInRpbWluZ01ldHJpY3MiLCJyZWNvcmRUaW1pbmdNZXRyaWMiLCJyZXF1ZXN0IiwiY2FuY2VsUmVuZGVyIiwiZmFpbCIsInZpc2l0RmFpbGVkIiwiaGlzdG9yeUNoYW5nZWQiLCJzaG91bGRJc3N1ZVJlcXVlc3QiLCJnZXRDYWNoZWRTbmFwc2hvdCIsImdldENhY2hlZFNuYXBzaG90Rm9yTG9jYXRpb24iLCJjYWNoZVNuYXBzaG90IiwidmlzaXRSZW5kZXJlZCIsInJlc3BvbnNlIiwicmVkaXJlY3RlZFRvTG9jYXRpb24iLCJmb2xsb3dlZFJlZGlyZWN0IiwicmVwbGFjZUhpc3RvcnlXaXRoTG9jYXRpb25BbmRSZXN0b3JhdGlvbklkZW50aWZpZXIiLCJzY3JvbGxlZCIsInNjcm9sbFRvUmVzdG9yZWRQb3NpdGlvbiIsInNjcm9sbFRvVG9wIiwic2Nyb2xsVG9BbmNob3IiLCJyZXN0b3JhdGlvbkRhdGEiLCJzY3JvbGxQb3NpdGlvbiIsImdldFRpbWUiLCJnZXRUaW1pbmdNZXRyaWNzIiwic25hcHNob3RDYWNoZWQiLCJmcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiQ29udHJvbGxlciIsImNsaWNrQnViYmxlZCIsImNsaWNrQ2FwdHVyZWQiLCJ2aWV3Iiwic2Nyb2xsTWFuYWdlciIsInN0YXJ0SGlzdG9yeSIsInN0b3BIaXN0b3J5IiwiYXBwbGljYXRpb25BbGxvd3NWaXNpdGluZ0xvY2F0aW9uIiwibG9jYXRpb25Jc1Zpc2l0YWJsZSIsImdldFJlc3RvcmF0aW9uRGF0YUZvcklkZW50aWZpZXIiLCJzdGFydFZpc2l0IiwicHVzaEhpc3RvcnlXaXRoTG9jYXRpb25BbmRSZXN0b3JhdGlvbklkZW50aWZpZXIiLCJzaG91bGRDYWNoZVNuYXBzaG90Iiwibm90aWZ5QXBwbGljYXRpb25CZWZvcmVDYWNoaW5nU25hcHNob3QiLCJsYXN0UmVuZGVyZWRMb2NhdGlvbiIsImdldEN1cnJlbnRSZXN0b3JhdGlvbkRhdGEiLCJub3RpZnlBcHBsaWNhdGlvbkJlZm9yZVJlbmRlciIsImN1cnJlbnRWaXNpdCIsIm5vdGlmeUFwcGxpY2F0aW9uQWZ0ZXJSZW5kZXIiLCJub3RpZnlBcHBsaWNhdGlvbkFmdGVyUGFnZUxvYWQiLCJjbGlja0V2ZW50SXNTaWduaWZpY2FudCIsImdldFZpc2l0YWJsZUxpbmtGb3JOb2RlIiwiZ2V0VmlzaXRhYmxlTG9jYXRpb25Gb3JMaW5rIiwiYXBwbGljYXRpb25BbGxvd3NGb2xsb3dpbmdMaW5rVG9Mb2NhdGlvbiIsImdldEFjdGlvbkZvckxpbmsiLCJub3RpZnlBcHBsaWNhdGlvbkFmdGVyQ2xpY2tpbmdMaW5rVG9Mb2NhdGlvbiIsImRlZmF1bHRQcmV2ZW50ZWQiLCJub3RpZnlBcHBsaWNhdGlvbkJlZm9yZVZpc2l0aW5nTG9jYXRpb24iLCJub3RpZnlBcHBsaWNhdGlvbkFmdGVyVmlzaXRpbmdMb2NhdGlvbiIsInRpbWluZyIsImNyZWF0ZVZpc2l0IiwiaXNDb250ZW50RWRpdGFibGUiLCJhbHRLZXkiLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5Iiwibm9kZUlzVmlzaXRhYmxlIiwiX193ZWJwYWNrX2FtZF9vcHRpb25zX18iXSwibWFwcGluZ3MiOiJDQUFTLFNBQVVBLEdDcUNuQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FHQSxJQUFBQyxHQUFBRixFQUFBRCxJQUNBRSxXQUNBRSxHQUFBSixFQUNBSyxRQUFBLEVBVUEsT0FOQVAsR0FBQUUsR0FBQU0sS0FBQUgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUgsR0FHQUksRUFBQUUsUUFBQSxFQUdBRixFQUFBRCxRQXhEQSxHQUFBSyxHQUFBQyxPQUFBLFlBQ0FBLFFBQUEsc0JBQUFDLEVBQUFDLEdBSUEsSUFEQSxHQUFBVixHQUFBVyxFQUFBQyxFQUFBLEVBQUFDLEtBQ1FELEVBQUFILEVBQUFLLE9BQW9CRixJQUM1QkQsRUFBQUYsRUFBQUcs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M0IsRUFBQSxLQUFBMEMsRUFBQSxFQUFBQyxFQUFBLGtCQUFBRCxLQUFBbkMsS0FBQUosRUFBQUgsRUFBQUcsRUFBQUMsR0FBQXNDLElBQUFoQixTQUFBaUIsSUFBQXZDLEVBQUFELFFBQUF3QyxPQUF1SHBDLEtBQUFrQyxPUjBwTHQ0RSxTQUFVckMsRUFBUUQsSVMvcEx4QixTQUFBNHBDLEdBQUEzcEMsRUFBQUQsUUFBQTRwQyxJVG1xTDhCeHBDLEtBQUtKIiwiZmlsZSI6InZlbmRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4vKioqKioqLyBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gd2luZG93W1wid2VicGFja0pzb25wXCJdO1xuLyoqKioqKi8gXHR3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSBmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhjaHVua0lkcywgbW9yZU1vZHVsZXMpIHtcbi8qKioqKiovIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbi8qKioqKiovIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCBjYWxsYmFja3MgPSBbXTtcbi8qKioqKiovIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuLyoqKioqKi8gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuLyoqKioqKi8gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKVxuLyoqKioqKi8gXHRcdFx0XHRjYWxsYmFja3MucHVzaC5hcHBseShjYWxsYmFja3MsIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSk7XG4vKioqKioqLyBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbi8qKioqKiovIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4vKioqKioqLyBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGNodW5rSWRzLCBtb3JlTW9kdWxlcyk7XG4vKioqKioqLyBcdFx0d2hpbGUoY2FsbGJhY2tzLmxlbmd0aClcbi8qKioqKiovIFx0XHRcdGNhbGxiYWNrcy5zaGlmdCgpLmNhbGwobnVsbCwgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcdFx0aWYobW9yZU1vZHVsZXNbMF0pIHtcbi8qKioqKiovIFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbMF0gPSAwO1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8qKioqKiovIFx0Ly8gXCIwXCIgbWVhbnMgXCJhbHJlYWR5IGxvYWRlZFwiXG4vKioqKioqLyBcdC8vIEFycmF5IG1lYW5zIFwibG9hZGluZ1wiLCBhcnJheSBjb250YWlucyBjYWxsYmFja3Ncbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbi8qKioqKiovIFx0XHQxOjBcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLyoqKioqKi8gXHQvLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5lID0gZnVuY3Rpb24gcmVxdWlyZUVuc3VyZShjaHVua0lkLCBjYWxsYmFjaykge1xuLyoqKioqKi8gXHRcdC8vIFwiMFwiIGlzIHRoZSBzaWduYWwgZm9yIFwiYWxyZWFkeSBsb2FkZWRcIlxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9PT0gMClcbi8qKioqKiovIFx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKG51bGwsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBhbiBhcnJheSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWQpIHtcbi8qKioqKiovIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXS5wdXNoKGNhbGxiYWNrKTtcbi8qKioqKiovIFx0XHR9IGVsc2Uge1xuLyoqKioqKi8gXHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuLyoqKioqKi8gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW2NhbGxiYWNrXTtcbi8qKioqKiovIFx0XHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbi8qKioqKiovIFx0XHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbi8qKioqKiovIFx0XHRcdHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4vKioqKioqLyBcdFx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG4vKioqKioqLyBcdFx0XHRzY3JpcHQuYXN5bmMgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLmFwcC5qc1wiO1xuLyoqKioqKi8gXHRcdFx0aGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi8sXG4vKiAxICovLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHttb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIlRldGhlclwiXSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge21vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiJFwiXSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187LyohIHRldGhlciAxLjQuMCAqL1xuXHRcblx0KGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0ICBpZiAodHJ1ZSkge1xuXHQgICAgIShfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZmFjdG9yeSksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09ICdmdW5jdGlvbicgPyAoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXywgZXhwb3J0cywgbW9kdWxlKSkgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcblx0ICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICByb290LlRldGhlciA9IGZhY3RvcnkoKTtcblx0ICB9XG5cdH0odGhpcywgZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cdFxuXHR2YXIgVGV0aGVyQmFzZSA9IHVuZGVmaW5lZDtcblx0aWYgKHR5cGVvZiBUZXRoZXJCYXNlID09PSAndW5kZWZpbmVkJykge1xuXHQgIFRldGhlckJhc2UgPSB7IG1vZHVsZXM6IFtdIH07XG5cdH1cblx0XG5cdHZhciB6ZXJvRWxlbWVudCA9IG51bGw7XG5cdFxuXHQvLyBTYW1lIGFzIG5hdGl2ZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QsIGV4Y2VwdCBpdCB0YWtlcyBpbnRvIGFjY291bnQgcGFyZW50IDxmcmFtZT4gb2Zmc2V0c1xuXHQvLyBpZiB0aGUgZWxlbWVudCBsaWVzIHdpdGhpbiBhIG5lc3RlZCBkb2N1bWVudCAoPGZyYW1lPiBvciA8aWZyYW1lPi1saWtlKS5cblx0ZnVuY3Rpb24gZ2V0QWN0dWFsQm91bmRpbmdDbGllbnRSZWN0KG5vZGUpIHtcblx0ICB2YXIgYm91bmRpbmdSZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XG5cdCAgLy8gVGhlIG9yaWdpbmFsIG9iamVjdCByZXR1cm5lZCBieSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgaW1tdXRhYmxlLCBzbyB3ZSBjbG9uZSBpdFxuXHQgIC8vIFdlIGNhbid0IHVzZSBleHRlbmQgYmVjYXVzZSB0aGUgcHJvcGVydGllcyBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgb2JqZWN0IGJ5IGhhc093blByb3BlcnR5IGluIElFOVxuXHQgIHZhciByZWN0ID0ge307XG5cdCAgZm9yICh2YXIgayBpbiBib3VuZGluZ1JlY3QpIHtcblx0ICAgIHJlY3Rba10gPSBib3VuZGluZ1JlY3Rba107XG5cdCAgfVxuXHRcblx0ICBpZiAobm9kZS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCkge1xuXHQgICAgdmFyIF9mcmFtZUVsZW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZnJhbWVFbGVtZW50O1xuXHQgICAgaWYgKF9mcmFtZUVsZW1lbnQpIHtcblx0ICAgICAgdmFyIGZyYW1lUmVjdCA9IGdldEFjdHVhbEJvdW5kaW5nQ2xpZW50UmVjdChfZnJhbWVFbGVtZW50KTtcblx0ICAgICAgcmVjdC50b3AgKz0gZnJhbWVSZWN0LnRvcDtcblx0ICAgICAgcmVjdC5ib3R0b20gKz0gZnJhbWVSZWN0LnRvcDtcblx0ICAgICAgcmVjdC5sZWZ0ICs9IGZyYW1lUmVjdC5sZWZ0O1xuXHQgICAgICByZWN0LnJpZ2h0ICs9IGZyYW1lUmVjdC5sZWZ0O1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHJlY3Q7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudHMoZWwpIHtcblx0ICAvLyBJbiBmaXJlZm94IGlmIHRoZSBlbCBpcyBpbnNpZGUgYW4gaWZyYW1lIHdpdGggZGlzcGxheTogbm9uZTsgd2luZG93LmdldENvbXB1dGVkU3R5bGUoKSB3aWxsIHJldHVybiBudWxsO1xuXHQgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuXHQgIHZhciBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCkgfHwge307XG5cdCAgdmFyIHBvc2l0aW9uID0gY29tcHV0ZWRTdHlsZS5wb3NpdGlvbjtcblx0ICB2YXIgcGFyZW50cyA9IFtdO1xuXHRcblx0ICBpZiAocG9zaXRpb24gPT09ICdmaXhlZCcpIHtcblx0ICAgIHJldHVybiBbZWxdO1xuXHQgIH1cblx0XG5cdCAgdmFyIHBhcmVudCA9IGVsO1xuXHQgIHdoaWxlICgocGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGUpICYmIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgPT09IDEpIHtcblx0ICAgIHZhciBzdHlsZSA9IHVuZGVmaW5lZDtcblx0ICAgIHRyeSB7XG5cdCAgICAgIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpO1xuXHQgICAgfSBjYXRjaCAoZXJyKSB7fVxuXHRcblx0ICAgIGlmICh0eXBlb2Ygc3R5bGUgPT09ICd1bmRlZmluZWQnIHx8IHN0eWxlID09PSBudWxsKSB7XG5cdCAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xuXHQgICAgICByZXR1cm4gcGFyZW50cztcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgX3N0eWxlID0gc3R5bGU7XG5cdCAgICB2YXIgb3ZlcmZsb3cgPSBfc3R5bGUub3ZlcmZsb3c7XG5cdCAgICB2YXIgb3ZlcmZsb3dYID0gX3N0eWxlLm92ZXJmbG93WDtcblx0ICAgIHZhciBvdmVyZmxvd1kgPSBfc3R5bGUub3ZlcmZsb3dZO1xuXHRcblx0ICAgIGlmICgvKGF1dG98c2Nyb2xsKS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcblx0ICAgICAgaWYgKHBvc2l0aW9uICE9PSAnYWJzb2x1dGUnIHx8IFsncmVsYXRpdmUnLCAnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKHN0eWxlLnBvc2l0aW9uKSA+PSAwKSB7XG5cdCAgICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHBhcmVudHMucHVzaChlbC5vd25lckRvY3VtZW50LmJvZHkpO1xuXHRcblx0ICAvLyBJZiB0aGUgbm9kZSBpcyB3aXRoaW4gYSBmcmFtZSwgYWNjb3VudCBmb3IgdGhlIHBhcmVudCB3aW5kb3cgc2Nyb2xsXG5cdCAgaWYgKGVsLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50KSB7XG5cdCAgICBwYXJlbnRzLnB1c2goZWwub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldyk7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gcGFyZW50cztcblx0fVxuXHRcblx0dmFyIHVuaXF1ZUlkID0gKGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgaWQgPSAwO1xuXHQgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICByZXR1cm4gKytpZDtcblx0ICB9O1xuXHR9KSgpO1xuXHRcblx0dmFyIHplcm9Qb3NDYWNoZSA9IHt9O1xuXHR2YXIgZ2V0T3JpZ2luID0gZnVuY3Rpb24gZ2V0T3JpZ2luKCkge1xuXHQgIC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB1bmZvcnR1bmF0ZWx5IHRvbyBhY2N1cmF0ZS4gIEl0IGludHJvZHVjZXMgYSBwaXhlbCBvciB0d28gb2Zcblx0ICAvLyBqaXR0ZXIgYXMgdGhlIHVzZXIgc2Nyb2xscyB0aGF0IG1lc3NlcyB3aXRoIG91ciBhYmlsaXR5IHRvIGRldGVjdCBpZiB0d28gcG9zaXRpb25zXG5cdCAgLy8gYXJlIGVxdWl2aWxhbnQgb3Igbm90LiAgV2UgcGxhY2UgYW4gZWxlbWVudCBhdCB0aGUgdG9wIGxlZnQgb2YgdGhlIHBhZ2UgdGhhdCB3aWxsXG5cdCAgLy8gZ2V0IHRoZSBzYW1lIGppdHRlciwgc28gd2UgY2FuIGNhbmNlbCB0aGUgdHdvIG91dC5cblx0ICB2YXIgbm9kZSA9IHplcm9FbGVtZW50O1xuXHQgIGlmICghbm9kZSB8fCAhZG9jdW1lbnQuYm9keS5jb250YWlucyhub2RlKSkge1xuXHQgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHQgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGV0aGVyLWlkJywgdW5pcXVlSWQoKSk7XG5cdCAgICBleHRlbmQobm9kZS5zdHlsZSwge1xuXHQgICAgICB0b3A6IDAsXG5cdCAgICAgIGxlZnQ6IDAsXG5cdCAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG5cdCAgICB9KTtcblx0XG5cdCAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vZGUpO1xuXHRcblx0ICAgIHplcm9FbGVtZW50ID0gbm9kZTtcblx0ICB9XG5cdFxuXHQgIHZhciBpZCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRldGhlci1pZCcpO1xuXHQgIGlmICh0eXBlb2YgemVyb1Bvc0NhY2hlW2lkXSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIHplcm9Qb3NDYWNoZVtpZF0gPSBnZXRBY3R1YWxCb3VuZGluZ0NsaWVudFJlY3Qobm9kZSk7XG5cdFxuXHQgICAgLy8gQ2xlYXIgdGhlIGNhY2hlIHdoZW4gdGhpcyBwb3NpdGlvbiBjYWxsIGlzIGRvbmVcblx0ICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgZGVsZXRlIHplcm9Qb3NDYWNoZVtpZF07XG5cdCAgICB9KTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiB6ZXJvUG9zQ2FjaGVbaWRdO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gcmVtb3ZlVXRpbEVsZW1lbnRzKCkge1xuXHQgIGlmICh6ZXJvRWxlbWVudCkge1xuXHQgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh6ZXJvRWxlbWVudCk7XG5cdCAgfVxuXHQgIHplcm9FbGVtZW50ID0gbnVsbDtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGdldEJvdW5kcyhlbCkge1xuXHQgIHZhciBkb2MgPSB1bmRlZmluZWQ7XG5cdCAgaWYgKGVsID09PSBkb2N1bWVudCkge1xuXHQgICAgZG9jID0gZG9jdW1lbnQ7XG5cdCAgICBlbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ICB9IGVsc2Uge1xuXHQgICAgZG9jID0gZWwub3duZXJEb2N1bWVudDtcblx0ICB9XG5cdFxuXHQgIHZhciBkb2NFbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFxuXHQgIHZhciBib3ggPSBnZXRBY3R1YWxCb3VuZGluZ0NsaWVudFJlY3QoZWwpO1xuXHRcblx0ICB2YXIgb3JpZ2luID0gZ2V0T3JpZ2luKCk7XG5cdFxuXHQgIGJveC50b3AgLT0gb3JpZ2luLnRvcDtcblx0ICBib3gubGVmdCAtPSBvcmlnaW4ubGVmdDtcblx0XG5cdCAgaWYgKHR5cGVvZiBib3gud2lkdGggPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICBib3gud2lkdGggPSBkb2N1bWVudC5ib2R5LnNjcm9sbFdpZHRoIC0gYm94LmxlZnQgLSBib3gucmlnaHQ7XG5cdCAgfVxuXHQgIGlmICh0eXBlb2YgYm94LmhlaWdodCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIGJveC5oZWlnaHQgPSBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCAtIGJveC50b3AgLSBib3guYm90dG9tO1xuXHQgIH1cblx0XG5cdCAgYm94LnRvcCA9IGJveC50b3AgLSBkb2NFbC5jbGllbnRUb3A7XG5cdCAgYm94LmxlZnQgPSBib3gubGVmdCAtIGRvY0VsLmNsaWVudExlZnQ7XG5cdCAgYm94LnJpZ2h0ID0gZG9jLmJvZHkuY2xpZW50V2lkdGggLSBib3gud2lkdGggLSBib3gubGVmdDtcblx0ICBib3guYm90dG9tID0gZG9jLmJvZHkuY2xpZW50SGVpZ2h0IC0gYm94LmhlaWdodCAtIGJveC50b3A7XG5cdFxuXHQgIHJldHVybiBib3g7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbCkge1xuXHQgIHJldHVybiBlbC5vZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHR9XG5cdFxuXHR2YXIgX3Njcm9sbEJhclNpemUgPSBudWxsO1xuXHRmdW5jdGlvbiBnZXRTY3JvbGxCYXJTaXplKCkge1xuXHQgIGlmIChfc2Nyb2xsQmFyU2l6ZSkge1xuXHQgICAgcmV0dXJuIF9zY3JvbGxCYXJTaXplO1xuXHQgIH1cblx0ICB2YXIgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICBpbm5lci5zdHlsZS53aWR0aCA9ICcxMDAlJztcblx0ICBpbm5lci5zdHlsZS5oZWlnaHQgPSAnMjAwcHgnO1xuXHRcblx0ICB2YXIgb3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICBleHRlbmQob3V0ZXIuc3R5bGUsIHtcblx0ICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuXHQgICAgdG9wOiAwLFxuXHQgICAgbGVmdDogMCxcblx0ICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcblx0ICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuXHQgICAgd2lkdGg6ICcyMDBweCcsXG5cdCAgICBoZWlnaHQ6ICcxNTBweCcsXG5cdCAgICBvdmVyZmxvdzogJ2hpZGRlbidcblx0ICB9KTtcblx0XG5cdCAgb3V0ZXIuYXBwZW5kQ2hpbGQoaW5uZXIpO1xuXHRcblx0ICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG91dGVyKTtcblx0XG5cdCAgdmFyIHdpZHRoQ29udGFpbmVkID0gaW5uZXIub2Zmc2V0V2lkdGg7XG5cdCAgb3V0ZXIuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcblx0ICB2YXIgd2lkdGhTY3JvbGwgPSBpbm5lci5vZmZzZXRXaWR0aDtcblx0XG5cdCAgaWYgKHdpZHRoQ29udGFpbmVkID09PSB3aWR0aFNjcm9sbCkge1xuXHQgICAgd2lkdGhTY3JvbGwgPSBvdXRlci5jbGllbnRXaWR0aDtcblx0ICB9XG5cdFxuXHQgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3V0ZXIpO1xuXHRcblx0ICB2YXIgd2lkdGggPSB3aWR0aENvbnRhaW5lZCAtIHdpZHRoU2Nyb2xsO1xuXHRcblx0ICBfc2Nyb2xsQmFyU2l6ZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IHdpZHRoIH07XG5cdCAgcmV0dXJuIF9zY3JvbGxCYXJTaXplO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBleHRlbmQoKSB7XG5cdCAgdmFyIG91dCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXHRcblx0ICB2YXIgYXJncyA9IFtdO1xuXHRcblx0ICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuXHRcblx0ICBhcmdzLnNsaWNlKDEpLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuXHQgICAgaWYgKG9iaikge1xuXHQgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdCAgICAgICAgaWYgKCh7fSkuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcblx0ICAgICAgICAgIG91dFtrZXldID0gb2JqW2tleV07XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSk7XG5cdFxuXHQgIHJldHVybiBvdXQ7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsLCBuYW1lKSB7XG5cdCAgaWYgKHR5cGVvZiBlbC5jbGFzc0xpc3QgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICBuYW1lLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7XG5cdCAgICAgIGlmIChjbHMudHJpbSgpKSB7XG5cdCAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnKF58ICknICsgbmFtZS5zcGxpdCgnICcpLmpvaW4oJ3wnKSArICcoIHwkKScsICdnaScpO1xuXHQgICAgdmFyIGNsYXNzTmFtZSA9IGdldENsYXNzTmFtZShlbCkucmVwbGFjZShyZWdleCwgJyAnKTtcblx0ICAgIHNldENsYXNzTmFtZShlbCwgY2xhc3NOYW1lKTtcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFkZENsYXNzKGVsLCBuYW1lKSB7XG5cdCAgaWYgKHR5cGVvZiBlbC5jbGFzc0xpc3QgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICBuYW1lLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7XG5cdCAgICAgIGlmIChjbHMudHJpbSgpKSB7XG5cdCAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcmVtb3ZlQ2xhc3MoZWwsIG5hbWUpO1xuXHQgICAgdmFyIGNscyA9IGdldENsYXNzTmFtZShlbCkgKyAoJyAnICsgbmFtZSk7XG5cdCAgICBzZXRDbGFzc05hbWUoZWwsIGNscyk7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBoYXNDbGFzcyhlbCwgbmFtZSkge1xuXHQgIGlmICh0eXBlb2YgZWwuY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgcmV0dXJuIGVsLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKTtcblx0ICB9XG5cdCAgdmFyIGNsYXNzTmFtZSA9IGdldENsYXNzTmFtZShlbCk7XG5cdCAgcmV0dXJuIG5ldyBSZWdFeHAoJyhefCApJyArIG5hbWUgKyAnKCB8JCknLCAnZ2knKS50ZXN0KGNsYXNzTmFtZSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldENsYXNzTmFtZShlbCkge1xuXHQgIC8vIENhbid0IHVzZSBqdXN0IFNWR0FuaW1hdGVkU3RyaW5nIGhlcmUgc2luY2Ugbm9kZXMgd2l0aGluIGEgRnJhbWUgaW4gSUUgaGF2ZVxuXHQgIC8vIGNvbXBsZXRlbHkgc2VwYXJhdGVseSBTVkdBbmltYXRlZFN0cmluZyBiYXNlIGNsYXNzZXNcblx0ICBpZiAoZWwuY2xhc3NOYW1lIGluc3RhbmNlb2YgZWwub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5TVkdBbmltYXRlZFN0cmluZykge1xuXHQgICAgcmV0dXJuIGVsLmNsYXNzTmFtZS5iYXNlVmFsO1xuXHQgIH1cblx0ICByZXR1cm4gZWwuY2xhc3NOYW1lO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBzZXRDbGFzc05hbWUoZWwsIGNsYXNzTmFtZSkge1xuXHQgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbGFzc05hbWUpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiB1cGRhdGVDbGFzc2VzKGVsLCBhZGQsIGFsbCkge1xuXHQgIC8vIE9mIHRoZSBzZXQgb2YgJ2FsbCcgY2xhc3Nlcywgd2UgbmVlZCB0aGUgJ2FkZCcgY2xhc3NlcywgYW5kIG9ubHkgdGhlXG5cdCAgLy8gJ2FkZCcgY2xhc3NlcyB0byBiZSBzZXQuXG5cdCAgYWxsLmZvckVhY2goZnVuY3Rpb24gKGNscykge1xuXHQgICAgaWYgKGFkZC5pbmRleE9mKGNscykgPT09IC0xICYmIGhhc0NsYXNzKGVsLCBjbHMpKSB7XG5cdCAgICAgIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHRcblx0ICBhZGQuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7XG5cdCAgICBpZiAoIWhhc0NsYXNzKGVsLCBjbHMpKSB7XG5cdCAgICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHR9XG5cdFxuXHR2YXIgZGVmZXJyZWQgPSBbXTtcblx0XG5cdHZhciBkZWZlciA9IGZ1bmN0aW9uIGRlZmVyKGZuKSB7XG5cdCAgZGVmZXJyZWQucHVzaChmbik7XG5cdH07XG5cdFxuXHR2YXIgZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcblx0ICB2YXIgZm4gPSB1bmRlZmluZWQ7XG5cdCAgd2hpbGUgKGZuID0gZGVmZXJyZWQucG9wKCkpIHtcblx0ICAgIGZuKCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0dmFyIEV2ZW50ZWQgPSAoZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIEV2ZW50ZWQoKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRlZCk7XG5cdCAgfVxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoRXZlbnRlZCwgW3tcblx0ICAgIGtleTogJ29uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgaGFuZGxlciwgY3R4KSB7XG5cdCAgICAgIHZhciBvbmNlID0gYXJndW1lbnRzLmxlbmd0aCA8PSAzIHx8IGFyZ3VtZW50c1szXSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBhcmd1bWVudHNbM107XG5cdFxuXHQgICAgICBpZiAodHlwZW9mIHRoaXMuYmluZGluZ3MgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgdGhpcy5iaW5kaW5ncyA9IHt9O1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kaW5nc1tldmVudF0gPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgdGhpcy5iaW5kaW5nc1tldmVudF0gPSBbXTtcblx0ICAgICAgfVxuXHQgICAgICB0aGlzLmJpbmRpbmdzW2V2ZW50XS5wdXNoKHsgaGFuZGxlcjogaGFuZGxlciwgY3R4OiBjdHgsIG9uY2U6IG9uY2UgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnb25jZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gb25jZShldmVudCwgaGFuZGxlciwgY3R4KSB7XG5cdCAgICAgIHRoaXMub24oZXZlbnQsIGhhbmRsZXIsIGN0eCwgdHJ1ZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnb2ZmJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBvZmYoZXZlbnQsIGhhbmRsZXIpIHtcblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRpbmdzID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdGhpcy5iaW5kaW5nc1tldmVudF0gPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgZGVsZXRlIHRoaXMuYmluZGluZ3NbZXZlbnRdO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHZhciBpID0gMDtcblx0ICAgICAgICB3aGlsZSAoaSA8IHRoaXMuYmluZGluZ3NbZXZlbnRdLmxlbmd0aCkge1xuXHQgICAgICAgICAgaWYgKHRoaXMuYmluZGluZ3NbZXZlbnRdW2ldLmhhbmRsZXIgPT09IGhhbmRsZXIpIHtcblx0ICAgICAgICAgICAgdGhpcy5iaW5kaW5nc1tldmVudF0uc3BsaWNlKGksIDEpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgKytpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3RyaWdnZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRyaWdnZXIoZXZlbnQpIHtcblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRpbmdzICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmJpbmRpbmdzW2V2ZW50XSkge1xuXHQgICAgICAgIHZhciBpID0gMDtcblx0XG5cdCAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG5cdCAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHdoaWxlIChpIDwgdGhpcy5iaW5kaW5nc1tldmVudF0ubGVuZ3RoKSB7XG5cdCAgICAgICAgICB2YXIgX2JpbmRpbmdzJGV2ZW50JGkgPSB0aGlzLmJpbmRpbmdzW2V2ZW50XVtpXTtcblx0ICAgICAgICAgIHZhciBoYW5kbGVyID0gX2JpbmRpbmdzJGV2ZW50JGkuaGFuZGxlcjtcblx0ICAgICAgICAgIHZhciBjdHggPSBfYmluZGluZ3MkZXZlbnQkaS5jdHg7XG5cdCAgICAgICAgICB2YXIgb25jZSA9IF9iaW5kaW5ncyRldmVudCRpLm9uY2U7XG5cdFxuXHQgICAgICAgICAgdmFyIGNvbnRleHQgPSBjdHg7XG5cdCAgICAgICAgICBpZiAodHlwZW9mIGNvbnRleHQgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzO1xuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIGhhbmRsZXIuYXBwbHkoY29udGV4dCwgYXJncyk7XG5cdFxuXHQgICAgICAgICAgaWYgKG9uY2UpIHtcblx0ICAgICAgICAgICAgdGhpcy5iaW5kaW5nc1tldmVudF0uc3BsaWNlKGksIDEpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgKytpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIEV2ZW50ZWQ7XG5cdH0pKCk7XG5cdFxuXHRUZXRoZXJCYXNlLlV0aWxzID0ge1xuXHQgIGdldEFjdHVhbEJvdW5kaW5nQ2xpZW50UmVjdDogZ2V0QWN0dWFsQm91bmRpbmdDbGllbnRSZWN0LFxuXHQgIGdldFNjcm9sbFBhcmVudHM6IGdldFNjcm9sbFBhcmVudHMsXG5cdCAgZ2V0Qm91bmRzOiBnZXRCb3VuZHMsXG5cdCAgZ2V0T2Zmc2V0UGFyZW50OiBnZXRPZmZzZXRQYXJlbnQsXG5cdCAgZXh0ZW5kOiBleHRlbmQsXG5cdCAgYWRkQ2xhc3M6IGFkZENsYXNzLFxuXHQgIHJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcyxcblx0ICBoYXNDbGFzczogaGFzQ2xhc3MsXG5cdCAgdXBkYXRlQ2xhc3NlczogdXBkYXRlQ2xhc3Nlcyxcblx0ICBkZWZlcjogZGVmZXIsXG5cdCAgZmx1c2g6IGZsdXNoLFxuXHQgIHVuaXF1ZUlkOiB1bmlxdWVJZCxcblx0ICBFdmVudGVkOiBFdmVudGVkLFxuXHQgIGdldFNjcm9sbEJhclNpemU6IGdldFNjcm9sbEJhclNpemUsXG5cdCAgcmVtb3ZlVXRpbEVsZW1lbnRzOiByZW1vdmVVdGlsRWxlbWVudHNcblx0fTtcblx0LyogZ2xvYmFscyBUZXRoZXJCYXNlLCBwZXJmb3JtYW5jZSAqL1xuXHRcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF9zbGljZWRUb0FycmF5ID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbJ3JldHVybiddKSBfaVsncmV0dXJuJ10oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZScpOyB9IH07IH0pKCk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXHRcblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3g2LCBfeDcsIF94OCkgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeDYsIHByb3BlcnR5ID0gX3g3LCByZWNlaXZlciA9IF94ODsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeDYgPSBwYXJlbnQ7IF94NyA9IHByb3BlcnR5OyBfeDggPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0aWYgKHR5cGVvZiBUZXRoZXJCYXNlID09PSAndW5kZWZpbmVkJykge1xuXHQgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgaW5jbHVkZSB0aGUgdXRpbHMuanMgZmlsZSBiZWZvcmUgdGV0aGVyLmpzJyk7XG5cdH1cblx0XG5cdHZhciBfVGV0aGVyQmFzZSRVdGlscyA9IFRldGhlckJhc2UuVXRpbHM7XG5cdHZhciBnZXRTY3JvbGxQYXJlbnRzID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0U2Nyb2xsUGFyZW50cztcblx0dmFyIGdldEJvdW5kcyA9IF9UZXRoZXJCYXNlJFV0aWxzLmdldEJvdW5kcztcblx0dmFyIGdldE9mZnNldFBhcmVudCA9IF9UZXRoZXJCYXNlJFV0aWxzLmdldE9mZnNldFBhcmVudDtcblx0dmFyIGV4dGVuZCA9IF9UZXRoZXJCYXNlJFV0aWxzLmV4dGVuZDtcblx0dmFyIGFkZENsYXNzID0gX1RldGhlckJhc2UkVXRpbHMuYWRkQ2xhc3M7XG5cdHZhciByZW1vdmVDbGFzcyA9IF9UZXRoZXJCYXNlJFV0aWxzLnJlbW92ZUNsYXNzO1xuXHR2YXIgdXBkYXRlQ2xhc3NlcyA9IF9UZXRoZXJCYXNlJFV0aWxzLnVwZGF0ZUNsYXNzZXM7XG5cdHZhciBkZWZlciA9IF9UZXRoZXJCYXNlJFV0aWxzLmRlZmVyO1xuXHR2YXIgZmx1c2ggPSBfVGV0aGVyQmFzZSRVdGlscy5mbHVzaDtcblx0dmFyIGdldFNjcm9sbEJhclNpemUgPSBfVGV0aGVyQmFzZSRVdGlscy5nZXRTY3JvbGxCYXJTaXplO1xuXHR2YXIgcmVtb3ZlVXRpbEVsZW1lbnRzID0gX1RldGhlckJhc2UkVXRpbHMucmVtb3ZlVXRpbEVsZW1lbnRzO1xuXHRcblx0ZnVuY3Rpb24gd2l0aGluKGEsIGIpIHtcblx0ICB2YXIgZGlmZiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IDEgOiBhcmd1bWVudHNbMl07XG5cdFxuXHQgIHJldHVybiBhICsgZGlmZiA+PSBiICYmIGIgPj0gYSAtIGRpZmY7XG5cdH1cblx0XG5cdHZhciB0cmFuc2Zvcm1LZXkgPSAoZnVuY3Rpb24gKCkge1xuXHQgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICByZXR1cm4gJyc7XG5cdCAgfVxuXHQgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcblx0ICB2YXIgdHJhbnNmb3JtcyA9IFsndHJhbnNmb3JtJywgJ1dlYmtpdFRyYW5zZm9ybScsICdPVHJhbnNmb3JtJywgJ01velRyYW5zZm9ybScsICdtc1RyYW5zZm9ybSddO1xuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7ICsraSkge1xuXHQgICAgdmFyIGtleSA9IHRyYW5zZm9ybXNbaV07XG5cdCAgICBpZiAoZWwuc3R5bGVba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIHJldHVybiBrZXk7XG5cdCAgICB9XG5cdCAgfVxuXHR9KSgpO1xuXHRcblx0dmFyIHRldGhlcnMgPSBbXTtcblx0XG5cdHZhciBwb3NpdGlvbiA9IGZ1bmN0aW9uIHBvc2l0aW9uKCkge1xuXHQgIHRldGhlcnMuZm9yRWFjaChmdW5jdGlvbiAodGV0aGVyKSB7XG5cdCAgICB0ZXRoZXIucG9zaXRpb24oZmFsc2UpO1xuXHQgIH0pO1xuXHQgIGZsdXNoKCk7XG5cdH07XG5cdFxuXHRmdW5jdGlvbiBub3coKSB7XG5cdCAgaWYgKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcblx0ICB9XG5cdCAgcmV0dXJuICtuZXcgRGF0ZSgpO1xuXHR9XG5cdFxuXHQoZnVuY3Rpb24gKCkge1xuXHQgIHZhciBsYXN0Q2FsbCA9IG51bGw7XG5cdCAgdmFyIGxhc3REdXJhdGlvbiA9IG51bGw7XG5cdCAgdmFyIHBlbmRpbmdUaW1lb3V0ID0gbnVsbDtcblx0XG5cdCAgdmFyIHRpY2sgPSBmdW5jdGlvbiB0aWNrKCkge1xuXHQgICAgaWYgKHR5cGVvZiBsYXN0RHVyYXRpb24gIT09ICd1bmRlZmluZWQnICYmIGxhc3REdXJhdGlvbiA+IDE2KSB7XG5cdCAgICAgIC8vIFdlIHZvbHVudGFyaWx5IHRocm90dGxlIG91cnNlbHZlcyBpZiB3ZSBjYW4ndCBtYW5hZ2UgNjBmcHNcblx0ICAgICAgbGFzdER1cmF0aW9uID0gTWF0aC5taW4obGFzdER1cmF0aW9uIC0gMTYsIDI1MCk7XG5cdFxuXHQgICAgICAvLyBKdXN0IGluIGNhc2UgdGhpcyBpcyB0aGUgbGFzdCBldmVudCwgcmVtZW1iZXIgdG8gcG9zaXRpb24ganVzdCBvbmNlIG1vcmVcblx0ICAgICAgcGVuZGluZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KHRpY2ssIDI1MCk7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAodHlwZW9mIGxhc3RDYWxsICE9PSAndW5kZWZpbmVkJyAmJiBub3coKSAtIGxhc3RDYWxsIDwgMTApIHtcblx0ICAgICAgLy8gU29tZSBicm93c2VycyBjYWxsIGV2ZW50cyBhIGxpdHRsZSB0b28gZnJlcXVlbnRseSwgcmVmdXNlIHRvIHJ1biBtb3JlIHRoYW4gaXMgcmVhc29uYWJsZVxuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHBlbmRpbmdUaW1lb3V0ICE9IG51bGwpIHtcblx0ICAgICAgY2xlYXJUaW1lb3V0KHBlbmRpbmdUaW1lb3V0KTtcblx0ICAgICAgcGVuZGluZ1RpbWVvdXQgPSBudWxsO1xuXHQgICAgfVxuXHRcblx0ICAgIGxhc3RDYWxsID0gbm93KCk7XG5cdCAgICBwb3NpdGlvbigpO1xuXHQgICAgbGFzdER1cmF0aW9uID0gbm93KCkgLSBsYXN0Q2FsbDtcblx0ICB9O1xuXHRcblx0ICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgWydyZXNpemUnLCAnc2Nyb2xsJywgJ3RvdWNobW92ZSddLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCB0aWNrKTtcblx0ICAgIH0pO1xuXHQgIH1cblx0fSkoKTtcblx0XG5cdHZhciBNSVJST1JfTFIgPSB7XG5cdCAgY2VudGVyOiAnY2VudGVyJyxcblx0ICBsZWZ0OiAncmlnaHQnLFxuXHQgIHJpZ2h0OiAnbGVmdCdcblx0fTtcblx0XG5cdHZhciBNSVJST1JfVEIgPSB7XG5cdCAgbWlkZGxlOiAnbWlkZGxlJyxcblx0ICB0b3A6ICdib3R0b20nLFxuXHQgIGJvdHRvbTogJ3RvcCdcblx0fTtcblx0XG5cdHZhciBPRkZTRVRfTUFQID0ge1xuXHQgIHRvcDogMCxcblx0ICBsZWZ0OiAwLFxuXHQgIG1pZGRsZTogJzUwJScsXG5cdCAgY2VudGVyOiAnNTAlJyxcblx0ICBib3R0b206ICcxMDAlJyxcblx0ICByaWdodDogJzEwMCUnXG5cdH07XG5cdFxuXHR2YXIgYXV0b1RvRml4ZWRBdHRhY2htZW50ID0gZnVuY3Rpb24gYXV0b1RvRml4ZWRBdHRhY2htZW50KGF0dGFjaG1lbnQsIHJlbGF0aXZlVG9BdHRhY2htZW50KSB7XG5cdCAgdmFyIGxlZnQgPSBhdHRhY2htZW50LmxlZnQ7XG5cdCAgdmFyIHRvcCA9IGF0dGFjaG1lbnQudG9wO1xuXHRcblx0ICBpZiAobGVmdCA9PT0gJ2F1dG8nKSB7XG5cdCAgICBsZWZ0ID0gTUlSUk9SX0xSW3JlbGF0aXZlVG9BdHRhY2htZW50LmxlZnRdO1xuXHQgIH1cblx0XG5cdCAgaWYgKHRvcCA9PT0gJ2F1dG8nKSB7XG5cdCAgICB0b3AgPSBNSVJST1JfVEJbcmVsYXRpdmVUb0F0dGFjaG1lbnQudG9wXTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiB7IGxlZnQ6IGxlZnQsIHRvcDogdG9wIH07XG5cdH07XG5cdFxuXHR2YXIgYXR0YWNobWVudFRvT2Zmc2V0ID0gZnVuY3Rpb24gYXR0YWNobWVudFRvT2Zmc2V0KGF0dGFjaG1lbnQpIHtcblx0ICB2YXIgbGVmdCA9IGF0dGFjaG1lbnQubGVmdDtcblx0ICB2YXIgdG9wID0gYXR0YWNobWVudC50b3A7XG5cdFxuXHQgIGlmICh0eXBlb2YgT0ZGU0VUX01BUFthdHRhY2htZW50LmxlZnRdICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgbGVmdCA9IE9GRlNFVF9NQVBbYXR0YWNobWVudC5sZWZ0XTtcblx0ICB9XG5cdFxuXHQgIGlmICh0eXBlb2YgT0ZGU0VUX01BUFthdHRhY2htZW50LnRvcF0gIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICB0b3AgPSBPRkZTRVRfTUFQW2F0dGFjaG1lbnQudG9wXTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiB7IGxlZnQ6IGxlZnQsIHRvcDogdG9wIH07XG5cdH07XG5cdFxuXHRmdW5jdGlvbiBhZGRPZmZzZXQoKSB7XG5cdCAgdmFyIG91dCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFxuXHQgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBvZmZzZXRzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG5cdCAgICBvZmZzZXRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuXHQgIH1cblx0XG5cdCAgb2Zmc2V0cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG5cdCAgICB2YXIgdG9wID0gX3JlZi50b3A7XG5cdCAgICB2YXIgbGVmdCA9IF9yZWYubGVmdDtcblx0XG5cdCAgICBpZiAodHlwZW9mIHRvcCA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgdG9wID0gcGFyc2VGbG9hdCh0b3AsIDEwKTtcblx0ICAgIH1cblx0ICAgIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgbGVmdCA9IHBhcnNlRmxvYXQobGVmdCwgMTApO1xuXHQgICAgfVxuXHRcblx0ICAgIG91dC50b3AgKz0gdG9wO1xuXHQgICAgb3V0LmxlZnQgKz0gbGVmdDtcblx0ICB9KTtcblx0XG5cdCAgcmV0dXJuIG91dDtcblx0fVxuXHRcblx0ZnVuY3Rpb24gb2Zmc2V0VG9QeChvZmZzZXQsIHNpemUpIHtcblx0ICBpZiAodHlwZW9mIG9mZnNldC5sZWZ0ID09PSAnc3RyaW5nJyAmJiBvZmZzZXQubGVmdC5pbmRleE9mKCclJykgIT09IC0xKSB7XG5cdCAgICBvZmZzZXQubGVmdCA9IHBhcnNlRmxvYXQob2Zmc2V0LmxlZnQsIDEwKSAvIDEwMCAqIHNpemUud2lkdGg7XG5cdCAgfVxuXHQgIGlmICh0eXBlb2Ygb2Zmc2V0LnRvcCA9PT0gJ3N0cmluZycgJiYgb2Zmc2V0LnRvcC5pbmRleE9mKCclJykgIT09IC0xKSB7XG5cdCAgICBvZmZzZXQudG9wID0gcGFyc2VGbG9hdChvZmZzZXQudG9wLCAxMCkgLyAxMDAgKiBzaXplLmhlaWdodDtcblx0ICB9XG5cdFxuXHQgIHJldHVybiBvZmZzZXQ7XG5cdH1cblx0XG5cdHZhciBwYXJzZU9mZnNldCA9IGZ1bmN0aW9uIHBhcnNlT2Zmc2V0KHZhbHVlKSB7XG5cdCAgdmFyIF92YWx1ZSRzcGxpdCA9IHZhbHVlLnNwbGl0KCcgJyk7XG5cdFxuXHQgIHZhciBfdmFsdWUkc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX3ZhbHVlJHNwbGl0LCAyKTtcblx0XG5cdCAgdmFyIHRvcCA9IF92YWx1ZSRzcGxpdDJbMF07XG5cdCAgdmFyIGxlZnQgPSBfdmFsdWUkc3BsaXQyWzFdO1xuXHRcblx0ICByZXR1cm4geyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9O1xuXHR9O1xuXHR2YXIgcGFyc2VBdHRhY2htZW50ID0gcGFyc2VPZmZzZXQ7XG5cdFxuXHR2YXIgVGV0aGVyQ2xhc3MgPSAoZnVuY3Rpb24gKF9FdmVudGVkKSB7XG5cdCAgX2luaGVyaXRzKFRldGhlckNsYXNzLCBfRXZlbnRlZCk7XG5cdFxuXHQgIGZ1bmN0aW9uIFRldGhlckNsYXNzKG9wdGlvbnMpIHtcblx0ICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdFxuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRldGhlckNsYXNzKTtcblx0XG5cdCAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihUZXRoZXJDbGFzcy5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMpO1xuXHQgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24uYmluZCh0aGlzKTtcblx0XG5cdCAgICB0ZXRoZXJzLnB1c2godGhpcyk7XG5cdFxuXHQgICAgdGhpcy5oaXN0b3J5ID0gW107XG5cdFxuXHQgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMsIGZhbHNlKTtcblx0XG5cdCAgICBUZXRoZXJCYXNlLm1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlKSB7XG5cdCAgICAgIGlmICh0eXBlb2YgbW9kdWxlLmluaXRpYWxpemUgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgbW9kdWxlLmluaXRpYWxpemUuY2FsbChfdGhpcyk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHRcblx0ICAgIHRoaXMucG9zaXRpb24oKTtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhUZXRoZXJDbGFzcywgW3tcblx0ICAgIGtleTogJ2dldENsYXNzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDbGFzcygpIHtcblx0ICAgICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/ICcnIDogYXJndW1lbnRzWzBdO1xuXHQgICAgICB2YXIgY2xhc3NlcyA9IHRoaXMub3B0aW9ucy5jbGFzc2VzO1xuXHRcblx0ICAgICAgaWYgKHR5cGVvZiBjbGFzc2VzICE9PSAndW5kZWZpbmVkJyAmJiBjbGFzc2VzW2tleV0pIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNsYXNzZXNba2V5XTtcblx0ICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuY2xhc3NQcmVmaXgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNsYXNzUHJlZml4ICsgJy0nICsga2V5O1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBrZXk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzZXRPcHRpb25zJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcblx0ICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHQgICAgICB2YXIgcG9zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGFyZ3VtZW50c1sxXTtcblx0XG5cdCAgICAgIHZhciBkZWZhdWx0cyA9IHtcblx0ICAgICAgICBvZmZzZXQ6ICcwIDAnLFxuXHQgICAgICAgIHRhcmdldE9mZnNldDogJzAgMCcsXG5cdCAgICAgICAgdGFyZ2V0QXR0YWNobWVudDogJ2F1dG8gYXV0bycsXG5cdCAgICAgICAgY2xhc3NQcmVmaXg6ICd0ZXRoZXInXG5cdCAgICAgIH07XG5cdFxuXHQgICAgICB0aGlzLm9wdGlvbnMgPSBleHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuXHRcblx0ICAgICAgdmFyIF9vcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXHQgICAgICB2YXIgZWxlbWVudCA9IF9vcHRpb25zLmVsZW1lbnQ7XG5cdCAgICAgIHZhciB0YXJnZXQgPSBfb3B0aW9ucy50YXJnZXQ7XG5cdCAgICAgIHZhciB0YXJnZXRNb2RpZmllciA9IF9vcHRpb25zLnRhcmdldE1vZGlmaWVyO1xuXHRcblx0ICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcblx0ICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG5cdCAgICAgIHRoaXMudGFyZ2V0TW9kaWZpZXIgPSB0YXJnZXRNb2RpZmllcjtcblx0XG5cdCAgICAgIGlmICh0aGlzLnRhcmdldCA9PT0gJ3ZpZXdwb3J0Jykge1xuXHQgICAgICAgIHRoaXMudGFyZ2V0ID0gZG9jdW1lbnQuYm9keTtcblx0ICAgICAgICB0aGlzLnRhcmdldE1vZGlmaWVyID0gJ3Zpc2libGUnO1xuXHQgICAgICB9IGVsc2UgaWYgKHRoaXMudGFyZ2V0ID09PSAnc2Nyb2xsLWhhbmRsZScpIHtcblx0ICAgICAgICB0aGlzLnRhcmdldCA9IGRvY3VtZW50LmJvZHk7XG5cdCAgICAgICAgdGhpcy50YXJnZXRNb2RpZmllciA9ICdzY3JvbGwtaGFuZGxlJztcblx0ICAgICAgfVxuXHRcblx0ICAgICAgWydlbGVtZW50JywgJ3RhcmdldCddLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICAgIGlmICh0eXBlb2YgX3RoaXMyW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RldGhlciBFcnJvcjogQm90aCBlbGVtZW50IGFuZCB0YXJnZXQgbXVzdCBiZSBkZWZpbmVkJyk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAodHlwZW9mIF90aGlzMltrZXldLmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgIF90aGlzMltrZXldID0gX3RoaXMyW2tleV1bMF07XG5cdCAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgX3RoaXMyW2tleV0gPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICBfdGhpczJba2V5XSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoX3RoaXMyW2tleV0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICBhZGRDbGFzcyh0aGlzLmVsZW1lbnQsIHRoaXMuZ2V0Q2xhc3MoJ2VsZW1lbnQnKSk7XG5cdCAgICAgIGlmICghKHRoaXMub3B0aW9ucy5hZGRUYXJnZXRDbGFzc2VzID09PSBmYWxzZSkpIHtcblx0ICAgICAgICBhZGRDbGFzcyh0aGlzLnRhcmdldCwgdGhpcy5nZXRDbGFzcygndGFyZ2V0JykpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoIXRoaXMub3B0aW9ucy5hdHRhY2htZW50KSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXRoZXIgRXJyb3I6IFlvdSBtdXN0IHByb3ZpZGUgYW4gYXR0YWNobWVudCcpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLnRhcmdldEF0dGFjaG1lbnQgPSBwYXJzZUF0dGFjaG1lbnQodGhpcy5vcHRpb25zLnRhcmdldEF0dGFjaG1lbnQpO1xuXHQgICAgICB0aGlzLmF0dGFjaG1lbnQgPSBwYXJzZUF0dGFjaG1lbnQodGhpcy5vcHRpb25zLmF0dGFjaG1lbnQpO1xuXHQgICAgICB0aGlzLm9mZnNldCA9IHBhcnNlT2Zmc2V0KHRoaXMub3B0aW9ucy5vZmZzZXQpO1xuXHQgICAgICB0aGlzLnRhcmdldE9mZnNldCA9IHBhcnNlT2Zmc2V0KHRoaXMub3B0aW9ucy50YXJnZXRPZmZzZXQpO1xuXHRcblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLnNjcm9sbFBhcmVudHMgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh0aGlzLnRhcmdldE1vZGlmaWVyID09PSAnc2Nyb2xsLWhhbmRsZScpIHtcblx0ICAgICAgICB0aGlzLnNjcm9sbFBhcmVudHMgPSBbdGhpcy50YXJnZXRdO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMuc2Nyb2xsUGFyZW50cyA9IGdldFNjcm9sbFBhcmVudHModGhpcy50YXJnZXQpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoISh0aGlzLm9wdGlvbnMuZW5hYmxlZCA9PT0gZmFsc2UpKSB7XG5cdCAgICAgICAgdGhpcy5lbmFibGUocG9zKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFRhcmdldEJvdW5kcycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGFyZ2V0Qm91bmRzKCkge1xuXHQgICAgICBpZiAodHlwZW9mIHRoaXMudGFyZ2V0TW9kaWZpZXIgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgaWYgKHRoaXMudGFyZ2V0TW9kaWZpZXIgPT09ICd2aXNpYmxlJykge1xuXHQgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5KSB7XG5cdCAgICAgICAgICAgIHJldHVybiB7IHRvcDogcGFnZVlPZmZzZXQsIGxlZnQ6IHBhZ2VYT2Zmc2V0LCBoZWlnaHQ6IGlubmVySGVpZ2h0LCB3aWR0aDogaW5uZXJXaWR0aCB9O1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdmFyIGJvdW5kcyA9IGdldEJvdW5kcyh0aGlzLnRhcmdldCk7XG5cdFxuXHQgICAgICAgICAgICB2YXIgb3V0ID0ge1xuXHQgICAgICAgICAgICAgIGhlaWdodDogYm91bmRzLmhlaWdodCxcblx0ICAgICAgICAgICAgICB3aWR0aDogYm91bmRzLndpZHRoLFxuXHQgICAgICAgICAgICAgIHRvcDogYm91bmRzLnRvcCxcblx0ICAgICAgICAgICAgICBsZWZ0OiBib3VuZHMubGVmdFxuXHQgICAgICAgICAgICB9O1xuXHRcblx0ICAgICAgICAgICAgb3V0LmhlaWdodCA9IE1hdGgubWluKG91dC5oZWlnaHQsIGJvdW5kcy5oZWlnaHQgLSAocGFnZVlPZmZzZXQgLSBib3VuZHMudG9wKSk7XG5cdCAgICAgICAgICAgIG91dC5oZWlnaHQgPSBNYXRoLm1pbihvdXQuaGVpZ2h0LCBib3VuZHMuaGVpZ2h0IC0gKGJvdW5kcy50b3AgKyBib3VuZHMuaGVpZ2h0IC0gKHBhZ2VZT2Zmc2V0ICsgaW5uZXJIZWlnaHQpKSk7XG5cdCAgICAgICAgICAgIG91dC5oZWlnaHQgPSBNYXRoLm1pbihpbm5lckhlaWdodCwgb3V0LmhlaWdodCk7XG5cdCAgICAgICAgICAgIG91dC5oZWlnaHQgLT0gMjtcblx0XG5cdCAgICAgICAgICAgIG91dC53aWR0aCA9IE1hdGgubWluKG91dC53aWR0aCwgYm91bmRzLndpZHRoIC0gKHBhZ2VYT2Zmc2V0IC0gYm91bmRzLmxlZnQpKTtcblx0ICAgICAgICAgICAgb3V0LndpZHRoID0gTWF0aC5taW4ob3V0LndpZHRoLCBib3VuZHMud2lkdGggLSAoYm91bmRzLmxlZnQgKyBib3VuZHMud2lkdGggLSAocGFnZVhPZmZzZXQgKyBpbm5lcldpZHRoKSkpO1xuXHQgICAgICAgICAgICBvdXQud2lkdGggPSBNYXRoLm1pbihpbm5lcldpZHRoLCBvdXQud2lkdGgpO1xuXHQgICAgICAgICAgICBvdXQud2lkdGggLT0gMjtcblx0XG5cdCAgICAgICAgICAgIGlmIChvdXQudG9wIDwgcGFnZVlPZmZzZXQpIHtcblx0ICAgICAgICAgICAgICBvdXQudG9wID0gcGFnZVlPZmZzZXQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKG91dC5sZWZ0IDwgcGFnZVhPZmZzZXQpIHtcblx0ICAgICAgICAgICAgICBvdXQubGVmdCA9IHBhZ2VYT2Zmc2V0O1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gb3V0O1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXRNb2RpZmllciA9PT0gJ3Njcm9sbC1oYW5kbGUnKSB7XG5cdCAgICAgICAgICB2YXIgYm91bmRzID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0O1xuXHQgICAgICAgICAgaWYgKHRhcmdldCA9PT0gZG9jdW1lbnQuYm9keSkge1xuXHQgICAgICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdFxuXHQgICAgICAgICAgICBib3VuZHMgPSB7XG5cdCAgICAgICAgICAgICAgbGVmdDogcGFnZVhPZmZzZXQsXG5cdCAgICAgICAgICAgICAgdG9wOiBwYWdlWU9mZnNldCxcblx0ICAgICAgICAgICAgICBoZWlnaHQ6IGlubmVySGVpZ2h0LFxuXHQgICAgICAgICAgICAgIHdpZHRoOiBpbm5lcldpZHRoXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBib3VuZHMgPSBnZXRCb3VuZHModGFyZ2V0KTtcblx0ICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCk7XG5cdFxuXHQgICAgICAgICAgdmFyIGhhc0JvdHRvbVNjcm9sbCA9IHRhcmdldC5zY3JvbGxXaWR0aCA+IHRhcmdldC5jbGllbnRXaWR0aCB8fCBbc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WF0uaW5kZXhPZignc2Nyb2xsJykgPj0gMCB8fCB0aGlzLnRhcmdldCAhPT0gZG9jdW1lbnQuYm9keTtcblx0XG5cdCAgICAgICAgICB2YXIgc2Nyb2xsQm90dG9tID0gMDtcblx0ICAgICAgICAgIGlmIChoYXNCb3R0b21TY3JvbGwpIHtcblx0ICAgICAgICAgICAgc2Nyb2xsQm90dG9tID0gMTU7XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgdmFyIGhlaWdodCA9IGJvdW5kcy5oZWlnaHQgLSBwYXJzZUZsb2F0KHN0eWxlLmJvcmRlclRvcFdpZHRoKSAtIHBhcnNlRmxvYXQoc3R5bGUuYm9yZGVyQm90dG9tV2lkdGgpIC0gc2Nyb2xsQm90dG9tO1xuXHRcblx0ICAgICAgICAgIHZhciBvdXQgPSB7XG5cdCAgICAgICAgICAgIHdpZHRoOiAxNSxcblx0ICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKiAwLjk3NSAqIChoZWlnaHQgLyB0YXJnZXQuc2Nyb2xsSGVpZ2h0KSxcblx0ICAgICAgICAgICAgbGVmdDogYm91bmRzLmxlZnQgKyBib3VuZHMud2lkdGggLSBwYXJzZUZsb2F0KHN0eWxlLmJvcmRlckxlZnRXaWR0aCkgLSAxNVxuXHQgICAgICAgICAgfTtcblx0XG5cdCAgICAgICAgICB2YXIgZml0QWRqID0gMDtcblx0ICAgICAgICAgIGlmIChoZWlnaHQgPCA0MDggJiYgdGhpcy50YXJnZXQgPT09IGRvY3VtZW50LmJvZHkpIHtcblx0ICAgICAgICAgICAgZml0QWRqID0gLTAuMDAwMTEgKiBNYXRoLnBvdyhoZWlnaHQsIDIpIC0gMC4wMDcyNyAqIGhlaWdodCArIDIyLjU4O1xuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIGlmICh0aGlzLnRhcmdldCAhPT0gZG9jdW1lbnQuYm9keSkge1xuXHQgICAgICAgICAgICBvdXQuaGVpZ2h0ID0gTWF0aC5tYXgob3V0LmhlaWdodCwgMjQpO1xuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIHZhciBzY3JvbGxQZXJjZW50YWdlID0gdGhpcy50YXJnZXQuc2Nyb2xsVG9wIC8gKHRhcmdldC5zY3JvbGxIZWlnaHQgLSBoZWlnaHQpO1xuXHQgICAgICAgICAgb3V0LnRvcCA9IHNjcm9sbFBlcmNlbnRhZ2UgKiAoaGVpZ2h0IC0gb3V0LmhlaWdodCAtIGZpdEFkaikgKyBib3VuZHMudG9wICsgcGFyc2VGbG9hdChzdHlsZS5ib3JkZXJUb3BXaWR0aCk7XG5cdFxuXHQgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5KSB7XG5cdCAgICAgICAgICAgIG91dC5oZWlnaHQgPSBNYXRoLm1heChvdXQuaGVpZ2h0LCAyNCk7XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgcmV0dXJuIG91dDtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIGdldEJvdW5kcyh0aGlzLnRhcmdldCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjbGVhckNhY2hlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhckNhY2hlKCkge1xuXHQgICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NhY2hlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjYWNoZShrLCBnZXR0ZXIpIHtcblx0ICAgICAgLy8gTW9yZSB0aGFuIG9uZSBtb2R1bGUgd2lsbCBvZnRlbiBuZWVkIHRoZSBzYW1lIERPTSBpbmZvLCBzb1xuXHQgICAgICAvLyB3ZSBrZWVwIGEgY2FjaGUgd2hpY2ggaXMgY2xlYXJlZCBvbiBlYWNoIHBvc2l0aW9uIGNhbGxcblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jYWNoZSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodHlwZW9mIHRoaXMuX2NhY2hlW2tdID09PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIHRoaXMuX2NhY2hlW2tdID0gZ2V0dGVyLmNhbGwodGhpcyk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiB0aGlzLl9jYWNoZVtrXTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdlbmFibGUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcblx0ICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cdFxuXHQgICAgICB2YXIgcG9zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGFyZ3VtZW50c1swXTtcblx0XG5cdCAgICAgIGlmICghKHRoaXMub3B0aW9ucy5hZGRUYXJnZXRDbGFzc2VzID09PSBmYWxzZSkpIHtcblx0ICAgICAgICBhZGRDbGFzcyh0aGlzLnRhcmdldCwgdGhpcy5nZXRDbGFzcygnZW5hYmxlZCcpKTtcblx0ICAgICAgfVxuXHQgICAgICBhZGRDbGFzcyh0aGlzLmVsZW1lbnQsIHRoaXMuZ2V0Q2xhc3MoJ2VuYWJsZWQnKSk7XG5cdCAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cdFxuXHQgICAgICB0aGlzLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAocGFyZW50KSB7XG5cdCAgICAgICAgaWYgKHBhcmVudCAhPT0gX3RoaXMzLnRhcmdldC5vd25lckRvY3VtZW50KSB7XG5cdCAgICAgICAgICBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgX3RoaXMzLnBvc2l0aW9uKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgaWYgKHBvcykge1xuXHQgICAgICAgIHRoaXMucG9zaXRpb24oKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2Rpc2FibGUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdCAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXHRcblx0ICAgICAgcmVtb3ZlQ2xhc3ModGhpcy50YXJnZXQsIHRoaXMuZ2V0Q2xhc3MoJ2VuYWJsZWQnKSk7XG5cdCAgICAgIHJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudCwgdGhpcy5nZXRDbGFzcygnZW5hYmxlZCcpKTtcblx0ICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cdFxuXHQgICAgICBpZiAodHlwZW9mIHRoaXMuc2Nyb2xsUGFyZW50cyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICB0aGlzLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAocGFyZW50KSB7XG5cdCAgICAgICAgICBwYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgX3RoaXM0LnBvc2l0aW9uKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2Rlc3Ryb3knLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdCAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXHRcblx0ICAgICAgdGhpcy5kaXNhYmxlKCk7XG5cdFxuXHQgICAgICB0ZXRoZXJzLmZvckVhY2goZnVuY3Rpb24gKHRldGhlciwgaSkge1xuXHQgICAgICAgIGlmICh0ZXRoZXIgPT09IF90aGlzNSkge1xuXHQgICAgICAgICAgdGV0aGVycy5zcGxpY2UoaSwgMSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIC8vIFJlbW92ZSBhbnkgZWxlbWVudHMgd2Ugd2VyZSB1c2luZyBmb3IgY29udmVuaWVuY2UgZnJvbSB0aGUgRE9NXG5cdCAgICAgIGlmICh0ZXRoZXJzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgIHJlbW92ZVV0aWxFbGVtZW50cygpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAndXBkYXRlQXR0YWNoQ2xhc3NlcycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQXR0YWNoQ2xhc3NlcyhlbGVtZW50QXR0YWNoLCB0YXJnZXRBdHRhY2gpIHtcblx0ICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cdFxuXHQgICAgICBlbGVtZW50QXR0YWNoID0gZWxlbWVudEF0dGFjaCB8fCB0aGlzLmF0dGFjaG1lbnQ7XG5cdCAgICAgIHRhcmdldEF0dGFjaCA9IHRhcmdldEF0dGFjaCB8fCB0aGlzLnRhcmdldEF0dGFjaG1lbnQ7XG5cdCAgICAgIHZhciBzaWRlcyA9IFsnbGVmdCcsICd0b3AnLCAnYm90dG9tJywgJ3JpZ2h0JywgJ21pZGRsZScsICdjZW50ZXInXTtcblx0XG5cdCAgICAgIGlmICh0eXBlb2YgdGhpcy5fYWRkQXR0YWNoQ2xhc3NlcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5fYWRkQXR0YWNoQ2xhc3Nlcy5sZW5ndGgpIHtcblx0ICAgICAgICAvLyB1cGRhdGVBdHRhY2hDbGFzc2VzIGNhbiBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2UgaW4gYSBwb3NpdGlvbiBjYWxsLCBzb1xuXHQgICAgICAgIC8vIHdlIG5lZWQgdG8gY2xlYW4gdXAgYWZ0ZXIgb3Vyc2VsdmVzIHN1Y2ggdGhhdCB3aGVuIHRoZSBsYXN0IGRlZmVyIGdldHNcblx0ICAgICAgICAvLyByYW4gaXQgZG9lc24ndCBhZGQgYW55IGV4dHJhIGNsYXNzZXMgZnJvbSBwcmV2aW91cyBjYWxscy5cblx0ICAgICAgICB0aGlzLl9hZGRBdHRhY2hDbGFzc2VzLnNwbGljZSgwLCB0aGlzLl9hZGRBdHRhY2hDbGFzc2VzLmxlbmd0aCk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh0eXBlb2YgdGhpcy5fYWRkQXR0YWNoQ2xhc3NlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICB0aGlzLl9hZGRBdHRhY2hDbGFzc2VzID0gW107XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGFkZCA9IHRoaXMuX2FkZEF0dGFjaENsYXNzZXM7XG5cdFxuXHQgICAgICBpZiAoZWxlbWVudEF0dGFjaC50b3ApIHtcblx0ICAgICAgICBhZGQucHVzaCh0aGlzLmdldENsYXNzKCdlbGVtZW50LWF0dGFjaGVkJykgKyAnLScgKyBlbGVtZW50QXR0YWNoLnRvcCk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGVsZW1lbnRBdHRhY2gubGVmdCkge1xuXHQgICAgICAgIGFkZC5wdXNoKHRoaXMuZ2V0Q2xhc3MoJ2VsZW1lbnQtYXR0YWNoZWQnKSArICctJyArIGVsZW1lbnRBdHRhY2gubGVmdCk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRhcmdldEF0dGFjaC50b3ApIHtcblx0ICAgICAgICBhZGQucHVzaCh0aGlzLmdldENsYXNzKCd0YXJnZXQtYXR0YWNoZWQnKSArICctJyArIHRhcmdldEF0dGFjaC50b3ApO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0YXJnZXRBdHRhY2gubGVmdCkge1xuXHQgICAgICAgIGFkZC5wdXNoKHRoaXMuZ2V0Q2xhc3MoJ3RhcmdldC1hdHRhY2hlZCcpICsgJy0nICsgdGFyZ2V0QXR0YWNoLmxlZnQpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgYWxsID0gW107XG5cdCAgICAgIHNpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcblx0ICAgICAgICBhbGwucHVzaChfdGhpczYuZ2V0Q2xhc3MoJ2VsZW1lbnQtYXR0YWNoZWQnKSArICctJyArIHNpZGUpO1xuXHQgICAgICAgIGFsbC5wdXNoKF90aGlzNi5nZXRDbGFzcygndGFyZ2V0LWF0dGFjaGVkJykgKyAnLScgKyBzaWRlKTtcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICBkZWZlcihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKCEodHlwZW9mIF90aGlzNi5fYWRkQXR0YWNoQ2xhc3NlcyAhPT0gJ3VuZGVmaW5lZCcpKSB7XG5cdCAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB1cGRhdGVDbGFzc2VzKF90aGlzNi5lbGVtZW50LCBfdGhpczYuX2FkZEF0dGFjaENsYXNzZXMsIGFsbCk7XG5cdCAgICAgICAgaWYgKCEoX3RoaXM2Lm9wdGlvbnMuYWRkVGFyZ2V0Q2xhc3NlcyA9PT0gZmFsc2UpKSB7XG5cdCAgICAgICAgICB1cGRhdGVDbGFzc2VzKF90aGlzNi50YXJnZXQsIF90aGlzNi5fYWRkQXR0YWNoQ2xhc3NlcywgYWxsKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGRlbGV0ZSBfdGhpczYuX2FkZEF0dGFjaENsYXNzZXM7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3Bvc2l0aW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBwb3NpdGlvbigpIHtcblx0ICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cdFxuXHQgICAgICB2YXIgZmx1c2hDaGFuZ2VzID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGFyZ3VtZW50c1swXTtcblx0XG5cdCAgICAgIC8vIGZsdXNoQ2hhbmdlcyBjb21taXRzIHRoZSBjaGFuZ2VzIGltbWVkaWF0ZWx5LCBsZWF2ZSB0cnVlIHVubGVzcyB5b3UgYXJlIHBvc2l0aW9uaW5nIG11bHRpcGxlXG5cdCAgICAgIC8vIHRldGhlcnMgKGluIHdoaWNoIGNhc2UgY2FsbCBUZXRoZXIuVXRpbHMuZmx1c2ggeW91cnNlbGYgd2hlbiB5b3UncmUgZG9uZSlcblx0XG5cdCAgICAgIGlmICghdGhpcy5lbmFibGVkKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcblx0XG5cdCAgICAgIC8vIFR1cm4gJ2F1dG8nIGF0dGFjaG1lbnRzIGludG8gdGhlIGFwcHJvcHJpYXRlIGNvcm5lciBvciBlZGdlXG5cdCAgICAgIHZhciB0YXJnZXRBdHRhY2htZW50ID0gYXV0b1RvRml4ZWRBdHRhY2htZW50KHRoaXMudGFyZ2V0QXR0YWNobWVudCwgdGhpcy5hdHRhY2htZW50KTtcblx0XG5cdCAgICAgIHRoaXMudXBkYXRlQXR0YWNoQ2xhc3Nlcyh0aGlzLmF0dGFjaG1lbnQsIHRhcmdldEF0dGFjaG1lbnQpO1xuXHRcblx0ICAgICAgdmFyIGVsZW1lbnRQb3MgPSB0aGlzLmNhY2hlKCdlbGVtZW50LWJvdW5kcycsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gZ2V0Qm91bmRzKF90aGlzNy5lbGVtZW50KTtcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICB2YXIgd2lkdGggPSBlbGVtZW50UG9zLndpZHRoO1xuXHQgICAgICB2YXIgaGVpZ2h0ID0gZWxlbWVudFBvcy5oZWlnaHQ7XG5cdFxuXHQgICAgICBpZiAod2lkdGggPT09IDAgJiYgaGVpZ2h0ID09PSAwICYmIHR5cGVvZiB0aGlzLmxhc3RTaXplICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIHZhciBfbGFzdFNpemUgPSB0aGlzLmxhc3RTaXplO1xuXHRcblx0ICAgICAgICAvLyBXZSBjYWNoZSB0aGUgaGVpZ2h0IGFuZCB3aWR0aCB0byBtYWtlIGl0IHBvc3NpYmxlIHRvIHBvc2l0aW9uIGVsZW1lbnRzIHRoYXQgYXJlXG5cdCAgICAgICAgLy8gZ2V0dGluZyBoaWRkZW4uXG5cdCAgICAgICAgd2lkdGggPSBfbGFzdFNpemUud2lkdGg7XG5cdCAgICAgICAgaGVpZ2h0ID0gX2xhc3RTaXplLmhlaWdodDtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLmxhc3RTaXplID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciB0YXJnZXRQb3MgPSB0aGlzLmNhY2hlKCd0YXJnZXQtYm91bmRzJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiBfdGhpczcuZ2V0VGFyZ2V0Qm91bmRzKCk7XG5cdCAgICAgIH0pO1xuXHQgICAgICB2YXIgdGFyZ2V0U2l6ZSA9IHRhcmdldFBvcztcblx0XG5cdCAgICAgIC8vIEdldCBhbiBhY3R1YWwgcHggb2Zmc2V0IGZyb20gdGhlIGF0dGFjaG1lbnRcblx0ICAgICAgdmFyIG9mZnNldCA9IG9mZnNldFRvUHgoYXR0YWNobWVudFRvT2Zmc2V0KHRoaXMuYXR0YWNobWVudCksIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9KTtcblx0ICAgICAgdmFyIHRhcmdldE9mZnNldCA9IG9mZnNldFRvUHgoYXR0YWNobWVudFRvT2Zmc2V0KHRhcmdldEF0dGFjaG1lbnQpLCB0YXJnZXRTaXplKTtcblx0XG5cdCAgICAgIHZhciBtYW51YWxPZmZzZXQgPSBvZmZzZXRUb1B4KHRoaXMub2Zmc2V0LCB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSk7XG5cdCAgICAgIHZhciBtYW51YWxUYXJnZXRPZmZzZXQgPSBvZmZzZXRUb1B4KHRoaXMudGFyZ2V0T2Zmc2V0LCB0YXJnZXRTaXplKTtcblx0XG5cdCAgICAgIC8vIEFkZCB0aGUgbWFudWFsbHkgcHJvdmlkZWQgb2Zmc2V0XG5cdCAgICAgIG9mZnNldCA9IGFkZE9mZnNldChvZmZzZXQsIG1hbnVhbE9mZnNldCk7XG5cdCAgICAgIHRhcmdldE9mZnNldCA9IGFkZE9mZnNldCh0YXJnZXRPZmZzZXQsIG1hbnVhbFRhcmdldE9mZnNldCk7XG5cdFxuXHQgICAgICAvLyBJdCdzIG5vdyBvdXIgZ29hbCB0byBtYWtlIChlbGVtZW50IHBvc2l0aW9uICsgb2Zmc2V0KSA9PSAodGFyZ2V0IHBvc2l0aW9uICsgdGFyZ2V0IG9mZnNldClcblx0ICAgICAgdmFyIGxlZnQgPSB0YXJnZXRQb3MubGVmdCArIHRhcmdldE9mZnNldC5sZWZ0IC0gb2Zmc2V0LmxlZnQ7XG5cdCAgICAgIHZhciB0b3AgPSB0YXJnZXRQb3MudG9wICsgdGFyZ2V0T2Zmc2V0LnRvcCAtIG9mZnNldC50b3A7XG5cdFxuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFRldGhlckJhc2UubW9kdWxlcy5sZW5ndGg7ICsraSkge1xuXHQgICAgICAgIHZhciBfbW9kdWxlMiA9IFRldGhlckJhc2UubW9kdWxlc1tpXTtcblx0ICAgICAgICB2YXIgcmV0ID0gX21vZHVsZTIucG9zaXRpb24uY2FsbCh0aGlzLCB7XG5cdCAgICAgICAgICBsZWZ0OiBsZWZ0LFxuXHQgICAgICAgICAgdG9wOiB0b3AsXG5cdCAgICAgICAgICB0YXJnZXRBdHRhY2htZW50OiB0YXJnZXRBdHRhY2htZW50LFxuXHQgICAgICAgICAgdGFyZ2V0UG9zOiB0YXJnZXRQb3MsXG5cdCAgICAgICAgICBlbGVtZW50UG9zOiBlbGVtZW50UG9zLFxuXHQgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG5cdCAgICAgICAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldCxcblx0ICAgICAgICAgIG1hbnVhbE9mZnNldDogbWFudWFsT2Zmc2V0LFxuXHQgICAgICAgICAgbWFudWFsVGFyZ2V0T2Zmc2V0OiBtYW51YWxUYXJnZXRPZmZzZXQsXG5cdCAgICAgICAgICBzY3JvbGxiYXJTaXplOiBzY3JvbGxiYXJTaXplLFxuXHQgICAgICAgICAgYXR0YWNobWVudDogdGhpcy5hdHRhY2htZW50XG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcmV0ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgcmV0ICE9PSAnb2JqZWN0Jykge1xuXHQgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHRvcCA9IHJldC50b3A7XG5cdCAgICAgICAgICBsZWZ0ID0gcmV0LmxlZnQ7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICAvLyBXZSBkZXNjcmliZSB0aGUgcG9zaXRpb24gdGhyZWUgZGlmZmVyZW50IHdheXMgdG8gZ2l2ZSB0aGUgb3B0aW1pemVyXG5cdCAgICAgIC8vIGEgY2hhbmNlIHRvIGRlY2lkZSB0aGUgYmVzdCBwb3NzaWJsZSB3YXkgdG8gcG9zaXRpb24gdGhlIGVsZW1lbnRcblx0ICAgICAgLy8gd2l0aCB0aGUgZmV3ZXN0IHJlcGFpbnRzLlxuXHQgICAgICB2YXIgbmV4dCA9IHtcblx0ICAgICAgICAvLyBJdCdzIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBwYWdlIChhYnNvbHV0ZSBwb3NpdGlvbmluZyB3aGVuXG5cdCAgICAgICAgLy8gdGhlIGVsZW1lbnQgaXMgYSBjaGlsZCBvZiB0aGUgYm9keSlcblx0ICAgICAgICBwYWdlOiB7XG5cdCAgICAgICAgICB0b3A6IHRvcCxcblx0ICAgICAgICAgIGxlZnQ6IGxlZnRcblx0ICAgICAgICB9LFxuXHRcblx0ICAgICAgICAvLyBJdCdzIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSB2aWV3cG9ydCAoZml4ZWQgcG9zaXRpb25pbmcpXG5cdCAgICAgICAgdmlld3BvcnQ6IHtcblx0ICAgICAgICAgIHRvcDogdG9wIC0gcGFnZVlPZmZzZXQsXG5cdCAgICAgICAgICBib3R0b206IHBhZ2VZT2Zmc2V0IC0gdG9wIC0gaGVpZ2h0ICsgaW5uZXJIZWlnaHQsXG5cdCAgICAgICAgICBsZWZ0OiBsZWZ0IC0gcGFnZVhPZmZzZXQsXG5cdCAgICAgICAgICByaWdodDogcGFnZVhPZmZzZXQgLSBsZWZ0IC0gd2lkdGggKyBpbm5lcldpZHRoXG5cdCAgICAgICAgfVxuXHQgICAgICB9O1xuXHRcblx0ICAgICAgdmFyIGRvYyA9IHRoaXMudGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG5cdCAgICAgIHZhciB3aW4gPSBkb2MuZGVmYXVsdFZpZXc7XG5cdFxuXHQgICAgICB2YXIgc2Nyb2xsYmFyU2l6ZSA9IHVuZGVmaW5lZDtcblx0ICAgICAgaWYgKHdpbi5pbm5lckhlaWdodCA+IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSB7XG5cdCAgICAgICAgc2Nyb2xsYmFyU2l6ZSA9IHRoaXMuY2FjaGUoJ3Njcm9sbGJhci1zaXplJywgZ2V0U2Nyb2xsQmFyU2l6ZSk7XG5cdCAgICAgICAgbmV4dC52aWV3cG9ydC5ib3R0b20gLT0gc2Nyb2xsYmFyU2l6ZS5oZWlnaHQ7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh3aW4uaW5uZXJXaWR0aCA+IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpIHtcblx0ICAgICAgICBzY3JvbGxiYXJTaXplID0gdGhpcy5jYWNoZSgnc2Nyb2xsYmFyLXNpemUnLCBnZXRTY3JvbGxCYXJTaXplKTtcblx0ICAgICAgICBuZXh0LnZpZXdwb3J0LnJpZ2h0IC09IHNjcm9sbGJhclNpemUud2lkdGg7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChbJycsICdzdGF0aWMnXS5pbmRleE9mKGRvYy5ib2R5LnN0eWxlLnBvc2l0aW9uKSA9PT0gLTEgfHwgWycnLCAnc3RhdGljJ10uaW5kZXhPZihkb2MuYm9keS5wYXJlbnRFbGVtZW50LnN0eWxlLnBvc2l0aW9uKSA9PT0gLTEpIHtcblx0ICAgICAgICAvLyBBYnNvbHV0ZSBwb3NpdGlvbmluZyBpbiB0aGUgYm9keSB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoZSBwYWdlLCBub3QgdGhlICdpbml0aWFsIGNvbnRhaW5pbmcgYmxvY2snXG5cdCAgICAgICAgbmV4dC5wYWdlLmJvdHRvbSA9IGRvYy5ib2R5LnNjcm9sbEhlaWdodCAtIHRvcCAtIGhlaWdodDtcblx0ICAgICAgICBuZXh0LnBhZ2UucmlnaHQgPSBkb2MuYm9keS5zY3JvbGxXaWR0aCAtIGxlZnQgLSB3aWR0aDtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMub3B0aW1pemF0aW9ucyAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5vcHRpb25zLm9wdGltaXphdGlvbnMubW92ZUVsZW1lbnQgIT09IGZhbHNlICYmICEodHlwZW9mIHRoaXMudGFyZ2V0TW9kaWZpZXIgIT09ICd1bmRlZmluZWQnKSkge1xuXHQgICAgICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICB2YXIgb2Zmc2V0UGFyZW50ID0gX3RoaXM3LmNhY2hlKCd0YXJnZXQtb2Zmc2V0cGFyZW50JywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KF90aGlzNy50YXJnZXQpO1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgICB2YXIgb2Zmc2V0UG9zaXRpb24gPSBfdGhpczcuY2FjaGUoJ3RhcmdldC1vZmZzZXRwYXJlbnQtYm91bmRzJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gZ2V0Qm91bmRzKG9mZnNldFBhcmVudCk7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICAgIHZhciBvZmZzZXRQYXJlbnRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KTtcblx0ICAgICAgICAgIHZhciBvZmZzZXRQYXJlbnRTaXplID0gb2Zmc2V0UG9zaXRpb247XG5cdFxuXHQgICAgICAgICAgdmFyIG9mZnNldEJvcmRlciA9IHt9O1xuXHQgICAgICAgICAgWydUb3AnLCAnTGVmdCcsICdCb3R0b20nLCAnUmlnaHQnXS5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlKSB7XG5cdCAgICAgICAgICAgIG9mZnNldEJvcmRlcltzaWRlLnRvTG93ZXJDYXNlKCldID0gcGFyc2VGbG9hdChvZmZzZXRQYXJlbnRTdHlsZVsnYm9yZGVyJyArIHNpZGUgKyAnV2lkdGgnXSk7XG5cdCAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICBvZmZzZXRQb3NpdGlvbi5yaWdodCA9IGRvYy5ib2R5LnNjcm9sbFdpZHRoIC0gb2Zmc2V0UG9zaXRpb24ubGVmdCAtIG9mZnNldFBhcmVudFNpemUud2lkdGggKyBvZmZzZXRCb3JkZXIucmlnaHQ7XG5cdCAgICAgICAgICBvZmZzZXRQb3NpdGlvbi5ib3R0b20gPSBkb2MuYm9keS5zY3JvbGxIZWlnaHQgLSBvZmZzZXRQb3NpdGlvbi50b3AgLSBvZmZzZXRQYXJlbnRTaXplLmhlaWdodCArIG9mZnNldEJvcmRlci5ib3R0b207XG5cdFxuXHQgICAgICAgICAgaWYgKG5leHQucGFnZS50b3AgPj0gb2Zmc2V0UG9zaXRpb24udG9wICsgb2Zmc2V0Qm9yZGVyLnRvcCAmJiBuZXh0LnBhZ2UuYm90dG9tID49IG9mZnNldFBvc2l0aW9uLmJvdHRvbSkge1xuXHQgICAgICAgICAgICBpZiAobmV4dC5wYWdlLmxlZnQgPj0gb2Zmc2V0UG9zaXRpb24ubGVmdCArIG9mZnNldEJvcmRlci5sZWZ0ICYmIG5leHQucGFnZS5yaWdodCA+PSBvZmZzZXRQb3NpdGlvbi5yaWdodCkge1xuXHQgICAgICAgICAgICAgIC8vIFdlJ3JlIHdpdGhpbiB0aGUgdmlzaWJsZSBwYXJ0IG9mIHRoZSB0YXJnZXQncyBzY3JvbGwgcGFyZW50XG5cdCAgICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IG9mZnNldFBhcmVudC5zY3JvbGxUb3A7XG5cdCAgICAgICAgICAgICAgdmFyIHNjcm9sbExlZnQgPSBvZmZzZXRQYXJlbnQuc2Nyb2xsTGVmdDtcblx0XG5cdCAgICAgICAgICAgICAgLy8gSXQncyBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgdGFyZ2V0J3Mgb2Zmc2V0IHBhcmVudCAoYWJzb2x1dGUgcG9zaXRpb25pbmcgd2hlblxuXHQgICAgICAgICAgICAgIC8vIHRoZSBlbGVtZW50IGlzIG1vdmVkIHRvIGJlIGEgY2hpbGQgb2YgdGhlIHRhcmdldCdzIG9mZnNldCBwYXJlbnQpLlxuXHQgICAgICAgICAgICAgIG5leHQub2Zmc2V0ID0ge1xuXHQgICAgICAgICAgICAgICAgdG9wOiBuZXh0LnBhZ2UudG9wIC0gb2Zmc2V0UG9zaXRpb24udG9wICsgc2Nyb2xsVG9wIC0gb2Zmc2V0Qm9yZGVyLnRvcCxcblx0ICAgICAgICAgICAgICAgIGxlZnQ6IG5leHQucGFnZS5sZWZ0IC0gb2Zmc2V0UG9zaXRpb24ubGVmdCArIHNjcm9sbExlZnQgLSBvZmZzZXRCb3JkZXIubGVmdFxuXHQgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KSgpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAvLyBXZSBjb3VsZCBhbHNvIHRyYXZlbCB1cCB0aGUgRE9NIGFuZCB0cnkgZWFjaCBjb250YWluaW5nIGNvbnRleHQsIHJhdGhlciB0aGFuIG9ubHlcblx0ICAgICAgLy8gbG9va2luZyBhdCB0aGUgYm9keSwgYnV0IHdlJ3JlIGdvbm5hIGdldCBkaW1pbmlzaGluZyByZXR1cm5zLlxuXHRcblx0ICAgICAgdGhpcy5tb3ZlKG5leHQpO1xuXHRcblx0ICAgICAgdGhpcy5oaXN0b3J5LnVuc2hpZnQobmV4dCk7XG5cdFxuXHQgICAgICBpZiAodGhpcy5oaXN0b3J5Lmxlbmd0aCA+IDMpIHtcblx0ICAgICAgICB0aGlzLmhpc3RvcnkucG9wKCk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChmbHVzaENoYW5nZXMpIHtcblx0ICAgICAgICBmbHVzaCgpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBUSEUgSVNTVUVcblx0ICB9LCB7XG5cdCAgICBrZXk6ICdtb3ZlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlKHBvcykge1xuXHQgICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblx0XG5cdCAgICAgIGlmICghKHR5cGVvZiB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSAhPT0gJ3VuZGVmaW5lZCcpKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgc2FtZSA9IHt9O1xuXHRcblx0ICAgICAgZm9yICh2YXIgdHlwZSBpbiBwb3MpIHtcblx0ICAgICAgICBzYW1lW3R5cGVdID0ge307XG5cdFxuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiBwb3NbdHlwZV0pIHtcblx0ICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuXHRcblx0ICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5oaXN0b3J5Lmxlbmd0aDsgKytpKSB7XG5cdCAgICAgICAgICAgIHZhciBwb2ludCA9IHRoaXMuaGlzdG9yeVtpXTtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBwb2ludFt0eXBlXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXdpdGhpbihwb2ludFt0eXBlXVtrZXldLCBwb3NbdHlwZV1ba2V5XSkpIHtcblx0ICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICBpZiAoIWZvdW5kKSB7XG5cdCAgICAgICAgICAgIHNhbWVbdHlwZV1ba2V5XSA9IHRydWU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgY3NzID0geyB0b3A6ICcnLCBsZWZ0OiAnJywgcmlnaHQ6ICcnLCBib3R0b206ICcnIH07XG5cdFxuXHQgICAgICB2YXIgdHJhbnNjcmliZSA9IGZ1bmN0aW9uIHRyYW5zY3JpYmUoX3NhbWUsIF9wb3MpIHtcblx0ICAgICAgICB2YXIgaGFzT3B0aW1pemF0aW9ucyA9IHR5cGVvZiBfdGhpczgub3B0aW9ucy5vcHRpbWl6YXRpb25zICE9PSAndW5kZWZpbmVkJztcblx0ICAgICAgICB2YXIgZ3B1ID0gaGFzT3B0aW1pemF0aW9ucyA/IF90aGlzOC5vcHRpb25zLm9wdGltaXphdGlvbnMuZ3B1IDogbnVsbDtcblx0ICAgICAgICBpZiAoZ3B1ICE9PSBmYWxzZSkge1xuXHQgICAgICAgICAgdmFyIHlQb3MgPSB1bmRlZmluZWQsXG5cdCAgICAgICAgICAgICAgeFBvcyA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgIGlmIChfc2FtZS50b3ApIHtcblx0ICAgICAgICAgICAgY3NzLnRvcCA9IDA7XG5cdCAgICAgICAgICAgIHlQb3MgPSBfcG9zLnRvcDtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGNzcy5ib3R0b20gPSAwO1xuXHQgICAgICAgICAgICB5UG9zID0gLV9wb3MuYm90dG9tO1xuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIGlmIChfc2FtZS5sZWZ0KSB7XG5cdCAgICAgICAgICAgIGNzcy5sZWZ0ID0gMDtcblx0ICAgICAgICAgICAgeFBvcyA9IF9wb3MubGVmdDtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGNzcy5yaWdodCA9IDA7XG5cdCAgICAgICAgICAgIHhQb3MgPSAtX3Bvcy5yaWdodDtcblx0ICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEpIHtcblx0ICAgICAgICAgICAgLy8gSHViU3BvdC90ZXRoZXIjMjA3XG5cdCAgICAgICAgICAgIHZhciByZXRpbmEgPSB3aW5kb3cubWF0Y2hNZWRpYSgnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMS4zZHBweCknKS5tYXRjaGVzIHx8IHdpbmRvdy5tYXRjaE1lZGlhKCdvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMS4zKScpLm1hdGNoZXM7XG5cdCAgICAgICAgICAgIGlmICghcmV0aW5hKSB7XG5cdCAgICAgICAgICAgICAgeFBvcyA9IE1hdGgucm91bmQoeFBvcyk7XG5cdCAgICAgICAgICAgICAgeVBvcyA9IE1hdGgucm91bmQoeVBvcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICBjc3NbdHJhbnNmb3JtS2V5XSA9ICd0cmFuc2xhdGVYKCcgKyB4UG9zICsgJ3B4KSB0cmFuc2xhdGVZKCcgKyB5UG9zICsgJ3B4KSc7XG5cdFxuXHQgICAgICAgICAgaWYgKHRyYW5zZm9ybUtleSAhPT0gJ21zVHJhbnNmb3JtJykge1xuXHQgICAgICAgICAgICAvLyBUaGUgWiB0cmFuc2Zvcm0gd2lsbCBrZWVwIHRoaXMgaW4gdGhlIEdQVSAoZmFzdGVyLCBhbmQgcHJldmVudHMgYXJ0aWZhY3RzKSxcblx0ICAgICAgICAgICAgLy8gYnV0IElFOSBkb2Vzbid0IHN1cHBvcnQgM2QgdHJhbnNmb3JtcyBhbmQgd2lsbCBjaG9rZS5cblx0ICAgICAgICAgICAgY3NzW3RyYW5zZm9ybUtleV0gKz0gXCIgdHJhbnNsYXRlWigwKVwiO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBpZiAoX3NhbWUudG9wKSB7XG5cdCAgICAgICAgICAgIGNzcy50b3AgPSBfcG9zLnRvcCArICdweCc7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBjc3MuYm90dG9tID0gX3Bvcy5ib3R0b20gKyAncHgnO1xuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIGlmIChfc2FtZS5sZWZ0KSB7XG5cdCAgICAgICAgICAgIGNzcy5sZWZ0ID0gX3Bvcy5sZWZ0ICsgJ3B4Jztcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGNzcy5yaWdodCA9IF9wb3MucmlnaHQgKyAncHgnO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHZhciBtb3ZlZCA9IGZhbHNlO1xuXHQgICAgICBpZiAoKHNhbWUucGFnZS50b3AgfHwgc2FtZS5wYWdlLmJvdHRvbSkgJiYgKHNhbWUucGFnZS5sZWZ0IHx8IHNhbWUucGFnZS5yaWdodCkpIHtcblx0ICAgICAgICBjc3MucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHQgICAgICAgIHRyYW5zY3JpYmUoc2FtZS5wYWdlLCBwb3MucGFnZSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoKHNhbWUudmlld3BvcnQudG9wIHx8IHNhbWUudmlld3BvcnQuYm90dG9tKSAmJiAoc2FtZS52aWV3cG9ydC5sZWZ0IHx8IHNhbWUudmlld3BvcnQucmlnaHQpKSB7XG5cdCAgICAgICAgY3NzLnBvc2l0aW9uID0gJ2ZpeGVkJztcblx0ICAgICAgICB0cmFuc2NyaWJlKHNhbWUudmlld3BvcnQsIHBvcy52aWV3cG9ydCk7XG5cdCAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNhbWUub2Zmc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBzYW1lLm9mZnNldC50b3AgJiYgc2FtZS5vZmZzZXQubGVmdCkge1xuXHQgICAgICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICBjc3MucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHQgICAgICAgICAgdmFyIG9mZnNldFBhcmVudCA9IF90aGlzOC5jYWNoZSgndGFyZ2V0LW9mZnNldHBhcmVudCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChfdGhpczgudGFyZ2V0KTtcblx0ICAgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAgIGlmIChnZXRPZmZzZXRQYXJlbnQoX3RoaXM4LmVsZW1lbnQpICE9PSBvZmZzZXRQYXJlbnQpIHtcblx0ICAgICAgICAgICAgZGVmZXIoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgIF90aGlzOC5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoX3RoaXM4LmVsZW1lbnQpO1xuXHQgICAgICAgICAgICAgIG9mZnNldFBhcmVudC5hcHBlbmRDaGlsZChfdGhpczguZWxlbWVudCk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIHRyYW5zY3JpYmUoc2FtZS5vZmZzZXQsIHBvcy5vZmZzZXQpO1xuXHQgICAgICAgICAgbW92ZWQgPSB0cnVlO1xuXHQgICAgICAgIH0pKCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgY3NzLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0ICAgICAgICB0cmFuc2NyaWJlKHsgdG9wOiB0cnVlLCBsZWZ0OiB0cnVlIH0sIHBvcy5wYWdlKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCFtb3ZlZCkge1xuXHQgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYm9keUVsZW1lbnQpIHtcblx0ICAgICAgICAgIHRoaXMub3B0aW9ucy5ib2R5RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2YXIgb2Zmc2V0UGFyZW50SXNCb2R5ID0gdHJ1ZTtcblx0ICAgICAgICAgIHZhciBjdXJyZW50Tm9kZSA9IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlO1xuXHQgICAgICAgICAgd2hpbGUgKGN1cnJlbnROb2RlICYmIGN1cnJlbnROb2RlLm5vZGVUeXBlID09PSAxICYmIGN1cnJlbnROb2RlLnRhZ05hbWUgIT09ICdCT0RZJykge1xuXHQgICAgICAgICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50Tm9kZSkucG9zaXRpb24gIT09ICdzdGF0aWMnKSB7XG5cdCAgICAgICAgICAgICAgb2Zmc2V0UGFyZW50SXNCb2R5ID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUucGFyZW50Tm9kZTtcblx0ICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICBpZiAoIW9mZnNldFBhcmVudElzQm9keSkge1xuXHQgICAgICAgICAgICB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHQgICAgICAgICAgICB0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICAvLyBBbnkgY3NzIGNoYW5nZSB3aWxsIHRyaWdnZXIgYSByZXBhaW50LCBzbyBsZXQncyBhdm9pZCBvbmUgaWYgbm90aGluZyBjaGFuZ2VkXG5cdCAgICAgIHZhciB3cml0ZUNTUyA9IHt9O1xuXHQgICAgICB2YXIgd3JpdGUgPSBmYWxzZTtcblx0ICAgICAgZm9yICh2YXIga2V5IGluIGNzcykge1xuXHQgICAgICAgIHZhciB2YWwgPSBjc3Nba2V5XTtcblx0ICAgICAgICB2YXIgZWxWYWwgPSB0aGlzLmVsZW1lbnQuc3R5bGVba2V5XTtcblx0XG5cdCAgICAgICAgaWYgKGVsVmFsICE9PSB2YWwpIHtcblx0ICAgICAgICAgIHdyaXRlID0gdHJ1ZTtcblx0ICAgICAgICAgIHdyaXRlQ1NTW2tleV0gPSB2YWw7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAod3JpdGUpIHtcblx0ICAgICAgICBkZWZlcihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICBleHRlbmQoX3RoaXM4LmVsZW1lbnQuc3R5bGUsIHdyaXRlQ1NTKTtcblx0ICAgICAgICAgIF90aGlzOC50cmlnZ2VyKCdyZXBvc2l0aW9uZWQnKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIFRldGhlckNsYXNzO1xuXHR9KShFdmVudGVkKTtcblx0XG5cdFRldGhlckNsYXNzLm1vZHVsZXMgPSBbXTtcblx0XG5cdFRldGhlckJhc2UucG9zaXRpb24gPSBwb3NpdGlvbjtcblx0XG5cdHZhciBUZXRoZXIgPSBleHRlbmQoVGV0aGVyQ2xhc3MsIFRldGhlckJhc2UpO1xuXHQvKiBnbG9iYWxzIFRldGhlckJhc2UgKi9cblx0XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBfc2xpY2VkVG9BcnJheSA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pWydyZXR1cm4nXSkgX2lbJ3JldHVybiddKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UnKTsgfSB9OyB9KSgpO1xuXHRcblx0dmFyIF9UZXRoZXJCYXNlJFV0aWxzID0gVGV0aGVyQmFzZS5VdGlscztcblx0dmFyIGdldEJvdW5kcyA9IF9UZXRoZXJCYXNlJFV0aWxzLmdldEJvdW5kcztcblx0dmFyIGV4dGVuZCA9IF9UZXRoZXJCYXNlJFV0aWxzLmV4dGVuZDtcblx0dmFyIHVwZGF0ZUNsYXNzZXMgPSBfVGV0aGVyQmFzZSRVdGlscy51cGRhdGVDbGFzc2VzO1xuXHR2YXIgZGVmZXIgPSBfVGV0aGVyQmFzZSRVdGlscy5kZWZlcjtcblx0XG5cdHZhciBCT1VORFNfRk9STUFUID0gWydsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nXTtcblx0XG5cdGZ1bmN0aW9uIGdldEJvdW5kaW5nUmVjdCh0ZXRoZXIsIHRvKSB7XG5cdCAgaWYgKHRvID09PSAnc2Nyb2xsUGFyZW50Jykge1xuXHQgICAgdG8gPSB0ZXRoZXIuc2Nyb2xsUGFyZW50c1swXTtcblx0ICB9IGVsc2UgaWYgKHRvID09PSAnd2luZG93Jykge1xuXHQgICAgdG8gPSBbcGFnZVhPZmZzZXQsIHBhZ2VZT2Zmc2V0LCBpbm5lcldpZHRoICsgcGFnZVhPZmZzZXQsIGlubmVySGVpZ2h0ICsgcGFnZVlPZmZzZXRdO1xuXHQgIH1cblx0XG5cdCAgaWYgKHRvID09PSBkb2N1bWVudCkge1xuXHQgICAgdG8gPSB0by5kb2N1bWVudEVsZW1lbnQ7XG5cdCAgfVxuXHRcblx0ICBpZiAodHlwZW9mIHRvLm5vZGVUeXBlICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIG5vZGUgPSB0bztcblx0ICAgICAgdmFyIHNpemUgPSBnZXRCb3VuZHModG8pO1xuXHQgICAgICB2YXIgcG9zID0gc2l6ZTtcblx0ICAgICAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0byk7XG5cdFxuXHQgICAgICB0byA9IFtwb3MubGVmdCwgcG9zLnRvcCwgc2l6ZS53aWR0aCArIHBvcy5sZWZ0LCBzaXplLmhlaWdodCArIHBvcy50b3BdO1xuXHRcblx0ICAgICAgLy8gQWNjb3VudCBhbnkgcGFyZW50IEZyYW1lcyBzY3JvbGwgb2Zmc2V0XG5cdCAgICAgIGlmIChub2RlLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50KSB7XG5cdCAgICAgICAgdmFyIHdpbiA9IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0ICAgICAgICB0b1swXSArPSB3aW4ucGFnZVhPZmZzZXQ7XG5cdCAgICAgICAgdG9bMV0gKz0gd2luLnBhZ2VZT2Zmc2V0O1xuXHQgICAgICAgIHRvWzJdICs9IHdpbi5wYWdlWE9mZnNldDtcblx0ICAgICAgICB0b1szXSArPSB3aW4ucGFnZVlPZmZzZXQ7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIEJPVU5EU19GT1JNQVQuZm9yRWFjaChmdW5jdGlvbiAoc2lkZSwgaSkge1xuXHQgICAgICAgIHNpZGUgPSBzaWRlWzBdLnRvVXBwZXJDYXNlKCkgKyBzaWRlLnN1YnN0cigxKTtcblx0ICAgICAgICBpZiAoc2lkZSA9PT0gJ1RvcCcgfHwgc2lkZSA9PT0gJ0xlZnQnKSB7XG5cdCAgICAgICAgICB0b1tpXSArPSBwYXJzZUZsb2F0KHN0eWxlWydib3JkZXInICsgc2lkZSArICdXaWR0aCddKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdG9baV0gLT0gcGFyc2VGbG9hdChzdHlsZVsnYm9yZGVyJyArIHNpZGUgKyAnV2lkdGgnXSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH0pKCk7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gdG87XG5cdH1cblx0XG5cdFRldGhlckJhc2UubW9kdWxlcy5wdXNoKHtcblx0ICBwb3NpdGlvbjogZnVuY3Rpb24gcG9zaXRpb24oX3JlZikge1xuXHQgICAgdmFyIF90aGlzID0gdGhpcztcblx0XG5cdCAgICB2YXIgdG9wID0gX3JlZi50b3A7XG5cdCAgICB2YXIgbGVmdCA9IF9yZWYubGVmdDtcblx0ICAgIHZhciB0YXJnZXRBdHRhY2htZW50ID0gX3JlZi50YXJnZXRBdHRhY2htZW50O1xuXHRcblx0ICAgIGlmICghdGhpcy5vcHRpb25zLmNvbnN0cmFpbnRzKSB7XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBfY2FjaGUgPSB0aGlzLmNhY2hlKCdlbGVtZW50LWJvdW5kcycsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIGdldEJvdW5kcyhfdGhpcy5lbGVtZW50KTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIHZhciBoZWlnaHQgPSBfY2FjaGUuaGVpZ2h0O1xuXHQgICAgdmFyIHdpZHRoID0gX2NhY2hlLndpZHRoO1xuXHRcblx0ICAgIGlmICh3aWR0aCA9PT0gMCAmJiBoZWlnaHQgPT09IDAgJiYgdHlwZW9mIHRoaXMubGFzdFNpemUgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgIHZhciBfbGFzdFNpemUgPSB0aGlzLmxhc3RTaXplO1xuXHRcblx0ICAgICAgLy8gSGFuZGxlIHRoZSBpdGVtIGdldHRpbmcgaGlkZGVuIGFzIGEgcmVzdWx0IG9mIG91ciBwb3NpdGlvbmluZyB3aXRob3V0IGdsaXRjaGluZ1xuXHQgICAgICAvLyB0aGUgY2xhc3NlcyBpbiBhbmQgb3V0XG5cdCAgICAgIHdpZHRoID0gX2xhc3RTaXplLndpZHRoO1xuXHQgICAgICBoZWlnaHQgPSBfbGFzdFNpemUuaGVpZ2h0O1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciB0YXJnZXRTaXplID0gdGhpcy5jYWNoZSgndGFyZ2V0LWJvdW5kcycsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIF90aGlzLmdldFRhcmdldEJvdW5kcygpO1xuXHQgICAgfSk7XG5cdFxuXHQgICAgdmFyIHRhcmdldEhlaWdodCA9IHRhcmdldFNpemUuaGVpZ2h0O1xuXHQgICAgdmFyIHRhcmdldFdpZHRoID0gdGFyZ2V0U2l6ZS53aWR0aDtcblx0XG5cdCAgICB2YXIgYWxsQ2xhc3NlcyA9IFt0aGlzLmdldENsYXNzKCdwaW5uZWQnKSwgdGhpcy5nZXRDbGFzcygnb3V0LW9mLWJvdW5kcycpXTtcblx0XG5cdCAgICB0aGlzLm9wdGlvbnMuY29uc3RyYWludHMuZm9yRWFjaChmdW5jdGlvbiAoY29uc3RyYWludCkge1xuXHQgICAgICB2YXIgb3V0T2ZCb3VuZHNDbGFzcyA9IGNvbnN0cmFpbnQub3V0T2ZCb3VuZHNDbGFzcztcblx0ICAgICAgdmFyIHBpbm5lZENsYXNzID0gY29uc3RyYWludC5waW5uZWRDbGFzcztcblx0XG5cdCAgICAgIGlmIChvdXRPZkJvdW5kc0NsYXNzKSB7XG5cdCAgICAgICAgYWxsQ2xhc3Nlcy5wdXNoKG91dE9mQm91bmRzQ2xhc3MpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChwaW5uZWRDbGFzcykge1xuXHQgICAgICAgIGFsbENsYXNzZXMucHVzaChwaW5uZWRDbGFzcyk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHRcblx0ICAgIGFsbENsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7XG5cdCAgICAgIFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ10uZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuXHQgICAgICAgIGFsbENsYXNzZXMucHVzaChjbHMgKyAnLScgKyBzaWRlKTtcblx0ICAgICAgfSk7XG5cdCAgICB9KTtcblx0XG5cdCAgICB2YXIgYWRkQ2xhc3NlcyA9IFtdO1xuXHRcblx0ICAgIHZhciB0QXR0YWNobWVudCA9IGV4dGVuZCh7fSwgdGFyZ2V0QXR0YWNobWVudCk7XG5cdCAgICB2YXIgZUF0dGFjaG1lbnQgPSBleHRlbmQoe30sIHRoaXMuYXR0YWNobWVudCk7XG5cdFxuXHQgICAgdGhpcy5vcHRpb25zLmNvbnN0cmFpbnRzLmZvckVhY2goZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcblx0ICAgICAgdmFyIHRvID0gY29uc3RyYWludC50bztcblx0ICAgICAgdmFyIGF0dGFjaG1lbnQgPSBjb25zdHJhaW50LmF0dGFjaG1lbnQ7XG5cdCAgICAgIHZhciBwaW4gPSBjb25zdHJhaW50LnBpbjtcblx0XG5cdCAgICAgIGlmICh0eXBlb2YgYXR0YWNobWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICBhdHRhY2htZW50ID0gJyc7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBjaGFuZ2VBdHRhY2hYID0gdW5kZWZpbmVkLFxuXHQgICAgICAgICAgY2hhbmdlQXR0YWNoWSA9IHVuZGVmaW5lZDtcblx0ICAgICAgaWYgKGF0dGFjaG1lbnQuaW5kZXhPZignICcpID49IDApIHtcblx0ICAgICAgICB2YXIgX2F0dGFjaG1lbnQkc3BsaXQgPSBhdHRhY2htZW50LnNwbGl0KCcgJyk7XG5cdFxuXHQgICAgICAgIHZhciBfYXR0YWNobWVudCRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfYXR0YWNobWVudCRzcGxpdCwgMik7XG5cdFxuXHQgICAgICAgIGNoYW5nZUF0dGFjaFkgPSBfYXR0YWNobWVudCRzcGxpdDJbMF07XG5cdCAgICAgICAgY2hhbmdlQXR0YWNoWCA9IF9hdHRhY2htZW50JHNwbGl0MlsxXTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBjaGFuZ2VBdHRhY2hYID0gY2hhbmdlQXR0YWNoWSA9IGF0dGFjaG1lbnQ7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBib3VuZHMgPSBnZXRCb3VuZGluZ1JlY3QoX3RoaXMsIHRvKTtcblx0XG5cdCAgICAgIGlmIChjaGFuZ2VBdHRhY2hZID09PSAndGFyZ2V0JyB8fCBjaGFuZ2VBdHRhY2hZID09PSAnYm90aCcpIHtcblx0ICAgICAgICBpZiAodG9wIDwgYm91bmRzWzFdICYmIHRBdHRhY2htZW50LnRvcCA9PT0gJ3RvcCcpIHtcblx0ICAgICAgICAgIHRvcCArPSB0YXJnZXRIZWlnaHQ7XG5cdCAgICAgICAgICB0QXR0YWNobWVudC50b3AgPSAnYm90dG9tJztcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICh0b3AgKyBoZWlnaHQgPiBib3VuZHNbM10gJiYgdEF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJykge1xuXHQgICAgICAgICAgdG9wIC09IHRhcmdldEhlaWdodDtcblx0ICAgICAgICAgIHRBdHRhY2htZW50LnRvcCA9ICd0b3AnO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGNoYW5nZUF0dGFjaFkgPT09ICd0b2dldGhlcicpIHtcblx0ICAgICAgICBpZiAodEF0dGFjaG1lbnQudG9wID09PSAndG9wJykge1xuXHQgICAgICAgICAgaWYgKGVBdHRhY2htZW50LnRvcCA9PT0gJ2JvdHRvbScgJiYgdG9wIDwgYm91bmRzWzFdKSB7XG5cdCAgICAgICAgICAgIHRvcCArPSB0YXJnZXRIZWlnaHQ7XG5cdCAgICAgICAgICAgIHRBdHRhY2htZW50LnRvcCA9ICdib3R0b20nO1xuXHRcblx0ICAgICAgICAgICAgdG9wICs9IGhlaWdodDtcblx0ICAgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ3RvcCc7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKGVBdHRhY2htZW50LnRvcCA9PT0gJ3RvcCcgJiYgdG9wICsgaGVpZ2h0ID4gYm91bmRzWzNdICYmIHRvcCAtIChoZWlnaHQgLSB0YXJnZXRIZWlnaHQpID49IGJvdW5kc1sxXSkge1xuXHQgICAgICAgICAgICB0b3AgLT0gaGVpZ2h0IC0gdGFyZ2V0SGVpZ2h0O1xuXHQgICAgICAgICAgICB0QXR0YWNobWVudC50b3AgPSAnYm90dG9tJztcblx0XG5cdCAgICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICdib3R0b20nO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKHRBdHRhY2htZW50LnRvcCA9PT0gJ2JvdHRvbScpIHtcblx0ICAgICAgICAgIGlmIChlQXR0YWNobWVudC50b3AgPT09ICd0b3AnICYmIHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSkge1xuXHQgICAgICAgICAgICB0b3AgLT0gdGFyZ2V0SGVpZ2h0O1xuXHQgICAgICAgICAgICB0QXR0YWNobWVudC50b3AgPSAndG9wJztcblx0XG5cdCAgICAgICAgICAgIHRvcCAtPSBoZWlnaHQ7XG5cdCAgICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICdib3R0b20nO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChlQXR0YWNobWVudC50b3AgPT09ICdib3R0b20nICYmIHRvcCA8IGJvdW5kc1sxXSAmJiB0b3AgKyAoaGVpZ2h0ICogMiAtIHRhcmdldEhlaWdodCkgPD0gYm91bmRzWzNdKSB7XG5cdCAgICAgICAgICAgIHRvcCArPSBoZWlnaHQgLSB0YXJnZXRIZWlnaHQ7XG5cdCAgICAgICAgICAgIHRBdHRhY2htZW50LnRvcCA9ICd0b3AnO1xuXHRcblx0ICAgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ3RvcCc7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAodEF0dGFjaG1lbnQudG9wID09PSAnbWlkZGxlJykge1xuXHQgICAgICAgICAgaWYgKHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSAmJiBlQXR0YWNobWVudC50b3AgPT09ICd0b3AnKSB7XG5cdCAgICAgICAgICAgIHRvcCAtPSBoZWlnaHQ7XG5cdCAgICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICdib3R0b20nO1xuXHQgICAgICAgICAgfSBlbHNlIGlmICh0b3AgPCBib3VuZHNbMV0gJiYgZUF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJykge1xuXHQgICAgICAgICAgICB0b3AgKz0gaGVpZ2h0O1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC50b3AgPSAndG9wJztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChjaGFuZ2VBdHRhY2hYID09PSAndGFyZ2V0JyB8fCBjaGFuZ2VBdHRhY2hYID09PSAnYm90aCcpIHtcblx0ICAgICAgICBpZiAobGVmdCA8IGJvdW5kc1swXSAmJiB0QXR0YWNobWVudC5sZWZ0ID09PSAnbGVmdCcpIHtcblx0ICAgICAgICAgIGxlZnQgKz0gdGFyZ2V0V2lkdGg7XG5cdCAgICAgICAgICB0QXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0Jztcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmIChsZWZ0ICsgd2lkdGggPiBib3VuZHNbMl0gJiYgdEF0dGFjaG1lbnQubGVmdCA9PT0gJ3JpZ2h0Jykge1xuXHQgICAgICAgICAgbGVmdCAtPSB0YXJnZXRXaWR0aDtcblx0ICAgICAgICAgIHRBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoY2hhbmdlQXR0YWNoWCA9PT0gJ3RvZ2V0aGVyJykge1xuXHQgICAgICAgIGlmIChsZWZ0IDwgYm91bmRzWzBdICYmIHRBdHRhY2htZW50LmxlZnQgPT09ICdsZWZ0Jykge1xuXHQgICAgICAgICAgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdyaWdodCcpIHtcblx0ICAgICAgICAgICAgbGVmdCArPSB0YXJnZXRXaWR0aDtcblx0ICAgICAgICAgICAgdEF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG5cdFxuXHQgICAgICAgICAgICBsZWZ0ICs9IHdpZHRoO1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ2xlZnQnO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChlQXR0YWNobWVudC5sZWZ0ID09PSAnbGVmdCcpIHtcblx0ICAgICAgICAgICAgbGVmdCArPSB0YXJnZXRXaWR0aDtcblx0ICAgICAgICAgICAgdEF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG5cdFxuXHQgICAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0Jztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2UgaWYgKGxlZnQgKyB3aWR0aCA+IGJvdW5kc1syXSAmJiB0QXR0YWNobWVudC5sZWZ0ID09PSAncmlnaHQnKSB7XG5cdCAgICAgICAgICBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ2xlZnQnKSB7XG5cdCAgICAgICAgICAgIGxlZnQgLT0gdGFyZ2V0V2lkdGg7XG5cdCAgICAgICAgICAgIHRBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG5cdFxuXHQgICAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0Jztcblx0ICAgICAgICAgIH0gZWxzZSBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ3JpZ2h0Jykge1xuXHQgICAgICAgICAgICBsZWZ0IC09IHRhcmdldFdpZHRoO1xuXHQgICAgICAgICAgICB0QXR0YWNobWVudC5sZWZ0ID0gJ2xlZnQnO1xuXHRcblx0ICAgICAgICAgICAgbGVmdCArPSB3aWR0aDtcblx0ICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0Jztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2UgaWYgKHRBdHRhY2htZW50LmxlZnQgPT09ICdjZW50ZXInKSB7XG5cdCAgICAgICAgICBpZiAobGVmdCArIHdpZHRoID4gYm91bmRzWzJdICYmIGVBdHRhY2htZW50LmxlZnQgPT09ICdsZWZ0Jykge1xuXHQgICAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0Jztcblx0ICAgICAgICAgIH0gZWxzZSBpZiAobGVmdCA8IGJvdW5kc1swXSAmJiBlQXR0YWNobWVudC5sZWZ0ID09PSAncmlnaHQnKSB7XG5cdCAgICAgICAgICAgIGxlZnQgKz0gd2lkdGg7XG5cdCAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoY2hhbmdlQXR0YWNoWSA9PT0gJ2VsZW1lbnQnIHx8IGNoYW5nZUF0dGFjaFkgPT09ICdib3RoJykge1xuXHQgICAgICAgIGlmICh0b3AgPCBib3VuZHNbMV0gJiYgZUF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJykge1xuXHQgICAgICAgICAgdG9wICs9IGhlaWdodDtcblx0ICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICd0b3AnO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSAmJiBlQXR0YWNobWVudC50b3AgPT09ICd0b3AnKSB7XG5cdCAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuXHQgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoY2hhbmdlQXR0YWNoWCA9PT0gJ2VsZW1lbnQnIHx8IGNoYW5nZUF0dGFjaFggPT09ICdib3RoJykge1xuXHQgICAgICAgIGlmIChsZWZ0IDwgYm91bmRzWzBdKSB7XG5cdCAgICAgICAgICBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ3JpZ2h0Jykge1xuXHQgICAgICAgICAgICBsZWZ0ICs9IHdpZHRoO1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ2xlZnQnO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChlQXR0YWNobWVudC5sZWZ0ID09PSAnY2VudGVyJykge1xuXHQgICAgICAgICAgICBsZWZ0ICs9IHdpZHRoIC8gMjtcblx0ICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0Jztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmIChsZWZ0ICsgd2lkdGggPiBib3VuZHNbMl0pIHtcblx0ICAgICAgICAgIGlmIChlQXR0YWNobWVudC5sZWZ0ID09PSAnbGVmdCcpIHtcblx0ICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcblx0ICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdjZW50ZXInKSB7XG5cdCAgICAgICAgICAgIGxlZnQgLT0gd2lkdGggLyAyO1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0Jztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh0eXBlb2YgcGluID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgIHBpbiA9IHBpbi5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAocCkge1xuXHQgICAgICAgICAgcmV0dXJuIHAudHJpbSgpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9IGVsc2UgaWYgKHBpbiA9PT0gdHJ1ZSkge1xuXHQgICAgICAgIHBpbiA9IFsndG9wJywgJ2xlZnQnLCAncmlnaHQnLCAnYm90dG9tJ107XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHBpbiA9IHBpbiB8fCBbXTtcblx0XG5cdCAgICAgIHZhciBwaW5uZWQgPSBbXTtcblx0ICAgICAgdmFyIG9vYiA9IFtdO1xuXHRcblx0ICAgICAgaWYgKHRvcCA8IGJvdW5kc1sxXSkge1xuXHQgICAgICAgIGlmIChwaW4uaW5kZXhPZigndG9wJykgPj0gMCkge1xuXHQgICAgICAgICAgdG9wID0gYm91bmRzWzFdO1xuXHQgICAgICAgICAgcGlubmVkLnB1c2goJ3RvcCcpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBvb2IucHVzaCgndG9wJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodG9wICsgaGVpZ2h0ID4gYm91bmRzWzNdKSB7XG5cdCAgICAgICAgaWYgKHBpbi5pbmRleE9mKCdib3R0b20nKSA+PSAwKSB7XG5cdCAgICAgICAgICB0b3AgPSBib3VuZHNbM10gLSBoZWlnaHQ7XG5cdCAgICAgICAgICBwaW5uZWQucHVzaCgnYm90dG9tJyk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIG9vYi5wdXNoKCdib3R0b20nKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChsZWZ0IDwgYm91bmRzWzBdKSB7XG5cdCAgICAgICAgaWYgKHBpbi5pbmRleE9mKCdsZWZ0JykgPj0gMCkge1xuXHQgICAgICAgICAgbGVmdCA9IGJvdW5kc1swXTtcblx0ICAgICAgICAgIHBpbm5lZC5wdXNoKCdsZWZ0Jyk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIG9vYi5wdXNoKCdsZWZ0Jyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAobGVmdCArIHdpZHRoID4gYm91bmRzWzJdKSB7XG5cdCAgICAgICAgaWYgKHBpbi5pbmRleE9mKCdyaWdodCcpID49IDApIHtcblx0ICAgICAgICAgIGxlZnQgPSBib3VuZHNbMl0gLSB3aWR0aDtcblx0ICAgICAgICAgIHBpbm5lZC5wdXNoKCdyaWdodCcpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBvb2IucHVzaCgncmlnaHQnKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChwaW5uZWQubGVuZ3RoKSB7XG5cdCAgICAgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHZhciBwaW5uZWRDbGFzcyA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMub3B0aW9ucy5waW5uZWRDbGFzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgICAgcGlubmVkQ2xhc3MgPSBfdGhpcy5vcHRpb25zLnBpbm5lZENsYXNzO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcGlubmVkQ2xhc3MgPSBfdGhpcy5nZXRDbGFzcygncGlubmVkJyk7XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgYWRkQ2xhc3Nlcy5wdXNoKHBpbm5lZENsYXNzKTtcblx0ICAgICAgICAgIHBpbm5lZC5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlKSB7XG5cdCAgICAgICAgICAgIGFkZENsYXNzZXMucHVzaChwaW5uZWRDbGFzcyArICctJyArIHNpZGUpO1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSkoKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKG9vYi5sZW5ndGgpIHtcblx0ICAgICAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgdmFyIG9vYkNsYXNzID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgaWYgKHR5cGVvZiBfdGhpcy5vcHRpb25zLm91dE9mQm91bmRzQ2xhc3MgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgICAgIG9vYkNsYXNzID0gX3RoaXMub3B0aW9ucy5vdXRPZkJvdW5kc0NsYXNzO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgb29iQ2xhc3MgPSBfdGhpcy5nZXRDbGFzcygnb3V0LW9mLWJvdW5kcycpO1xuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIGFkZENsYXNzZXMucHVzaChvb2JDbGFzcyk7XG5cdCAgICAgICAgICBvb2IuZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuXHQgICAgICAgICAgICBhZGRDbGFzc2VzLnB1c2gob29iQ2xhc3MgKyAnLScgKyBzaWRlKTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pKCk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChwaW5uZWQuaW5kZXhPZignbGVmdCcpID49IDAgfHwgcGlubmVkLmluZGV4T2YoJ3JpZ2h0JykgPj0gMCkge1xuXHQgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSB0QXR0YWNobWVudC5sZWZ0ID0gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHBpbm5lZC5pbmRleE9mKCd0b3AnKSA+PSAwIHx8IHBpbm5lZC5pbmRleE9mKCdib3R0b20nKSA+PSAwKSB7XG5cdCAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gdEF0dGFjaG1lbnQudG9wID0gZmFsc2U7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh0QXR0YWNobWVudC50b3AgIT09IHRhcmdldEF0dGFjaG1lbnQudG9wIHx8IHRBdHRhY2htZW50LmxlZnQgIT09IHRhcmdldEF0dGFjaG1lbnQubGVmdCB8fCBlQXR0YWNobWVudC50b3AgIT09IF90aGlzLmF0dGFjaG1lbnQudG9wIHx8IGVBdHRhY2htZW50LmxlZnQgIT09IF90aGlzLmF0dGFjaG1lbnQubGVmdCkge1xuXHQgICAgICAgIF90aGlzLnVwZGF0ZUF0dGFjaENsYXNzZXMoZUF0dGFjaG1lbnQsIHRBdHRhY2htZW50KTtcblx0ICAgICAgICBfdGhpcy50cmlnZ2VyKCd1cGRhdGUnLCB7XG5cdCAgICAgICAgICBhdHRhY2htZW50OiBlQXR0YWNobWVudCxcblx0ICAgICAgICAgIHRhcmdldEF0dGFjaG1lbnQ6IHRBdHRhY2htZW50XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHRcblx0ICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgaWYgKCEoX3RoaXMub3B0aW9ucy5hZGRUYXJnZXRDbGFzc2VzID09PSBmYWxzZSkpIHtcblx0ICAgICAgICB1cGRhdGVDbGFzc2VzKF90aGlzLnRhcmdldCwgYWRkQ2xhc3NlcywgYWxsQ2xhc3Nlcyk7XG5cdCAgICAgIH1cblx0ICAgICAgdXBkYXRlQ2xhc3NlcyhfdGhpcy5lbGVtZW50LCBhZGRDbGFzc2VzLCBhbGxDbGFzc2VzKTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIHJldHVybiB7IHRvcDogdG9wLCBsZWZ0OiBsZWZ0IH07XG5cdCAgfVxuXHR9KTtcblx0LyogZ2xvYmFscyBUZXRoZXJCYXNlICovXG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgX1RldGhlckJhc2UkVXRpbHMgPSBUZXRoZXJCYXNlLlV0aWxzO1xuXHR2YXIgZ2V0Qm91bmRzID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0Qm91bmRzO1xuXHR2YXIgdXBkYXRlQ2xhc3NlcyA9IF9UZXRoZXJCYXNlJFV0aWxzLnVwZGF0ZUNsYXNzZXM7XG5cdHZhciBkZWZlciA9IF9UZXRoZXJCYXNlJFV0aWxzLmRlZmVyO1xuXHRcblx0VGV0aGVyQmFzZS5tb2R1bGVzLnB1c2goe1xuXHQgIHBvc2l0aW9uOiBmdW5jdGlvbiBwb3NpdGlvbihfcmVmKSB7XG5cdCAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgIHZhciB0b3AgPSBfcmVmLnRvcDtcblx0ICAgIHZhciBsZWZ0ID0gX3JlZi5sZWZ0O1xuXHRcblx0ICAgIHZhciBfY2FjaGUgPSB0aGlzLmNhY2hlKCdlbGVtZW50LWJvdW5kcycsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIGdldEJvdW5kcyhfdGhpcy5lbGVtZW50KTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIHZhciBoZWlnaHQgPSBfY2FjaGUuaGVpZ2h0O1xuXHQgICAgdmFyIHdpZHRoID0gX2NhY2hlLndpZHRoO1xuXHRcblx0ICAgIHZhciB0YXJnZXRQb3MgPSB0aGlzLmdldFRhcmdldEJvdW5kcygpO1xuXHRcblx0ICAgIHZhciBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG5cdCAgICB2YXIgcmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG5cdFxuXHQgICAgdmFyIGFidXR0ZWQgPSBbXTtcblx0ICAgIGlmICh0b3AgPD0gdGFyZ2V0UG9zLmJvdHRvbSAmJiBib3R0b20gPj0gdGFyZ2V0UG9zLnRvcCkge1xuXHQgICAgICBbJ2xlZnQnLCAncmlnaHQnXS5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlKSB7XG5cdCAgICAgICAgdmFyIHRhcmdldFBvc1NpZGUgPSB0YXJnZXRQb3Nbc2lkZV07XG5cdCAgICAgICAgaWYgKHRhcmdldFBvc1NpZGUgPT09IGxlZnQgfHwgdGFyZ2V0UG9zU2lkZSA9PT0gcmlnaHQpIHtcblx0ICAgICAgICAgIGFidXR0ZWQucHVzaChzaWRlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChsZWZ0IDw9IHRhcmdldFBvcy5yaWdodCAmJiByaWdodCA+PSB0YXJnZXRQb3MubGVmdCkge1xuXHQgICAgICBbJ3RvcCcsICdib3R0b20nXS5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlKSB7XG5cdCAgICAgICAgdmFyIHRhcmdldFBvc1NpZGUgPSB0YXJnZXRQb3Nbc2lkZV07XG5cdCAgICAgICAgaWYgKHRhcmdldFBvc1NpZGUgPT09IHRvcCB8fCB0YXJnZXRQb3NTaWRlID09PSBib3R0b20pIHtcblx0ICAgICAgICAgIGFidXR0ZWQucHVzaChzaWRlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBhbGxDbGFzc2VzID0gW107XG5cdCAgICB2YXIgYWRkQ2xhc3NlcyA9IFtdO1xuXHRcblx0ICAgIHZhciBzaWRlcyA9IFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ107XG5cdCAgICBhbGxDbGFzc2VzLnB1c2godGhpcy5nZXRDbGFzcygnYWJ1dHRlZCcpKTtcblx0ICAgIHNpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcblx0ICAgICAgYWxsQ2xhc3Nlcy5wdXNoKF90aGlzLmdldENsYXNzKCdhYnV0dGVkJykgKyAnLScgKyBzaWRlKTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIGlmIChhYnV0dGVkLmxlbmd0aCkge1xuXHQgICAgICBhZGRDbGFzc2VzLnB1c2godGhpcy5nZXRDbGFzcygnYWJ1dHRlZCcpKTtcblx0ICAgIH1cblx0XG5cdCAgICBhYnV0dGVkLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcblx0ICAgICAgYWRkQ2xhc3Nlcy5wdXNoKF90aGlzLmdldENsYXNzKCdhYnV0dGVkJykgKyAnLScgKyBzaWRlKTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgaWYgKCEoX3RoaXMub3B0aW9ucy5hZGRUYXJnZXRDbGFzc2VzID09PSBmYWxzZSkpIHtcblx0ICAgICAgICB1cGRhdGVDbGFzc2VzKF90aGlzLnRhcmdldCwgYWRkQ2xhc3NlcywgYWxsQ2xhc3Nlcyk7XG5cdCAgICAgIH1cblx0ICAgICAgdXBkYXRlQ2xhc3NlcyhfdGhpcy5lbGVtZW50LCBhZGRDbGFzc2VzLCBhbGxDbGFzc2VzKTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0fSk7XG5cdC8qIGdsb2JhbHMgVGV0aGVyQmFzZSAqL1xuXHRcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF9zbGljZWRUb0FycmF5ID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbJ3JldHVybiddKSBfaVsncmV0dXJuJ10oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZScpOyB9IH07IH0pKCk7XG5cdFxuXHRUZXRoZXJCYXNlLm1vZHVsZXMucHVzaCh7XG5cdCAgcG9zaXRpb246IGZ1bmN0aW9uIHBvc2l0aW9uKF9yZWYpIHtcblx0ICAgIHZhciB0b3AgPSBfcmVmLnRvcDtcblx0ICAgIHZhciBsZWZ0ID0gX3JlZi5sZWZ0O1xuXHRcblx0ICAgIGlmICghdGhpcy5vcHRpb25zLnNoaWZ0KSB7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgc2hpZnQgPSB0aGlzLm9wdGlvbnMuc2hpZnQ7XG5cdCAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5zaGlmdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICBzaGlmdCA9IHRoaXMub3B0aW9ucy5zaGlmdC5jYWxsKHRoaXMsIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfSk7XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIHNoaWZ0VG9wID0gdW5kZWZpbmVkLFxuXHQgICAgICAgIHNoaWZ0TGVmdCA9IHVuZGVmaW5lZDtcblx0ICAgIGlmICh0eXBlb2Ygc2hpZnQgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgIHNoaWZ0ID0gc2hpZnQuc3BsaXQoJyAnKTtcblx0ICAgICAgc2hpZnRbMV0gPSBzaGlmdFsxXSB8fCBzaGlmdFswXTtcblx0XG5cdCAgICAgIHZhciBfc2hpZnQgPSBzaGlmdDtcblx0XG5cdCAgICAgIHZhciBfc2hpZnQyID0gX3NsaWNlZFRvQXJyYXkoX3NoaWZ0LCAyKTtcblx0XG5cdCAgICAgIHNoaWZ0VG9wID0gX3NoaWZ0MlswXTtcblx0ICAgICAgc2hpZnRMZWZ0ID0gX3NoaWZ0MlsxXTtcblx0XG5cdCAgICAgIHNoaWZ0VG9wID0gcGFyc2VGbG9hdChzaGlmdFRvcCwgMTApO1xuXHQgICAgICBzaGlmdExlZnQgPSBwYXJzZUZsb2F0KHNoaWZ0TGVmdCwgMTApO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgc2hpZnRUb3AgPSBzaGlmdC50b3A7XG5cdCAgICAgIHNoaWZ0TGVmdCA9IHNoaWZ0LmxlZnQ7XG5cdCAgICB9XG5cdFxuXHQgICAgdG9wICs9IHNoaWZ0VG9wO1xuXHQgICAgbGVmdCArPSBzaGlmdExlZnQ7XG5cdFxuXHQgICAgcmV0dXJuIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfTtcblx0ICB9XG5cdH0pO1xuXHRyZXR1cm4gVGV0aGVyO1xuXHRcblx0fSkpO1xuXG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qIVxuXHQgKiBCb290c3RyYXAgdjQuMC4wLWJldGEgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbSlcblx0ICogQ29weXJpZ2h0IDIwMTEtMjAxNyBUaGUgQm9vdHN0cmFwIEF1dGhvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ncmFwaHMvY29udHJpYnV0b3JzKVxuXHQgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuXHQgKi9cblx0XG5cdGlmICh0eXBlb2YgalF1ZXJ5ID09PSAndW5kZWZpbmVkJykge1xuXHQgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeS4galF1ZXJ5IG11c3QgYmUgaW5jbHVkZWQgYmVmb3JlIEJvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdC4nKVxuXHR9XG5cdFxuXHQoZnVuY3Rpb24gKCQpIHtcblx0ICB2YXIgdmVyc2lvbiA9ICQuZm4uanF1ZXJ5LnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKVxuXHQgIGlmICgodmVyc2lvblswXSA8IDIgJiYgdmVyc2lvblsxXSA8IDkpIHx8ICh2ZXJzaW9uWzBdID09IDEgJiYgdmVyc2lvblsxXSA9PSA5ICYmIHZlcnNpb25bMl0gPCAxKSB8fCAodmVyc2lvblswXSA+PSA0KSkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IHYxLjkuMSBidXQgbGVzcyB0aGFuIHY0LjAuMCcpXG5cdCAgfVxuXHR9KShqUXVlcnkpO1xuXHRcblx0KGZ1bmN0aW9uICgpIHtcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0LyoqXG5cdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAqIEJvb3RzdHJhcCAodjQuMC4wLWJldGEpOiB1dGlsLmpzXG5cdCAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG5cdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAqL1xuXHRcblx0dmFyIFV0aWwgPSBmdW5jdGlvbiAoJCkge1xuXHRcblx0ICAvKipcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKiBQcml2YXRlIFRyYW5zaXRpb25FbmQgSGVscGVyc1xuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqL1xuXHRcblx0ICB2YXIgdHJhbnNpdGlvbiA9IGZhbHNlO1xuXHRcblx0ICB2YXIgTUFYX1VJRCA9IDEwMDAwMDA7XG5cdFxuXHQgIHZhciBUcmFuc2l0aW9uRW5kRXZlbnQgPSB7XG5cdCAgICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG5cdCAgICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG5cdCAgICBPVHJhbnNpdGlvbjogJ29UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kJyxcblx0ICAgIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xuXHRcblx0ICAgIC8vIHNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcblx0ICB9O2Z1bmN0aW9uIHRvVHlwZShvYmopIHtcblx0ICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16QS1aXSspLylbMV0udG9Mb3dlckNhc2UoKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGlzRWxlbWVudChvYmopIHtcblx0ICAgIHJldHVybiAob2JqWzBdIHx8IG9iaikubm9kZVR5cGU7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBnZXRTcGVjaWFsVHJhbnNpdGlvbkVuZEV2ZW50KCkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgYmluZFR5cGU6IHRyYW5zaXRpb24uZW5kLFxuXHQgICAgICBkZWxlZ2F0ZVR5cGU6IHRyYW5zaXRpb24uZW5kLFxuXHQgICAgICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuXHQgICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuaXModGhpcykpIHtcblx0ICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZFRlc3QoKSB7XG5cdCAgICBpZiAod2luZG93LlFVbml0KSB7XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdib290c3RyYXAnKTtcblx0XG5cdCAgICBmb3IgKHZhciBuYW1lIGluIFRyYW5zaXRpb25FbmRFdmVudCkge1xuXHQgICAgICBpZiAoZWwuc3R5bGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICBlbmQ6IFRyYW5zaXRpb25FbmRFdmVudFtuYW1lXVxuXHQgICAgICAgIH07XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kRW11bGF0b3IoZHVyYXRpb24pIHtcblx0ICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdFxuXHQgICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuXHRcblx0ICAgICQodGhpcykub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgY2FsbGVkID0gdHJ1ZTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHQgICAgICBpZiAoIWNhbGxlZCkge1xuXHQgICAgICAgIFV0aWwudHJpZ2dlclRyYW5zaXRpb25FbmQoX3RoaXMpO1xuXHQgICAgICB9XG5cdCAgICB9LCBkdXJhdGlvbik7XG5cdFxuXHQgICAgcmV0dXJuIHRoaXM7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpIHtcblx0ICAgIHRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRW5kVGVzdCgpO1xuXHRcblx0ICAgICQuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kRW11bGF0b3I7XG5cdFxuXHQgICAgaWYgKFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkpIHtcblx0ICAgICAgJC5ldmVudC5zcGVjaWFsW1V0aWwuVFJBTlNJVElPTl9FTkRdID0gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgLyoqXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKiBQdWJsaWMgVXRpbCBBcGlcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqL1xuXHRcblx0ICB2YXIgVXRpbCA9IHtcblx0XG5cdCAgICBUUkFOU0lUSU9OX0VORDogJ2JzVHJhbnNpdGlvbkVuZCcsXG5cdFxuXHQgICAgZ2V0VUlEOiBmdW5jdGlvbiBnZXRVSUQocHJlZml4KSB7XG5cdCAgICAgIGRvIHtcblx0ICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuXHQgICAgICAgIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogTUFYX1VJRCk7IC8vIFwifn5cIiBhY3RzIGxpa2UgYSBmYXN0ZXIgTWF0aC5mbG9vcigpIGhlcmVcblx0ICAgICAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSk7XG5cdCAgICAgIHJldHVybiBwcmVmaXg7XG5cdCAgICB9LFxuXHQgICAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudDogZnVuY3Rpb24gZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KSB7XG5cdCAgICAgIHZhciBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRhcmdldCcpO1xuXHQgICAgICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSAnIycpIHtcblx0ICAgICAgICBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJykgfHwgJyc7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgdmFyICRzZWxlY3RvciA9ICQoc2VsZWN0b3IpO1xuXHQgICAgICAgIHJldHVybiAkc2VsZWN0b3IubGVuZ3RoID4gMCA/IHNlbGVjdG9yIDogbnVsbDtcblx0ICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgfVxuXHQgICAgfSxcblx0ICAgIHJlZmxvdzogZnVuY3Rpb24gcmVmbG93KGVsZW1lbnQpIHtcblx0ICAgICAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXHQgICAgfSxcblx0ICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmlnZ2VyVHJhbnNpdGlvbkVuZChlbGVtZW50KSB7XG5cdCAgICAgICQoZWxlbWVudCkudHJpZ2dlcih0cmFuc2l0aW9uLmVuZCk7XG5cdCAgICB9LFxuXHQgICAgc3VwcG9ydHNUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBzdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB7XG5cdCAgICAgIHJldHVybiBCb29sZWFuKHRyYW5zaXRpb24pO1xuXHQgICAgfSxcblx0ICAgIHR5cGVDaGVja0NvbmZpZzogZnVuY3Rpb24gdHlwZUNoZWNrQ29uZmlnKGNvbXBvbmVudE5hbWUsIGNvbmZpZywgY29uZmlnVHlwZXMpIHtcblx0ICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gY29uZmlnVHlwZXMpIHtcblx0ICAgICAgICBpZiAoY29uZmlnVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG5cdCAgICAgICAgICB2YXIgZXhwZWN0ZWRUeXBlcyA9IGNvbmZpZ1R5cGVzW3Byb3BlcnR5XTtcblx0ICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbmZpZ1twcm9wZXJ0eV07XG5cdCAgICAgICAgICB2YXIgdmFsdWVUeXBlID0gdmFsdWUgJiYgaXNFbGVtZW50KHZhbHVlKSA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSk7XG5cdFxuXHQgICAgICAgICAgaWYgKCFuZXcgUmVnRXhwKGV4cGVjdGVkVHlwZXMpLnRlc3QodmFsdWVUeXBlKSkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpICsgJzogJyArICgnT3B0aW9uIFwiJyArIHByb3BlcnR5ICsgJ1wiIHByb3ZpZGVkIHR5cGUgXCInICsgdmFsdWVUeXBlICsgJ1wiICcpICsgKCdidXQgZXhwZWN0ZWQgdHlwZSBcIicgKyBleHBlY3RlZFR5cGVzICsgJ1wiLicpKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpO1xuXHRcblx0ICByZXR1cm4gVXRpbDtcblx0fShqUXVlcnkpO1xuXHRcblx0LyoqXG5cdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAqIEJvb3RzdHJhcCAodjQuMC4wLWJldGEpOiBhbGVydC5qc1xuXHQgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgKi9cblx0XG5cdHZhciBBbGVydCA9IGZ1bmN0aW9uICgkKSB7XG5cdFxuXHQgIC8qKlxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqIENvbnN0YW50c1xuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqL1xuXHRcblx0ICB2YXIgTkFNRSA9ICdhbGVydCc7XG5cdCAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYmV0YSc7XG5cdCAgdmFyIERBVEFfS0VZID0gJ2JzLmFsZXJ0Jztcblx0ICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG5cdCAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuXHQgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuXHQgIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuXHRcblx0ICB2YXIgU2VsZWN0b3IgPSB7XG5cdCAgICBESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuXHQgIH07XG5cdFxuXHQgIHZhciBFdmVudCA9IHtcblx0ICAgIENMT1NFOiAnY2xvc2UnICsgRVZFTlRfS0VZLFxuXHQgICAgQ0xPU0VEOiAnY2xvc2VkJyArIEVWRU5UX0tFWSxcblx0ICAgIENMSUNLX0RBVEFfQVBJOiAnY2xpY2snICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG5cdCAgfTtcblx0XG5cdCAgdmFyIENsYXNzTmFtZSA9IHtcblx0ICAgIEFMRVJUOiAnYWxlcnQnLFxuXHQgICAgRkFERTogJ2ZhZGUnLFxuXHQgICAgU0hPVzogJ3Nob3cnXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgICAqIENsYXNzIERlZmluaXRpb25cblx0ICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAgICovXG5cdFxuXHQgIH07XG5cdCAgdmFyIEFsZXJ0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQWxlcnQoZWxlbWVudCkge1xuXHQgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWxlcnQpO1xuXHRcblx0ICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gZ2V0dGVyc1xuXHRcblx0ICAgIC8vIHB1YmxpY1xuXHRcblx0ICAgIEFsZXJ0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKGVsZW1lbnQpIHtcblx0ICAgICAgZWxlbWVudCA9IGVsZW1lbnQgfHwgdGhpcy5fZWxlbWVudDtcblx0XG5cdCAgICAgIHZhciByb290RWxlbWVudCA9IHRoaXMuX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpO1xuXHQgICAgICB2YXIgY3VzdG9tRXZlbnQgPSB0aGlzLl90cmlnZ2VyQ2xvc2VFdmVudChyb290RWxlbWVudCk7XG5cdFxuXHQgICAgICBpZiAoY3VzdG9tRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMuX3JlbW92ZUVsZW1lbnQocm9vdEVsZW1lbnQpO1xuXHQgICAgfTtcblx0XG5cdCAgICBBbGVydC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cdCAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG5cdCAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBwcml2YXRlXG5cdFxuXHQgICAgQWxlcnQucHJvdG90eXBlLl9nZXRSb290RWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRSb290RWxlbWVudChlbGVtZW50KSB7XG5cdCAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcblx0ICAgICAgdmFyIHBhcmVudCA9IGZhbHNlO1xuXHRcblx0ICAgICAgaWYgKHNlbGVjdG9yKSB7XG5cdCAgICAgICAgcGFyZW50ID0gJChzZWxlY3RvcilbMF07XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghcGFyZW50KSB7XG5cdCAgICAgICAgcGFyZW50ID0gJChlbGVtZW50KS5jbG9zZXN0KCcuJyArIENsYXNzTmFtZS5BTEVSVClbMF07XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBwYXJlbnQ7XG5cdCAgICB9O1xuXHRcblx0ICAgIEFsZXJ0LnByb3RvdHlwZS5fdHJpZ2dlckNsb3NlRXZlbnQgPSBmdW5jdGlvbiBfdHJpZ2dlckNsb3NlRXZlbnQoZWxlbWVudCkge1xuXHQgICAgICB2YXIgY2xvc2VFdmVudCA9ICQuRXZlbnQoRXZlbnQuQ0xPU0UpO1xuXHRcblx0ICAgICAgJChlbGVtZW50KS50cmlnZ2VyKGNsb3NlRXZlbnQpO1xuXHQgICAgICByZXR1cm4gY2xvc2VFdmVudDtcblx0ICAgIH07XG5cdFxuXHQgICAgQWxlcnQucHJvdG90eXBlLl9yZW1vdmVFbGVtZW50ID0gZnVuY3Rpb24gX3JlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuXHQgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblx0XG5cdCAgICAgICQoZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXHRcblx0ICAgICAgaWYgKCFVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpIHx8ICEkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuXHQgICAgICAgIHRoaXMuX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQpO1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgJChlbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgcmV0dXJuIF90aGlzMi5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCwgZXZlbnQpO1xuXHQgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcblx0ICAgIH07XG5cdFxuXHQgICAgQWxlcnQucHJvdG90eXBlLl9kZXN0cm95RWxlbWVudCA9IGZ1bmN0aW9uIF9kZXN0cm95RWxlbWVudChlbGVtZW50KSB7XG5cdCAgICAgICQoZWxlbWVudCkuZGV0YWNoKCkudHJpZ2dlcihFdmVudC5DTE9TRUQpLnJlbW92ZSgpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBzdGF0aWNcblx0XG5cdCAgICBBbGVydC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyICRlbGVtZW50ID0gJCh0aGlzKTtcblx0ICAgICAgICB2YXIgZGF0YSA9ICRlbGVtZW50LmRhdGEoREFUQV9LRVkpO1xuXHRcblx0ICAgICAgICBpZiAoIWRhdGEpIHtcblx0ICAgICAgICAgIGRhdGEgPSBuZXcgQWxlcnQodGhpcyk7XG5cdCAgICAgICAgICAkZWxlbWVudC5kYXRhKERBVEFfS0VZLCBkYXRhKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmIChjb25maWcgPT09ICdjbG9zZScpIHtcblx0ICAgICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBBbGVydC5faGFuZGxlRGlzbWlzcyA9IGZ1bmN0aW9uIF9oYW5kbGVEaXNtaXNzKGFsZXJ0SW5zdGFuY2UpIHtcblx0ICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgIGlmIChldmVudCkge1xuXHQgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGFsZXJ0SW5zdGFuY2UuY2xvc2UodGhpcyk7XG5cdCAgICAgIH07XG5cdCAgICB9O1xuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhBbGVydCwgbnVsbCwgW3tcblx0ICAgICAga2V5OiAnVkVSU0lPTicsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIHJldHVybiBWRVJTSU9OO1xuXHQgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIEFsZXJ0O1xuXHQgIH0oKTtcblx0XG5cdCAgLyoqXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0XG5cdCAgJChkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRJU01JU1MsIEFsZXJ0Ll9oYW5kbGVEaXNtaXNzKG5ldyBBbGVydCgpKSk7XG5cdFxuXHQgIC8qKlxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqIGpRdWVyeVxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqL1xuXHRcblx0ICAkLmZuW05BTUVdID0gQWxlcnQuX2pRdWVyeUludGVyZmFjZTtcblx0ICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQWxlcnQ7XG5cdCAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcblx0ICAgIHJldHVybiBBbGVydC5falF1ZXJ5SW50ZXJmYWNlO1xuXHQgIH07XG5cdFxuXHQgIHJldHVybiBBbGVydDtcblx0fShqUXVlcnkpO1xuXHRcblx0LyoqXG5cdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAqIEJvb3RzdHJhcCAodjQuMC4wLWJldGEpOiBidXR0b24uanNcblx0ICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICovXG5cdFxuXHR2YXIgQnV0dG9uID0gZnVuY3Rpb24gKCQpIHtcblx0XG5cdCAgLyoqXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICogQ29uc3RhbnRzXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICovXG5cdFxuXHQgIHZhciBOQU1FID0gJ2J1dHRvbic7XG5cdCAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYmV0YSc7XG5cdCAgdmFyIERBVEFfS0VZID0gJ2JzLmJ1dHRvbic7XG5cdCAgdmFyIEVWRU5UX0tFWSA9ICcuJyArIERBVEFfS0VZO1xuXHQgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcblx0ICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcblx0XG5cdCAgdmFyIENsYXNzTmFtZSA9IHtcblx0ICAgIEFDVElWRTogJ2FjdGl2ZScsXG5cdCAgICBCVVRUT046ICdidG4nLFxuXHQgICAgRk9DVVM6ICdmb2N1cydcblx0ICB9O1xuXHRcblx0ICB2YXIgU2VsZWN0b3IgPSB7XG5cdCAgICBEQVRBX1RPR0dMRV9DQVJST1Q6ICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJyxcblx0ICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXScsXG5cdCAgICBJTlBVVDogJ2lucHV0Jyxcblx0ICAgIEFDVElWRTogJy5hY3RpdmUnLFxuXHQgICAgQlVUVE9OOiAnLmJ0bidcblx0ICB9O1xuXHRcblx0ICB2YXIgRXZlbnQgPSB7XG5cdCAgICBDTElDS19EQVRBX0FQSTogJ2NsaWNrJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcblx0ICAgIEZPQ1VTX0JMVVJfREFUQV9BUEk6ICdmb2N1cycgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVkgKyAnICcgKyAoJ2JsdXInICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZKVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG5cdCAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgICAqL1xuXHRcblx0ICB9O1xuXHQgIHZhciBCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBCdXR0b24oZWxlbWVudCkge1xuXHQgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnV0dG9uKTtcblx0XG5cdCAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIGdldHRlcnNcblx0XG5cdCAgICAvLyBwdWJsaWNcblx0XG5cdCAgICBCdXR0b24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcblx0ICAgICAgdmFyIHRyaWdnZXJDaGFuZ2VFdmVudCA9IHRydWU7XG5cdCAgICAgIHZhciBhZGRBcmlhUHJlc3NlZCA9IHRydWU7XG5cdCAgICAgIHZhciByb290RWxlbWVudCA9ICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5EQVRBX1RPR0dMRSlbMF07XG5cdFxuXHQgICAgICBpZiAocm9vdEVsZW1lbnQpIHtcblx0ICAgICAgICB2YXIgaW5wdXQgPSAkKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuSU5QVVQpWzBdO1xuXHRcblx0ICAgICAgICBpZiAoaW5wdXQpIHtcblx0ICAgICAgICAgIGlmIChpbnB1dC50eXBlID09PSAncmFkaW8nKSB7XG5cdCAgICAgICAgICAgIGlmIChpbnB1dC5jaGVja2VkICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkpIHtcblx0ICAgICAgICAgICAgICB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9ICQocm9vdEVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFKVswXTtcblx0XG5cdCAgICAgICAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgICQoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuXHQgICAgICAgICAgICBpZiAoaW5wdXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IHJvb3RFbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCBpbnB1dC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykgfHwgcm9vdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSAhJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblx0ICAgICAgICAgICAgJChpbnB1dCkudHJpZ2dlcignY2hhbmdlJyk7XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgaW5wdXQuZm9jdXMoKTtcblx0ICAgICAgICAgIGFkZEFyaWFQcmVzc2VkID0gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoYWRkQXJpYVByZXNzZWQpIHtcblx0ICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgISQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG5cdCAgICAgICAgJCh0aGlzLl9lbGVtZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBCdXR0b24ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuXHQgICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuXHQgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gc3RhdGljXG5cdFxuXHQgICAgQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuXHQgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSk7XG5cdFxuXHQgICAgICAgIGlmICghZGF0YSkge1xuXHQgICAgICAgICAgZGF0YSA9IG5ldyBCdXR0b24odGhpcyk7XG5cdCAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKGNvbmZpZyA9PT0gJ3RvZ2dsZScpIHtcblx0ICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhCdXR0b24sIG51bGwsIFt7XG5cdCAgICAgIGtleTogJ1ZFUlNJT04nLFxuXHQgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICByZXR1cm4gVkVSU0lPTjtcblx0ICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBCdXR0b247XG5cdCAgfSgpO1xuXHRcblx0ICAvKipcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqL1xuXHRcblx0ICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEVfQ0FSUk9ULCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFxuXHQgICAgdmFyIGJ1dHRvbiA9IGV2ZW50LnRhcmdldDtcblx0XG5cdCAgICBpZiAoISQoYnV0dG9uKS5oYXNDbGFzcyhDbGFzc05hbWUuQlVUVE9OKSkge1xuXHQgICAgICBidXR0b24gPSAkKGJ1dHRvbikuY2xvc2VzdChTZWxlY3Rvci5CVVRUT04pO1xuXHQgICAgfVxuXHRcblx0ICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJChidXR0b24pLCAndG9nZ2xlJyk7XG5cdCAgfSkub24oRXZlbnQuRk9DVVNfQkxVUl9EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEVfQ0FSUk9ULCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgIHZhciBidXR0b24gPSAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTZWxlY3Rvci5CVVRUT04pWzBdO1xuXHQgICAgJChidXR0b24pLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5GT0NVUywgL15mb2N1cyhpbik/JC8udGVzdChldmVudC50eXBlKSk7XG5cdCAgfSk7XG5cdFxuXHQgIC8qKlxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqIGpRdWVyeVxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqL1xuXHRcblx0ICAkLmZuW05BTUVdID0gQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2U7XG5cdCAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IEJ1dHRvbjtcblx0ICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuXHQgICAgcmV0dXJuIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuXHQgIH07XG5cdFxuXHQgIHJldHVybiBCdXR0b247XG5cdH0oalF1ZXJ5KTtcblx0XG5cdC8qKlxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgKiBCb290c3RyYXAgKHY0LjAuMC1iZXRhKTogY2Fyb3VzZWwuanNcblx0ICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICovXG5cdFxuXHR2YXIgQ2Fyb3VzZWwgPSBmdW5jdGlvbiAoJCkge1xuXHRcblx0ICAvKipcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKiBDb25zdGFudHNcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0XG5cdCAgdmFyIE5BTUUgPSAnY2Fyb3VzZWwnO1xuXHQgIHZhciBWRVJTSU9OID0gJzQuMC4wLWJldGEnO1xuXHQgIHZhciBEQVRBX0tFWSA9ICdicy5jYXJvdXNlbCc7XG5cdCAgdmFyIEVWRU5UX0tFWSA9ICcuJyArIERBVEFfS0VZO1xuXHQgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcblx0ICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcblx0ICB2YXIgVFJBTlNJVElPTl9EVVJBVElPTiA9IDYwMDtcblx0ICB2YXIgQVJST1dfTEVGVF9LRVlDT0RFID0gMzc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGxlZnQgYXJyb3cga2V5XG5cdCAgdmFyIEFSUk9XX1JJR0hUX0tFWUNPREUgPSAzOTsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgcmlnaHQgYXJyb3cga2V5XG5cdCAgdmFyIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgPSA1MDA7IC8vIFRpbWUgZm9yIG1vdXNlIGNvbXBhdCBldmVudHMgdG8gZmlyZSBhZnRlciB0b3VjaFxuXHRcblx0ICB2YXIgRGVmYXVsdCA9IHtcblx0ICAgIGludGVydmFsOiA1MDAwLFxuXHQgICAga2V5Ym9hcmQ6IHRydWUsXG5cdCAgICBzbGlkZTogZmFsc2UsXG5cdCAgICBwYXVzZTogJ2hvdmVyJyxcblx0ICAgIHdyYXA6IHRydWVcblx0ICB9O1xuXHRcblx0ICB2YXIgRGVmYXVsdFR5cGUgPSB7XG5cdCAgICBpbnRlcnZhbDogJyhudW1iZXJ8Ym9vbGVhbiknLFxuXHQgICAga2V5Ym9hcmQ6ICdib29sZWFuJyxcblx0ICAgIHNsaWRlOiAnKGJvb2xlYW58c3RyaW5nKScsXG5cdCAgICBwYXVzZTogJyhzdHJpbmd8Ym9vbGVhbiknLFxuXHQgICAgd3JhcDogJ2Jvb2xlYW4nXG5cdCAgfTtcblx0XG5cdCAgdmFyIERpcmVjdGlvbiA9IHtcblx0ICAgIE5FWFQ6ICduZXh0Jyxcblx0ICAgIFBSRVY6ICdwcmV2Jyxcblx0ICAgIExFRlQ6ICdsZWZ0Jyxcblx0ICAgIFJJR0hUOiAncmlnaHQnXG5cdCAgfTtcblx0XG5cdCAgdmFyIEV2ZW50ID0ge1xuXHQgICAgU0xJREU6ICdzbGlkZScgKyBFVkVOVF9LRVksXG5cdCAgICBTTElEOiAnc2xpZCcgKyBFVkVOVF9LRVksXG5cdCAgICBLRVlET1dOOiAna2V5ZG93bicgKyBFVkVOVF9LRVksXG5cdCAgICBNT1VTRUVOVEVSOiAnbW91c2VlbnRlcicgKyBFVkVOVF9LRVksXG5cdCAgICBNT1VTRUxFQVZFOiAnbW91c2VsZWF2ZScgKyBFVkVOVF9LRVksXG5cdCAgICBUT1VDSEVORDogJ3RvdWNoZW5kJyArIEVWRU5UX0tFWSxcblx0ICAgIExPQURfREFUQV9BUEk6ICdsb2FkJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcblx0ICAgIENMSUNLX0RBVEFfQVBJOiAnY2xpY2snICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG5cdCAgfTtcblx0XG5cdCAgdmFyIENsYXNzTmFtZSA9IHtcblx0ICAgIENBUk9VU0VMOiAnY2Fyb3VzZWwnLFxuXHQgICAgQUNUSVZFOiAnYWN0aXZlJyxcblx0ICAgIFNMSURFOiAnc2xpZGUnLFxuXHQgICAgUklHSFQ6ICdjYXJvdXNlbC1pdGVtLXJpZ2h0Jyxcblx0ICAgIExFRlQ6ICdjYXJvdXNlbC1pdGVtLWxlZnQnLFxuXHQgICAgTkVYVDogJ2Nhcm91c2VsLWl0ZW0tbmV4dCcsXG5cdCAgICBQUkVWOiAnY2Fyb3VzZWwtaXRlbS1wcmV2Jyxcblx0ICAgIElURU06ICdjYXJvdXNlbC1pdGVtJ1xuXHQgIH07XG5cdFxuXHQgIHZhciBTZWxlY3RvciA9IHtcblx0ICAgIEFDVElWRTogJy5hY3RpdmUnLFxuXHQgICAgQUNUSVZFX0lURU06ICcuYWN0aXZlLmNhcm91c2VsLWl0ZW0nLFxuXHQgICAgSVRFTTogJy5jYXJvdXNlbC1pdGVtJyxcblx0ICAgIE5FWFRfUFJFVjogJy5jYXJvdXNlbC1pdGVtLW5leHQsIC5jYXJvdXNlbC1pdGVtLXByZXYnLFxuXHQgICAgSU5ESUNBVE9SUzogJy5jYXJvdXNlbC1pbmRpY2F0b3JzJyxcblx0ICAgIERBVEFfU0xJREU6ICdbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXScsXG5cdCAgICBEQVRBX1JJREU6ICdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgICAqIENsYXNzIERlZmluaXRpb25cblx0ICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAgICovXG5cdFxuXHQgIH07XG5cdCAgdmFyIENhcm91c2VsID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQ2Fyb3VzZWwoZWxlbWVudCwgY29uZmlnKSB7XG5cdCAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYXJvdXNlbCk7XG5cdFxuXHQgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG5cdCAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcblx0ICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG5cdFxuXHQgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuXHQgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcblx0XG5cdCAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gbnVsbDtcblx0XG5cdCAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuXHQgICAgICB0aGlzLl9lbGVtZW50ID0gJChlbGVtZW50KVswXTtcblx0ICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuSU5ESUNBVE9SUylbMF07XG5cdFxuXHQgICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIGdldHRlcnNcblx0XG5cdCAgICAvLyBwdWJsaWNcblx0XG5cdCAgICBDYXJvdXNlbC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG5cdCAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG5cdCAgICAgICAgdGhpcy5fc2xpZGUoRGlyZWN0aW9uLk5FWFQpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIENhcm91c2VsLnByb3RvdHlwZS5uZXh0V2hlblZpc2libGUgPSBmdW5jdGlvbiBuZXh0V2hlblZpc2libGUoKSB7XG5cdCAgICAgIC8vIERvbid0IGNhbGwgbmV4dCB3aGVuIHRoZSBwYWdlIGlzbid0IHZpc2libGVcblx0ICAgICAgaWYgKCFkb2N1bWVudC5oaWRkZW4pIHtcblx0ICAgICAgICB0aGlzLm5leHQoKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBDYXJvdXNlbC5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uIHByZXYoKSB7XG5cdCAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG5cdCAgICAgICAgdGhpcy5fc2xpZGUoRGlyZWN0aW9uLlBSRVYpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIENhcm91c2VsLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKGV2ZW50KSB7XG5cdCAgICAgIGlmICghZXZlbnQpIHtcblx0ICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuTkVYVF9QUkVWKVswXSAmJiBVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKSB7XG5cdCAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KTtcblx0ICAgICAgICB0aGlzLmN5Y2xlKHRydWUpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcblx0ICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuXHQgICAgfTtcblx0XG5cdCAgICBDYXJvdXNlbC5wcm90b3R5cGUuY3ljbGUgPSBmdW5jdGlvbiBjeWNsZShldmVudCkge1xuXHQgICAgICBpZiAoIWV2ZW50KSB7XG5cdCAgICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKHRoaXMuX2ludGVydmFsKSB7XG5cdCAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG5cdCAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodGhpcy5fY29uZmlnLmludGVydmFsICYmICF0aGlzLl9pc1BhdXNlZCkge1xuXHQgICAgICAgIHRoaXMuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA/IHRoaXMubmV4dFdoZW5WaXNpYmxlIDogdGhpcy5uZXh0KS5iaW5kKHRoaXMpLCB0aGlzLl9jb25maWcuaW50ZXJ2YWwpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIENhcm91c2VsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIHRvKGluZGV4KSB7XG5cdCAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXHRcblx0ICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9ICQodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkVfSVRFTSlbMF07XG5cdFxuXHQgICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudCk7XG5cdFxuXHQgICAgICBpZiAoaW5kZXggPiB0aGlzLl9pdGVtcy5sZW5ndGggLSAxIHx8IGluZGV4IDwgMCkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKHRoaXMuX2lzU2xpZGluZykge1xuXHQgICAgICAgICQodGhpcy5fZWxlbWVudCkub25lKEV2ZW50LlNMSUQsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHJldHVybiBfdGhpczMudG8oaW5kZXgpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGFjdGl2ZUluZGV4ID09PSBpbmRleCkge1xuXHQgICAgICAgIHRoaXMucGF1c2UoKTtcblx0ICAgICAgICB0aGlzLmN5Y2xlKCk7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgZGlyZWN0aW9uID0gaW5kZXggPiBhY3RpdmVJbmRleCA/IERpcmVjdGlvbi5ORVhUIDogRGlyZWN0aW9uLlBSRVY7XG5cdFxuXHQgICAgICB0aGlzLl9zbGlkZShkaXJlY3Rpb24sIHRoaXMuX2l0ZW1zW2luZGV4XSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIENhcm91c2VsLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcblx0ICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRVZFTlRfS0VZKTtcblx0ICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcblx0XG5cdCAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcblx0ICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcblx0ICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG5cdCAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcblx0ICAgICAgdGhpcy5faXNQYXVzZWQgPSBudWxsO1xuXHQgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBudWxsO1xuXHQgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcblx0ICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSBudWxsO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBwcml2YXRlXG5cdFxuXHQgICAgQ2Fyb3VzZWwucHJvdG90eXBlLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuXHQgICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgRGVmYXVsdCwgY29uZmlnKTtcblx0ICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XG5cdCAgICAgIHJldHVybiBjb25maWc7XG5cdCAgICB9O1xuXHRcblx0ICAgIENhcm91c2VsLnByb3RvdHlwZS5fYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG5cdCAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXHRcblx0ICAgICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuXHQgICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuS0VZRE9XTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICByZXR1cm4gX3RoaXM0Ll9rZXlkb3duKGV2ZW50KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKHRoaXMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuXHQgICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuTU9VU0VFTlRFUiwgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICByZXR1cm4gX3RoaXM0LnBhdXNlKGV2ZW50KTtcblx0ICAgICAgICB9KS5vbihFdmVudC5NT1VTRUxFQVZFLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgIHJldHVybiBfdGhpczQuY3ljbGUoZXZlbnQpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcblx0ICAgICAgICAgIC8vIGlmIGl0J3MgYSB0b3VjaC1lbmFibGVkIGRldmljZSwgbW91c2VlbnRlci9sZWF2ZSBhcmUgZmlyZWQgYXNcblx0ICAgICAgICAgIC8vIHBhcnQgb2YgdGhlIG1vdXNlIGNvbXBhdGliaWxpdHkgZXZlbnRzIG9uIGZpcnN0IHRhcCAtIHRoZSBjYXJvdXNlbFxuXHQgICAgICAgICAgLy8gd291bGQgc3RvcCBjeWNsaW5nIHVudGlsIHVzZXIgdGFwcGVkIG91dCBvZiBpdDtcblx0ICAgICAgICAgIC8vIGhlcmUsIHdlIGxpc3RlbiBmb3IgdG91Y2hlbmQsIGV4cGxpY2l0bHkgcGF1c2UgdGhlIGNhcm91c2VsXG5cdCAgICAgICAgICAvLyAoYXMgaWYgaXQncyB0aGUgc2Vjb25kIHRpbWUgd2UgdGFwIG9uIGl0LCBtb3VzZWVudGVyIGNvbXBhdCBldmVudFxuXHQgICAgICAgICAgLy8gaXMgTk9UIGZpcmVkKSBhbmQgYWZ0ZXIgYSB0aW1lb3V0ICh0byBhbGxvdyBmb3IgbW91c2UgY29tcGF0aWJpbGl0eVxuXHQgICAgICAgICAgLy8gZXZlbnRzIHRvIGZpcmUpIHdlIGV4cGxpY2l0bHkgcmVzdGFydCBjeWNsaW5nXG5cdCAgICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LlRPVUNIRU5ELCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIF90aGlzNC5wYXVzZSgpO1xuXHQgICAgICAgICAgICBpZiAoX3RoaXM0LnRvdWNoVGltZW91dCkge1xuXHQgICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpczQudG91Y2hUaW1lb3V0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBfdGhpczQudG91Y2hUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0LmN5Y2xlKGV2ZW50KTtcblx0ICAgICAgICAgICAgfSwgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCArIF90aGlzNC5fY29uZmlnLmludGVydmFsKTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBDYXJvdXNlbC5wcm90b3R5cGUuX2tleWRvd24gPSBmdW5jdGlvbiBfa2V5ZG93bihldmVudCkge1xuXHQgICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHtcblx0ICAgICAgICBjYXNlIEFSUk9XX0xFRlRfS0VZQ09ERTpcblx0ICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdCAgICAgICAgICB0aGlzLnByZXYoKTtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIGNhc2UgQVJST1dfUklHSFRfS0VZQ09ERTpcblx0ICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdCAgICAgICAgICB0aGlzLm5leHQoKTtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgQ2Fyb3VzZWwucHJvdG90eXBlLl9nZXRJdGVtSW5kZXggPSBmdW5jdGlvbiBfZ2V0SXRlbUluZGV4KGVsZW1lbnQpIHtcblx0ICAgICAgdGhpcy5faXRlbXMgPSAkLm1ha2VBcnJheSgkKGVsZW1lbnQpLnBhcmVudCgpLmZpbmQoU2VsZWN0b3IuSVRFTSkpO1xuXHQgICAgICByZXR1cm4gdGhpcy5faXRlbXMuaW5kZXhPZihlbGVtZW50KTtcblx0ICAgIH07XG5cdFxuXHQgICAgQ2Fyb3VzZWwucHJvdG90eXBlLl9nZXRJdGVtQnlEaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0SXRlbUJ5RGlyZWN0aW9uKGRpcmVjdGlvbiwgYWN0aXZlRWxlbWVudCkge1xuXHQgICAgICB2YXIgaXNOZXh0RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTkVYVDtcblx0ICAgICAgdmFyIGlzUHJldkRpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlBSRVY7XG5cdCAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcblx0ICAgICAgdmFyIGxhc3RJdGVtSW5kZXggPSB0aGlzLl9pdGVtcy5sZW5ndGggLSAxO1xuXHQgICAgICB2YXIgaXNHb2luZ1RvV3JhcCA9IGlzUHJldkRpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gMCB8fCBpc05leHREaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IGxhc3RJdGVtSW5kZXg7XG5cdFxuXHQgICAgICBpZiAoaXNHb2luZ1RvV3JhcCAmJiAhdGhpcy5fY29uZmlnLndyYXApIHtcblx0ICAgICAgICByZXR1cm4gYWN0aXZlRWxlbWVudDtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIGRlbHRhID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUFJFViA/IC0xIDogMTtcblx0ICAgICAgdmFyIGl0ZW1JbmRleCA9IChhY3RpdmVJbmRleCArIGRlbHRhKSAlIHRoaXMuX2l0ZW1zLmxlbmd0aDtcblx0XG5cdCAgICAgIHJldHVybiBpdGVtSW5kZXggPT09IC0xID8gdGhpcy5faXRlbXNbdGhpcy5faXRlbXMubGVuZ3RoIC0gMV0gOiB0aGlzLl9pdGVtc1tpdGVtSW5kZXhdO1xuXHQgICAgfTtcblx0XG5cdCAgICBDYXJvdXNlbC5wcm90b3R5cGUuX3RyaWdnZXJTbGlkZUV2ZW50ID0gZnVuY3Rpb24gX3RyaWdnZXJTbGlkZUV2ZW50KHJlbGF0ZWRUYXJnZXQsIGV2ZW50RGlyZWN0aW9uTmFtZSkge1xuXHQgICAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgocmVsYXRlZFRhcmdldCk7XG5cdCAgICAgIHZhciBmcm9tSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoJCh0aGlzLl9lbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRV9JVEVNKVswXSk7XG5cdCAgICAgIHZhciBzbGlkZUV2ZW50ID0gJC5FdmVudChFdmVudC5TTElERSwge1xuXHQgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsXG5cdCAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG5cdCAgICAgICAgZnJvbTogZnJvbUluZGV4LFxuXHQgICAgICAgIHRvOiB0YXJnZXRJbmRleFxuXHQgICAgICB9KTtcblx0XG5cdCAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkZUV2ZW50KTtcblx0XG5cdCAgICAgIHJldHVybiBzbGlkZUV2ZW50O1xuXHQgICAgfTtcblx0XG5cdCAgICBDYXJvdXNlbC5wcm90b3R5cGUuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQgPSBmdW5jdGlvbiBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlbGVtZW50KSB7XG5cdCAgICAgIGlmICh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkge1xuXHQgICAgICAgICQodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblx0XG5cdCAgICAgICAgdmFyIG5leHRJbmRpY2F0b3IgPSB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5jaGlsZHJlblt0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudCldO1xuXHRcblx0ICAgICAgICBpZiAobmV4dEluZGljYXRvcikge1xuXHQgICAgICAgICAgJChuZXh0SW5kaWNhdG9yKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgQ2Fyb3VzZWwucHJvdG90eXBlLl9zbGlkZSA9IGZ1bmN0aW9uIF9zbGlkZShkaXJlY3Rpb24sIGVsZW1lbnQpIHtcblx0ICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cdFxuXHQgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9ICQodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkVfSVRFTSlbMF07XG5cdCAgICAgIHZhciBhY3RpdmVFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XG5cdCAgICAgIHZhciBuZXh0RWxlbWVudCA9IGVsZW1lbnQgfHwgYWN0aXZlRWxlbWVudCAmJiB0aGlzLl9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KTtcblx0ICAgICAgdmFyIG5leHRFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgobmV4dEVsZW1lbnQpO1xuXHQgICAgICB2YXIgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbCk7XG5cdFxuXHQgICAgICB2YXIgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSB2b2lkIDA7XG5cdCAgICAgIHZhciBvcmRlckNsYXNzTmFtZSA9IHZvaWQgMDtcblx0ICAgICAgdmFyIGV2ZW50RGlyZWN0aW9uTmFtZSA9IHZvaWQgMDtcblx0XG5cdCAgICAgIGlmIChkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUKSB7XG5cdCAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUuTEVGVDtcblx0ICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5ORVhUO1xuXHQgICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5MRUZUO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlJJR0hUO1xuXHQgICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlBSRVY7XG5cdCAgICAgICAgZXZlbnREaXJlY3Rpb25OYW1lID0gRGlyZWN0aW9uLlJJR0hUO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAobmV4dEVsZW1lbnQgJiYgJChuZXh0RWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkpIHtcblx0ICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSk7XG5cdCAgICAgIGlmIChzbGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoIWFjdGl2ZUVsZW1lbnQgfHwgIW5leHRFbGVtZW50KSB7XG5cdCAgICAgICAgLy8gc29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLl9pc1NsaWRpbmcgPSB0cnVlO1xuXHRcblx0ICAgICAgaWYgKGlzQ3ljbGluZykge1xuXHQgICAgICAgIHRoaXMucGF1c2UoKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdGhpcy5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChuZXh0RWxlbWVudCk7XG5cdFxuXHQgICAgICB2YXIgc2xpZEV2ZW50ID0gJC5FdmVudChFdmVudC5TTElELCB7XG5cdCAgICAgICAgcmVsYXRlZFRhcmdldDogbmV4dEVsZW1lbnQsXG5cdCAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG5cdCAgICAgICAgZnJvbTogYWN0aXZlRWxlbWVudEluZGV4LFxuXHQgICAgICAgIHRvOiBuZXh0RWxlbWVudEluZGV4XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgaWYgKFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0xJREUpKSB7XG5cdFxuXHQgICAgICAgICQobmV4dEVsZW1lbnQpLmFkZENsYXNzKG9yZGVyQ2xhc3NOYW1lKTtcblx0XG5cdCAgICAgICAgVXRpbC5yZWZsb3cobmV4dEVsZW1lbnQpO1xuXHRcblx0ICAgICAgICAkKGFjdGl2ZUVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcblx0ICAgICAgICAkKG5leHRFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG5cdFxuXHQgICAgICAgICQoYWN0aXZlRWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICQobmV4dEVsZW1lbnQpLnJlbW92ZUNsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lICsgJyAnICsgb3JkZXJDbGFzc05hbWUpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuXHRcblx0ICAgICAgICAgICQoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSArICcgJyArIG9yZGVyQ2xhc3NOYW1lICsgJyAnICsgZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuXHRcblx0ICAgICAgICAgIF90aGlzNS5faXNTbGlkaW5nID0gZmFsc2U7XG5cdFxuXHQgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAkKF90aGlzNS5fZWxlbWVudCkudHJpZ2dlcihzbGlkRXZlbnQpO1xuXHQgICAgICAgICAgfSwgMCk7XG5cdCAgICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblx0ICAgICAgICAkKG5leHRFbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblx0XG5cdCAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG5cdCAgICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRFdmVudCk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChpc0N5Y2xpbmcpIHtcblx0ICAgICAgICB0aGlzLmN5Y2xlKCk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgLy8gc3RhdGljXG5cdFxuXHQgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKTtcblx0ICAgICAgICB2YXIgX2NvbmZpZyA9ICQuZXh0ZW5kKHt9LCBEZWZhdWx0LCAkKHRoaXMpLmRhdGEoKSk7XG5cdFxuXHQgICAgICAgIGlmICgodHlwZW9mIGNvbmZpZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29uZmlnKSkgPT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgICAkLmV4dGVuZChfY29uZmlnLCBjb25maWcpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdmFyIGFjdGlvbiA9IHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnID8gY29uZmlnIDogX2NvbmZpZy5zbGlkZTtcblx0XG5cdCAgICAgICAgaWYgKCFkYXRhKSB7XG5cdCAgICAgICAgICBkYXRhID0gbmV3IENhcm91c2VsKHRoaXMsIF9jb25maWcpO1xuXHQgICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgICAgZGF0YS50byhjb25maWcpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgIGlmIChkYXRhW2FjdGlvbl0gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBhY3Rpb24gKyAnXCInKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGRhdGFbYWN0aW9uXSgpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoX2NvbmZpZy5pbnRlcnZhbCkge1xuXHQgICAgICAgICAgZGF0YS5wYXVzZSgpO1xuXHQgICAgICAgICAgZGF0YS5jeWNsZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlDbGlja0hhbmRsZXIoZXZlbnQpIHtcblx0ICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuXHRcblx0ICAgICAgaWYgKCFzZWxlY3Rvcikge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIHRhcmdldCA9ICQoc2VsZWN0b3IpWzBdO1xuXHRcblx0ICAgICAgaWYgKCF0YXJnZXQgfHwgISQodGFyZ2V0KS5oYXNDbGFzcyhDbGFzc05hbWUuQ0FST1VTRUwpKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgY29uZmlnID0gJC5leHRlbmQoe30sICQodGFyZ2V0KS5kYXRhKCksICQodGhpcykuZGF0YSgpKTtcblx0ICAgICAgdmFyIHNsaWRlSW5kZXggPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1zbGlkZS10bycpO1xuXHRcblx0ICAgICAgaWYgKHNsaWRlSW5kZXgpIHtcblx0ICAgICAgICBjb25maWcuaW50ZXJ2YWwgPSBmYWxzZTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGFyZ2V0KSwgY29uZmlnKTtcblx0XG5cdCAgICAgIGlmIChzbGlkZUluZGV4KSB7XG5cdCAgICAgICAgJCh0YXJnZXQpLmRhdGEoREFUQV9LRVkpLnRvKHNsaWRlSW5kZXgpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgfTtcblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoQ2Fyb3VzZWwsIG51bGwsIFt7XG5cdCAgICAgIGtleTogJ1ZFUlNJT04nLFxuXHQgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICByZXR1cm4gVkVSU0lPTjtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdEZWZhdWx0Jyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG5cdCAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gQ2Fyb3VzZWw7XG5cdCAgfSgpO1xuXHRcblx0ICAvKipcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqL1xuXHRcblx0ICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9TTElERSwgQ2Fyb3VzZWwuX2RhdGFBcGlDbGlja0hhbmRsZXIpO1xuXHRcblx0ICAkKHdpbmRvdykub24oRXZlbnQuTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkge1xuXHQgICAgJChTZWxlY3Rvci5EQVRBX1JJREUpLmVhY2goZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgJGNhcm91c2VsID0gJCh0aGlzKTtcblx0ICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSk7XG5cdCAgICB9KTtcblx0ICB9KTtcblx0XG5cdCAgLyoqXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICogalF1ZXJ5XG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICovXG5cdFxuXHQgICQuZm5bTkFNRV0gPSBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlO1xuXHQgICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBDYXJvdXNlbDtcblx0ICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuXHQgICAgcmV0dXJuIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG5cdCAgfTtcblx0XG5cdCAgcmV0dXJuIENhcm91c2VsO1xuXHR9KGpRdWVyeSk7XG5cdFxuXHQvKipcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICogQm9vdHN0cmFwICh2NC4wLjAtYmV0YSk6IGNvbGxhcHNlLmpzXG5cdCAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG5cdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAqL1xuXHRcblx0dmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKCQpIHtcblx0XG5cdCAgLyoqXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICogQ29uc3RhbnRzXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICovXG5cdFxuXHQgIHZhciBOQU1FID0gJ2NvbGxhcHNlJztcblx0ICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1iZXRhJztcblx0ICB2YXIgREFUQV9LRVkgPSAnYnMuY29sbGFwc2UnO1xuXHQgIHZhciBFVkVOVF9LRVkgPSAnLicgKyBEQVRBX0tFWTtcblx0ICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG5cdCAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG5cdCAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSA2MDA7XG5cdFxuXHQgIHZhciBEZWZhdWx0ID0ge1xuXHQgICAgdG9nZ2xlOiB0cnVlLFxuXHQgICAgcGFyZW50OiAnJ1xuXHQgIH07XG5cdFxuXHQgIHZhciBEZWZhdWx0VHlwZSA9IHtcblx0ICAgIHRvZ2dsZTogJ2Jvb2xlYW4nLFxuXHQgICAgcGFyZW50OiAnc3RyaW5nJ1xuXHQgIH07XG5cdFxuXHQgIHZhciBFdmVudCA9IHtcblx0ICAgIFNIT1c6ICdzaG93JyArIEVWRU5UX0tFWSxcblx0ICAgIFNIT1dOOiAnc2hvd24nICsgRVZFTlRfS0VZLFxuXHQgICAgSElERTogJ2hpZGUnICsgRVZFTlRfS0VZLFxuXHQgICAgSElEREVOOiAnaGlkZGVuJyArIEVWRU5UX0tFWSxcblx0ICAgIENMSUNLX0RBVEFfQVBJOiAnY2xpY2snICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG5cdCAgfTtcblx0XG5cdCAgdmFyIENsYXNzTmFtZSA9IHtcblx0ICAgIFNIT1c6ICdzaG93Jyxcblx0ICAgIENPTExBUFNFOiAnY29sbGFwc2UnLFxuXHQgICAgQ09MTEFQU0lORzogJ2NvbGxhcHNpbmcnLFxuXHQgICAgQ09MTEFQU0VEOiAnY29sbGFwc2VkJ1xuXHQgIH07XG5cdFxuXHQgIHZhciBEaW1lbnNpb24gPSB7XG5cdCAgICBXSURUSDogJ3dpZHRoJyxcblx0ICAgIEhFSUdIVDogJ2hlaWdodCdcblx0ICB9O1xuXHRcblx0ICB2YXIgU2VsZWN0b3IgPSB7XG5cdCAgICBBQ1RJVkVTOiAnLnNob3csIC5jb2xsYXBzaW5nJyxcblx0ICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgICAqIENsYXNzIERlZmluaXRpb25cblx0ICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAgICovXG5cdFxuXHQgIH07XG5cdCAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQ29sbGFwc2UoZWxlbWVudCwgY29uZmlnKSB7XG5cdCAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xsYXBzZSk7XG5cdFxuXHQgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcblx0ICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG5cdCAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuXHQgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSAkLm1ha2VBcnJheSgkKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtocmVmPVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXSwnICsgKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXRhcmdldD1cIiMnICsgZWxlbWVudC5pZCArICdcIl0nKSkpO1xuXHQgICAgICB2YXIgdGFiVG9nZ2xlcyA9ICQoU2VsZWN0b3IuREFUQV9UT0dHTEUpO1xuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhYlRvZ2dsZXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB2YXIgZWxlbSA9IHRhYlRvZ2dsZXNbaV07XG5cdCAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pO1xuXHQgICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiAkKHNlbGVjdG9yKS5maWx0ZXIoZWxlbWVudCkubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goZWxlbSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLl9wYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50ID8gdGhpcy5fZ2V0UGFyZW50KCkgOiBudWxsO1xuXHRcblx0ICAgICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG5cdCAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh0aGlzLl9jb25maWcudG9nZ2xlKSB7XG5cdCAgICAgICAgdGhpcy50b2dnbGUoKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIC8vIGdldHRlcnNcblx0XG5cdCAgICAvLyBwdWJsaWNcblx0XG5cdCAgICBDb2xsYXBzZS5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuXHQgICAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcblx0ICAgICAgICB0aGlzLmhpZGUoKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLnNob3coKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG5cdCAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXHRcblx0ICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIGFjdGl2ZXMgPSB2b2lkIDA7XG5cdCAgICAgIHZhciBhY3RpdmVzRGF0YSA9IHZvaWQgMDtcblx0XG5cdCAgICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcblx0ICAgICAgICBhY3RpdmVzID0gJC5tYWtlQXJyYXkoJCh0aGlzLl9wYXJlbnQpLmNoaWxkcmVuKCkuY2hpbGRyZW4oU2VsZWN0b3IuQUNUSVZFUykpO1xuXHQgICAgICAgIGlmICghYWN0aXZlcy5sZW5ndGgpIHtcblx0ICAgICAgICAgIGFjdGl2ZXMgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGFjdGl2ZXMpIHtcblx0ICAgICAgICBhY3RpdmVzRGF0YSA9ICQoYWN0aXZlcykuZGF0YShEQVRBX0tFWSk7XG5cdCAgICAgICAgaWYgKGFjdGl2ZXNEYXRhICYmIGFjdGl2ZXNEYXRhLl9pc1RyYW5zaXRpb25pbmcpIHtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XKTtcblx0ICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuXHQgICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGFjdGl2ZXMpIHtcblx0ICAgICAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJChhY3RpdmVzKSwgJ2hpZGUnKTtcblx0ICAgICAgICBpZiAoIWFjdGl2ZXNEYXRhKSB7XG5cdCAgICAgICAgICAkKGFjdGl2ZXMpLmRhdGEoREFUQV9LRVksIG51bGwpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpO1xuXHRcblx0ICAgICAgJCh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKTtcblx0XG5cdCAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IDA7XG5cdFxuXHQgICAgICBpZiAodGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuXHQgICAgICAgICQodGhpcy5fdHJpZ2dlckFycmF5KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKTtcblx0XG5cdCAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuXHQgICAgICAgICQoX3RoaXM2Ll9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cdFxuXHQgICAgICAgIF90aGlzNi5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XG5cdFxuXHQgICAgICAgIF90aGlzNi5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKTtcblx0XG5cdCAgICAgICAgJChfdGhpczYuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuU0hPV04pO1xuXHQgICAgICB9O1xuXHRcblx0ICAgICAgaWYgKCFVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKSB7XG5cdCAgICAgICAgY29tcGxldGUoKTtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBjYXBpdGFsaXplZERpbWVuc2lvbiA9IGRpbWVuc2lvblswXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKDEpO1xuXHQgICAgICB2YXIgc2Nyb2xsU2l6ZSA9ICdzY3JvbGwnICsgY2FwaXRhbGl6ZWREaW1lbnNpb247XG5cdFxuXHQgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG5cdFxuXHQgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSB0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdICsgJ3B4Jztcblx0ICAgIH07XG5cdFxuXHQgICAgQ29sbGFwc2UucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuXHQgICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblx0XG5cdCAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgISQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSk7XG5cdCAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzdGFydEV2ZW50KTtcblx0ICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblx0XG5cdCAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IHRoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbZGltZW5zaW9uXSArICdweCc7XG5cdFxuXHQgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KTtcblx0XG5cdCAgICAgICQodGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXHRcblx0ICAgICAgaWYgKHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGgpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgdmFyIHRyaWdnZXIgPSB0aGlzLl90cmlnZ2VyQXJyYXlbaV07XG5cdCAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodHJpZ2dlcik7XG5cdCAgICAgICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgdmFyICRlbGVtID0gJChzZWxlY3Rvcik7XG5cdCAgICAgICAgICAgIGlmICghJGVsZW0uaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG5cdCAgICAgICAgICAgICAgJCh0cmlnZ2VyKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cdFxuXHQgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcblx0ICAgICAgICBfdGhpczcuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XG5cdCAgICAgICAgJChfdGhpczcuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLnRyaWdnZXIoRXZlbnQuSElEREVOKTtcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuXHRcblx0ICAgICAgaWYgKCFVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKSB7XG5cdCAgICAgICAgY29tcGxldGUoKTtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcblx0ICAgIH07XG5cdFxuXHQgICAgQ29sbGFwc2UucHJvdG90eXBlLnNldFRyYW5zaXRpb25pbmcgPSBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uaW5nKGlzVHJhbnNpdGlvbmluZykge1xuXHQgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBpc1RyYW5zaXRpb25pbmc7XG5cdCAgICB9O1xuXHRcblx0ICAgIENvbGxhcHNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcblx0ICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcblx0XG5cdCAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG5cdCAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG5cdCAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuXHQgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBudWxsO1xuXHQgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBudWxsO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBwcml2YXRlXG5cdFxuXHQgICAgQ29sbGFwc2UucHJvdG90eXBlLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuXHQgICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgRGVmYXVsdCwgY29uZmlnKTtcblx0ICAgICAgY29uZmlnLnRvZ2dsZSA9IEJvb2xlYW4oY29uZmlnLnRvZ2dsZSk7IC8vIGNvZXJjZSBzdHJpbmcgdmFsdWVzXG5cdCAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuXHQgICAgICByZXR1cm4gY29uZmlnO1xuXHQgICAgfTtcblx0XG5cdCAgICBDb2xsYXBzZS5wcm90b3R5cGUuX2dldERpbWVuc2lvbiA9IGZ1bmN0aW9uIF9nZXREaW1lbnNpb24oKSB7XG5cdCAgICAgIHZhciBoYXNXaWR0aCA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoRGltZW5zaW9uLldJRFRIKTtcblx0ICAgICAgcmV0dXJuIGhhc1dpZHRoID8gRGltZW5zaW9uLldJRFRIIDogRGltZW5zaW9uLkhFSUdIVDtcblx0ICAgIH07XG5cdFxuXHQgICAgQ29sbGFwc2UucHJvdG90eXBlLl9nZXRQYXJlbnQgPSBmdW5jdGlvbiBfZ2V0UGFyZW50KCkge1xuXHQgICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblx0XG5cdCAgICAgIHZhciBwYXJlbnQgPSAkKHRoaXMuX2NvbmZpZy5wYXJlbnQpWzBdO1xuXHQgICAgICB2YXIgc2VsZWN0b3IgPSAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInICsgdGhpcy5fY29uZmlnLnBhcmVudCArICdcIl0nO1xuXHRcblx0ICAgICAgJChwYXJlbnQpLmZpbmQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcblx0ICAgICAgICBfdGhpczguX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCksIFtlbGVtZW50XSk7XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgcmV0dXJuIHBhcmVudDtcblx0ICAgIH07XG5cdFxuXHQgICAgQ29sbGFwc2UucHJvdG90eXBlLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MgPSBmdW5jdGlvbiBfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGVsZW1lbnQsIHRyaWdnZXJBcnJheSkge1xuXHQgICAgICBpZiAoZWxlbWVudCkge1xuXHQgICAgICAgIHZhciBpc09wZW4gPSAkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcblx0XG5cdCAgICAgICAgaWYgKHRyaWdnZXJBcnJheS5sZW5ndGgpIHtcblx0ICAgICAgICAgICQodHJpZ2dlckFycmF5KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VELCAhaXNPcGVuKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgLy8gc3RhdGljXG5cdFxuXHQgICAgQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50ID0gZnVuY3Rpb24gX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpIHtcblx0ICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuXHQgICAgICByZXR1cm4gc2VsZWN0b3IgPyAkKHNlbGVjdG9yKVswXSA6IG51bGw7XG5cdCAgICB9O1xuXHRcblx0ICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuXHQgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXHQgICAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YShEQVRBX0tFWSk7XG5cdCAgICAgICAgdmFyIF9jb25maWcgPSAkLmV4dGVuZCh7fSwgRGVmYXVsdCwgJHRoaXMuZGF0YSgpLCAodHlwZW9mIGNvbmZpZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29uZmlnKSkgPT09ICdvYmplY3QnICYmIGNvbmZpZyk7XG5cdFxuXHQgICAgICAgIGlmICghZGF0YSAmJiBfY29uZmlnLnRvZ2dsZSAmJiAvc2hvd3xoaWRlLy50ZXN0KGNvbmZpZykpIHtcblx0ICAgICAgICAgIF9jb25maWcudG9nZ2xlID0gZmFsc2U7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoIWRhdGEpIHtcblx0ICAgICAgICAgIGRhdGEgPSBuZXcgQ29sbGFwc2UodGhpcywgX2NvbmZpZyk7XG5cdCAgICAgICAgICAkdGhpcy5kYXRhKERBVEFfS0VZLCBkYXRhKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJyArIGNvbmZpZyArICdcIicpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgZGF0YVtjb25maWddKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKENvbGxhcHNlLCBudWxsLCBbe1xuXHQgICAgICBrZXk6ICdWRVJTSU9OJyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIFZFUlNJT047XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnRGVmYXVsdCcsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIHJldHVybiBEZWZhdWx0O1xuXHQgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIENvbGxhcHNlO1xuXHQgIH0oKTtcblx0XG5cdCAgLyoqXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0XG5cdCAgJChkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgIGlmICghL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcblx0ICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgJHRyaWdnZXIgPSAkKHRoaXMpO1xuXHQgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuXHQgICAgJChzZWxlY3RvcikuZWFjaChmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKTtcblx0ICAgICAgdmFyIGRhdGEgPSAkdGFyZ2V0LmRhdGEoREFUQV9LRVkpO1xuXHQgICAgICB2YXIgY29uZmlnID0gZGF0YSA/ICd0b2dnbGUnIDogJHRyaWdnZXIuZGF0YSgpO1xuXHQgICAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJHRhcmdldCwgY29uZmlnKTtcblx0ICAgIH0pO1xuXHQgIH0pO1xuXHRcblx0ICAvKipcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKiBqUXVlcnlcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0XG5cdCAgJC5mbltOQU1FXSA9IENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XG5cdCAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlO1xuXHQgICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG5cdCAgICByZXR1cm4gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZTtcblx0ICB9O1xuXHRcblx0ICByZXR1cm4gQ29sbGFwc2U7XG5cdH0oalF1ZXJ5KTtcblx0XG5cdC8qIGdsb2JhbCBQb3BwZXIgKi9cblx0XG5cdC8qKlxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgKiBCb290c3RyYXAgKHY0LjAuMC1iZXRhKTogZHJvcGRvd24uanNcblx0ICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICovXG5cdFxuXHR2YXIgRHJvcGRvd24gPSBmdW5jdGlvbiAoJCkge1xuXHRcblx0ICAvKipcblx0ICAgKiBDaGVjayBmb3IgUG9wcGVyIGRlcGVuZGVuY3lcblx0ICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcblx0ICAgKi9cblx0ICBpZiAodHlwZW9mIFBvcHBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwIGRyb3Bkb3duIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcpJyk7XG5cdCAgfVxuXHRcblx0ICAvKipcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKiBDb25zdGFudHNcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0XG5cdCAgdmFyIE5BTUUgPSAnZHJvcGRvd24nO1xuXHQgIHZhciBWRVJTSU9OID0gJzQuMC4wLWJldGEnO1xuXHQgIHZhciBEQVRBX0tFWSA9ICdicy5kcm9wZG93bic7XG5cdCAgdmFyIEVWRU5UX0tFWSA9ICcuJyArIERBVEFfS0VZO1xuXHQgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcblx0ICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcblx0ICB2YXIgRVNDQVBFX0tFWUNPREUgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleVxuXHQgIHZhciBTUEFDRV9LRVlDT0RFID0gMzI7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHNwYWNlIGtleVxuXHQgIHZhciBUQUJfS0VZQ09ERSA9IDk7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRhYiBrZXlcblx0ICB2YXIgQVJST1dfVVBfS0VZQ09ERSA9IDM4OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB1cCBhcnJvdyBrZXlcblx0ICB2YXIgQVJST1dfRE9XTl9LRVlDT0RFID0gNDA7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGRvd24gYXJyb3cga2V5XG5cdCAgdmFyIFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCA9IDM7IC8vIE1vdXNlRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRoZSByaWdodCBidXR0b24gKGFzc3VtaW5nIGEgcmlnaHQtaGFuZGVkIG1vdXNlKVxuXHQgIHZhciBSRUdFWFBfS0VZRE9XTiA9IG5ldyBSZWdFeHAoQVJST1dfVVBfS0VZQ09ERSArICd8JyArIEFSUk9XX0RPV05fS0VZQ09ERSArICd8JyArIEVTQ0FQRV9LRVlDT0RFKTtcblx0XG5cdCAgdmFyIEV2ZW50ID0ge1xuXHQgICAgSElERTogJ2hpZGUnICsgRVZFTlRfS0VZLFxuXHQgICAgSElEREVOOiAnaGlkZGVuJyArIEVWRU5UX0tFWSxcblx0ICAgIFNIT1c6ICdzaG93JyArIEVWRU5UX0tFWSxcblx0ICAgIFNIT1dOOiAnc2hvd24nICsgRVZFTlRfS0VZLFxuXHQgICAgQ0xJQ0s6ICdjbGljaycgKyBFVkVOVF9LRVksXG5cdCAgICBDTElDS19EQVRBX0FQSTogJ2NsaWNrJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcblx0ICAgIEtFWURPV05fREFUQV9BUEk6ICdrZXlkb3duJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcblx0ICAgIEtFWVVQX0RBVEFfQVBJOiAna2V5dXAnICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG5cdCAgfTtcblx0XG5cdCAgdmFyIENsYXNzTmFtZSA9IHtcblx0ICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuXHQgICAgU0hPVzogJ3Nob3cnLFxuXHQgICAgRFJPUFVQOiAnZHJvcHVwJyxcblx0ICAgIE1FTlVSSUdIVDogJ2Ryb3Bkb3duLW1lbnUtcmlnaHQnLFxuXHQgICAgTUVOVUxFRlQ6ICdkcm9wZG93bi1tZW51LWxlZnQnXG5cdCAgfTtcblx0XG5cdCAgdmFyIFNlbGVjdG9yID0ge1xuXHQgICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXScsXG5cdCAgICBGT1JNX0NISUxEOiAnLmRyb3Bkb3duIGZvcm0nLFxuXHQgICAgTUVOVTogJy5kcm9wZG93bi1tZW51Jyxcblx0ICAgIE5BVkJBUl9OQVY6ICcubmF2YmFyLW5hdicsXG5cdCAgICBWSVNJQkxFX0lURU1TOiAnLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCknXG5cdCAgfTtcblx0XG5cdCAgdmFyIEF0dGFjaG1lbnRNYXAgPSB7XG5cdCAgICBUT1A6ICd0b3Atc3RhcnQnLFxuXHQgICAgVE9QRU5EOiAndG9wLWVuZCcsXG5cdCAgICBCT1RUT006ICdib3R0b20tc3RhcnQnLFxuXHQgICAgQk9UVE9NRU5EOiAnYm90dG9tLWVuZCdcblx0ICB9O1xuXHRcblx0ICB2YXIgRGVmYXVsdCA9IHtcblx0ICAgIHBsYWNlbWVudDogQXR0YWNobWVudE1hcC5CT1RUT00sXG5cdCAgICBvZmZzZXQ6IDAsXG5cdCAgICBmbGlwOiB0cnVlXG5cdCAgfTtcblx0XG5cdCAgdmFyIERlZmF1bHRUeXBlID0ge1xuXHQgICAgcGxhY2VtZW50OiAnc3RyaW5nJyxcblx0ICAgIG9mZnNldDogJyhudW1iZXJ8c3RyaW5nKScsXG5cdCAgICBmbGlwOiAnYm9vbGVhbidcblx0XG5cdCAgICAvKipcblx0ICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAgICogQ2xhc3MgRGVmaW5pdGlvblxuXHQgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICAgKi9cblx0XG5cdCAgfTtcblx0ICB2YXIgRHJvcGRvd24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBEcm9wZG93bihlbGVtZW50LCBjb25maWcpIHtcblx0ICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyb3Bkb3duKTtcblx0XG5cdCAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuXHQgICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuXHQgICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcblx0ICAgICAgdGhpcy5fbWVudSA9IHRoaXMuX2dldE1lbnVFbGVtZW50KCk7XG5cdCAgICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG5cdFxuXHQgICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIGdldHRlcnNcblx0XG5cdCAgICAvLyBwdWJsaWNcblx0XG5cdCAgICBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuXHQgICAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cdCAgICAgIHZhciBpc0FjdGl2ZSA9ICQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXHRcblx0ICAgICAgRHJvcGRvd24uX2NsZWFyTWVudXMoKTtcblx0XG5cdCAgICAgIGlmIChpc0FjdGl2ZSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG5cdCAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuXHQgICAgICB9O1xuXHQgICAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XLCByZWxhdGVkVGFyZ2V0KTtcblx0XG5cdCAgICAgICQocGFyZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cdFxuXHQgICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7XG5cdCAgICAgIC8vIGZvciBkcm9wdXAgd2l0aCBhbGlnbm1lbnQgd2UgdXNlIHRoZSBwYXJlbnQgYXMgcG9wcGVyIGNvbnRhaW5lclxuXHQgICAgICBpZiAoJChwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QVVApKSB7XG5cdCAgICAgICAgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVMRUZUKSB8fCAkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7XG5cdCAgICAgICAgICBlbGVtZW50ID0gcGFyZW50O1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICB0aGlzLl9wb3BwZXIgPSBuZXcgUG9wcGVyKGVsZW1lbnQsIHRoaXMuX21lbnUsIHRoaXMuX2dldFBvcHBlckNvbmZpZygpKTtcblx0XG5cdCAgICAgIC8vIGlmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcblx0ICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcblx0ICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1Ncblx0ICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG5cdCAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgISQocGFyZW50KS5jbG9zZXN0KFNlbGVjdG9yLk5BVkJBUl9OQVYpLmxlbmd0aCkge1xuXHQgICAgICAgICQoJ2JvZHknKS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLl9lbGVtZW50LmZvY3VzKCk7XG5cdCAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cdFxuXHQgICAgICAkKHRoaXMuX21lbnUpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcblx0ICAgICAgJChwYXJlbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuU0hPV04sIHJlbGF0ZWRUYXJnZXQpKTtcblx0ICAgIH07XG5cdFxuXHQgICAgRHJvcGRvd24ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuXHQgICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuXHQgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpO1xuXHQgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcblx0ICAgICAgdGhpcy5fbWVudSA9IG51bGw7XG5cdCAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcblx0ICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG5cdCAgICB9O1xuXHRcblx0ICAgIERyb3Bkb3duLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG5cdCAgICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG5cdCAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcblx0ICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICAvLyBwcml2YXRlXG5cdFxuXHQgICAgRHJvcGRvd24ucHJvdG90eXBlLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcblx0ICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cdFxuXHQgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LkNMSUNLLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHQgICAgICAgIF90aGlzOS50b2dnbGUoKTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIERyb3Bkb3duLnByb3RvdHlwZS5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcblx0ICAgICAgdmFyIGVsZW1lbnREYXRhID0gJCh0aGlzLl9lbGVtZW50KS5kYXRhKCk7XG5cdCAgICAgIGlmIChlbGVtZW50RGF0YS5wbGFjZW1lbnQgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIGVsZW1lbnREYXRhLnBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXBbZWxlbWVudERhdGEucGxhY2VtZW50LnRvVXBwZXJDYXNlKCldO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LCAkKHRoaXMuX2VsZW1lbnQpLmRhdGEoKSwgY29uZmlnKTtcblx0XG5cdCAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG5cdFxuXHQgICAgICByZXR1cm4gY29uZmlnO1xuXHQgICAgfTtcblx0XG5cdCAgICBEcm9wZG93bi5wcm90b3R5cGUuX2dldE1lbnVFbGVtZW50ID0gZnVuY3Rpb24gX2dldE1lbnVFbGVtZW50KCkge1xuXHQgICAgICBpZiAoIXRoaXMuX21lbnUpIHtcblx0ICAgICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXHQgICAgICAgIHRoaXMuX21lbnUgPSAkKHBhcmVudCkuZmluZChTZWxlY3Rvci5NRU5VKVswXTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdGhpcy5fbWVudTtcblx0ICAgIH07XG5cdFxuXHQgICAgRHJvcGRvd24ucHJvdG90eXBlLl9nZXRQbGFjZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGxhY2VtZW50KCkge1xuXHQgICAgICB2YXIgJHBhcmVudERyb3Bkb3duID0gJCh0aGlzLl9lbGVtZW50KS5wYXJlbnQoKTtcblx0ICAgICAgdmFyIHBsYWNlbWVudCA9IHRoaXMuX2NvbmZpZy5wbGFjZW1lbnQ7XG5cdFxuXHQgICAgICAvLyBIYW5kbGUgZHJvcHVwXG5cdCAgICAgIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BVUCkgfHwgdGhpcy5fY29uZmlnLnBsYWNlbWVudCA9PT0gQXR0YWNobWVudE1hcC5UT1ApIHtcblx0ICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUDtcblx0ICAgICAgICBpZiAoJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuTUVOVVJJR0hUKSkge1xuXHQgICAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5UT1BFTkQ7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2UgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcblx0ICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTUVORDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gcGxhY2VtZW50O1xuXHQgICAgfTtcblx0XG5cdCAgICBEcm9wZG93bi5wcm90b3R5cGUuX2RldGVjdE5hdmJhciA9IGZ1bmN0aW9uIF9kZXRlY3ROYXZiYXIoKSB7XG5cdCAgICAgIHJldHVybiAkKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoJy5uYXZiYXInKS5sZW5ndGggPiAwO1xuXHQgICAgfTtcblx0XG5cdCAgICBEcm9wZG93bi5wcm90b3R5cGUuX2dldFBvcHBlckNvbmZpZyA9IGZ1bmN0aW9uIF9nZXRQb3BwZXJDb25maWcoKSB7XG5cdCAgICAgIHZhciBwb3BwZXJDb25maWcgPSB7XG5cdCAgICAgICAgcGxhY2VtZW50OiB0aGlzLl9nZXRQbGFjZW1lbnQoKSxcblx0ICAgICAgICBtb2RpZmllcnM6IHtcblx0ICAgICAgICAgIG9mZnNldDoge1xuXHQgICAgICAgICAgICBvZmZzZXQ6IHRoaXMuX2NvbmZpZy5vZmZzZXRcblx0ICAgICAgICAgIH0sXG5cdCAgICAgICAgICBmbGlwOiB7XG5cdCAgICAgICAgICAgIGVuYWJsZWQ6IHRoaXMuX2NvbmZpZy5mbGlwXG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvLyBEaXNhYmxlIFBvcHBlci5qcyBmb3IgRHJvcGRvd24gaW4gTmF2YmFyXG5cdCAgICAgIH07aWYgKHRoaXMuX2luTmF2YmFyKSB7XG5cdCAgICAgICAgcG9wcGVyQ29uZmlnLm1vZGlmaWVycy5hcHBseVN0eWxlID0ge1xuXHQgICAgICAgICAgZW5hYmxlZDogIXRoaXMuX2luTmF2YmFyXG5cdCAgICAgICAgfTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gcG9wcGVyQ29uZmlnO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBzdGF0aWNcblx0XG5cdCAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXHQgICAgICAgIHZhciBfY29uZmlnID0gKHR5cGVvZiBjb25maWcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNvbmZpZykpID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7XG5cdFxuXHQgICAgICAgIGlmICghZGF0YSkge1xuXHQgICAgICAgICAgZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzLCBfY29uZmlnKTtcblx0ICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBjb25maWcgKyAnXCInKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIERyb3Bkb3duLl9jbGVhck1lbnVzID0gZnVuY3Rpb24gX2NsZWFyTWVudXMoZXZlbnQpIHtcblx0ICAgICAgaWYgKGV2ZW50ICYmIChldmVudC53aGljaCA9PT0gUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggIT09IFRBQl9LRVlDT0RFKSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIHRvZ2dsZXMgPSAkLm1ha2VBcnJheSgkKFNlbGVjdG9yLkRBVEFfVE9HR0xFKSk7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9nZ2xlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodG9nZ2xlc1tpXSk7XG5cdCAgICAgICAgdmFyIGNvbnRleHQgPSAkKHRvZ2dsZXNbaV0pLmRhdGEoREFUQV9LRVkpO1xuXHQgICAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuXHQgICAgICAgICAgcmVsYXRlZFRhcmdldDogdG9nZ2xlc1tpXVxuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIGlmICghY29udGV4dCkge1xuXHQgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB2YXIgZHJvcGRvd25NZW51ID0gY29udGV4dC5fbWVudTtcblx0ICAgICAgICBpZiAoISQocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcblx0ICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKGV2ZW50ICYmIChldmVudC50eXBlID09PSAnY2xpY2snICYmIC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggPT09IFRBQl9LRVlDT0RFKSAmJiAkLmNvbnRhaW5zKHBhcmVudCwgZXZlbnQudGFyZ2V0KSkge1xuXHQgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB2YXIgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudC5ISURFLCByZWxhdGVkVGFyZ2V0KTtcblx0ICAgICAgICAkKHBhcmVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXHQgICAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcblx0ICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLy8gaWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcblx0ICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuXHQgICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcblx0ICAgICAgICAgICQoJ2JvZHknKS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHRvZ2dsZXNbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG5cdFxuXHQgICAgICAgICQoZHJvcGRvd25NZW51KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cdCAgICAgICAgJChwYXJlbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50ID0gZnVuY3Rpb24gX2dldFBhcmVudEZyb21FbGVtZW50KGVsZW1lbnQpIHtcblx0ICAgICAgdmFyIHBhcmVudCA9IHZvaWQgMDtcblx0ICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuXHRcblx0ICAgICAgaWYgKHNlbGVjdG9yKSB7XG5cdCAgICAgICAgcGFyZW50ID0gJChzZWxlY3RvcilbMF07XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBwYXJlbnQgfHwgZWxlbWVudC5wYXJlbnROb2RlO1xuXHQgICAgfTtcblx0XG5cdCAgICBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlLZXlkb3duSGFuZGxlcihldmVudCkge1xuXHQgICAgICBpZiAoIVJFR0VYUF9LRVlET1dOLnRlc3QoZXZlbnQud2hpY2gpIHx8IC9idXR0b24vaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSAmJiBldmVudC53aGljaCA9PT0gU1BBQ0VfS0VZQ09ERSB8fCAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFxuXHQgICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCAkKHRoaXMpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyk7XG5cdCAgICAgIHZhciBpc0FjdGl2ZSA9ICQocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cdFxuXHQgICAgICBpZiAoIWlzQWN0aXZlICYmIChldmVudC53aGljaCAhPT0gRVNDQVBFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggIT09IFNQQUNFX0tFWUNPREUpIHx8IGlzQWN0aXZlICYmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUpKSB7XG5cdFxuXHQgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcblx0ICAgICAgICAgIHZhciB0b2dnbGUgPSAkKHBhcmVudCkuZmluZChTZWxlY3Rvci5EQVRBX1RPR0dMRSlbMF07XG5cdCAgICAgICAgICAkKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgICQodGhpcykudHJpZ2dlcignY2xpY2snKTtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBpdGVtcyA9ICQocGFyZW50KS5maW5kKFNlbGVjdG9yLlZJU0lCTEVfSVRFTVMpLmdldCgpO1xuXHRcblx0ICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBpbmRleCA9IGl0ZW1zLmluZGV4T2YoZXZlbnQudGFyZ2V0KTtcblx0XG5cdCAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfVVBfS0VZQ09ERSAmJiBpbmRleCA+IDApIHtcblx0ICAgICAgICAvLyB1cFxuXHQgICAgICAgIGluZGV4LS07XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfRE9XTl9LRVlDT0RFICYmIGluZGV4IDwgaXRlbXMubGVuZ3RoIC0gMSkge1xuXHQgICAgICAgIC8vIGRvd25cblx0ICAgICAgICBpbmRleCsrO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoaW5kZXggPCAwKSB7XG5cdCAgICAgICAgaW5kZXggPSAwO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpdGVtc1tpbmRleF0uZm9jdXMoKTtcblx0ICAgIH07XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKERyb3Bkb3duLCBudWxsLCBbe1xuXHQgICAgICBrZXk6ICdWRVJTSU9OJyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIFZFUlNJT047XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnRGVmYXVsdCcsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIHJldHVybiBEZWZhdWx0O1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ0RlZmF1bHRUeXBlJyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlO1xuXHQgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIERyb3Bkb3duO1xuXHQgIH0oKTtcblx0XG5cdCAgLyoqXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0XG5cdCAgJChkb2N1bWVudCkub24oRXZlbnQuS0VZRE9XTl9EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKEV2ZW50LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yLk1FTlUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJICsgJyAnICsgRXZlbnQuS0VZVVBfREFUQV9BUEksIERyb3Bkb3duLl9jbGVhck1lbnVzKS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHQgICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGhpcyksICd0b2dnbGUnKTtcblx0ICB9KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuRk9STV9DSElMRCwgZnVuY3Rpb24gKGUpIHtcblx0ICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdCAgfSk7XG5cdFxuXHQgIC8qKlxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqIGpRdWVyeVxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqL1xuXHRcblx0ICAkLmZuW05BTUVdID0gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZTtcblx0ICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gRHJvcGRvd247XG5cdCAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcblx0ICAgIHJldHVybiBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xuXHQgIH07XG5cdFxuXHQgIHJldHVybiBEcm9wZG93bjtcblx0fShqUXVlcnkpO1xuXHRcblx0LyoqXG5cdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAqIEJvb3RzdHJhcCAodjQuMC4wLWJldGEpOiBtb2RhbC5qc1xuXHQgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgKi9cblx0XG5cdHZhciBNb2RhbCA9IGZ1bmN0aW9uICgkKSB7XG5cdFxuXHQgIC8qKlxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqIENvbnN0YW50c1xuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqL1xuXHRcblx0ICB2YXIgTkFNRSA9ICdtb2RhbCc7XG5cdCAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYmV0YSc7XG5cdCAgdmFyIERBVEFfS0VZID0gJ2JzLm1vZGFsJztcblx0ICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG5cdCAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuXHQgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuXHQgIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gMzAwO1xuXHQgIHZhciBCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuXHQgIHZhciBFU0NBUEVfS0VZQ09ERSA9IDI3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBFc2NhcGUgKEVzYykga2V5XG5cdFxuXHQgIHZhciBEZWZhdWx0ID0ge1xuXHQgICAgYmFja2Ryb3A6IHRydWUsXG5cdCAgICBrZXlib2FyZDogdHJ1ZSxcblx0ICAgIGZvY3VzOiB0cnVlLFxuXHQgICAgc2hvdzogdHJ1ZVxuXHQgIH07XG5cdFxuXHQgIHZhciBEZWZhdWx0VHlwZSA9IHtcblx0ICAgIGJhY2tkcm9wOiAnKGJvb2xlYW58c3RyaW5nKScsXG5cdCAgICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuXHQgICAgZm9jdXM6ICdib29sZWFuJyxcblx0ICAgIHNob3c6ICdib29sZWFuJ1xuXHQgIH07XG5cdFxuXHQgIHZhciBFdmVudCA9IHtcblx0ICAgIEhJREU6ICdoaWRlJyArIEVWRU5UX0tFWSxcblx0ICAgIEhJRERFTjogJ2hpZGRlbicgKyBFVkVOVF9LRVksXG5cdCAgICBTSE9XOiAnc2hvdycgKyBFVkVOVF9LRVksXG5cdCAgICBTSE9XTjogJ3Nob3duJyArIEVWRU5UX0tFWSxcblx0ICAgIEZPQ1VTSU46ICdmb2N1c2luJyArIEVWRU5UX0tFWSxcblx0ICAgIFJFU0laRTogJ3Jlc2l6ZScgKyBFVkVOVF9LRVksXG5cdCAgICBDTElDS19ESVNNSVNTOiAnY2xpY2suZGlzbWlzcycgKyBFVkVOVF9LRVksXG5cdCAgICBLRVlET1dOX0RJU01JU1M6ICdrZXlkb3duLmRpc21pc3MnICsgRVZFTlRfS0VZLFxuXHQgICAgTU9VU0VVUF9ESVNNSVNTOiAnbW91c2V1cC5kaXNtaXNzJyArIEVWRU5UX0tFWSxcblx0ICAgIE1PVVNFRE9XTl9ESVNNSVNTOiAnbW91c2Vkb3duLmRpc21pc3MnICsgRVZFTlRfS0VZLFxuXHQgICAgQ0xJQ0tfREFUQV9BUEk6ICdjbGljaycgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcblx0ICB9O1xuXHRcblx0ICB2YXIgQ2xhc3NOYW1lID0ge1xuXHQgICAgU0NST0xMQkFSX01FQVNVUkVSOiAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnLFxuXHQgICAgQkFDS0RST1A6ICdtb2RhbC1iYWNrZHJvcCcsXG5cdCAgICBPUEVOOiAnbW9kYWwtb3BlbicsXG5cdCAgICBGQURFOiAnZmFkZScsXG5cdCAgICBTSE9XOiAnc2hvdydcblx0ICB9O1xuXHRcblx0ICB2YXIgU2VsZWN0b3IgPSB7XG5cdCAgICBESUFMT0c6ICcubW9kYWwtZGlhbG9nJyxcblx0ICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLFxuXHQgICAgREFUQV9ESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxcblx0ICAgIEZJWEVEX0NPTlRFTlQ6ICcuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wJyxcblx0ICAgIE5BVkJBUl9UT0dHTEVSOiAnLm5hdmJhci10b2dnbGVyJ1xuXHRcblx0ICAgIC8qKlxuXHQgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG5cdCAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgICAqL1xuXHRcblx0ICB9O1xuXHQgIHZhciBNb2RhbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIE1vZGFsKGVsZW1lbnQsIGNvbmZpZykge1xuXHQgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWwpO1xuXHRcblx0ICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG5cdCAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuXHQgICAgICB0aGlzLl9kaWFsb2cgPSAkKGVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuRElBTE9HKVswXTtcblx0ICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuXHQgICAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG5cdCAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gZmFsc2U7XG5cdCAgICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZTtcblx0ICAgICAgdGhpcy5fb3JpZ2luYWxCb2R5UGFkZGluZyA9IDA7XG5cdCAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gMDtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBnZXR0ZXJzXG5cdFxuXHQgICAgLy8gcHVibGljXG5cdFxuXHQgICAgTW9kYWwucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1vZGFsLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gc2hvdyhyZWxhdGVkVGFyZ2V0KSB7XG5cdCAgICAgIHZhciBfdGhpczEwID0gdGhpcztcblx0XG5cdCAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG5cdCAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywge1xuXHQgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXRcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcblx0XG5cdCAgICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdGhpcy5faXNTaG93biA9IHRydWU7XG5cdFxuXHQgICAgICB0aGlzLl9jaGVja1Njcm9sbGJhcigpO1xuXHQgICAgICB0aGlzLl9zZXRTY3JvbGxiYXIoKTtcblx0XG5cdCAgICAgICQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLk9QRU4pO1xuXHRcblx0ICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcblx0ICAgICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKTtcblx0XG5cdCAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0tfRElTTUlTUywgU2VsZWN0b3IuREFUQV9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICByZXR1cm4gX3RoaXMxMC5oaWRlKGV2ZW50KTtcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICAkKHRoaXMuX2RpYWxvZykub24oRXZlbnQuTU9VU0VET1dOX0RJU01JU1MsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAkKF90aGlzMTAuX2VsZW1lbnQpLm9uZShFdmVudC5NT1VTRVVQX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgaWYgKCQoZXZlbnQudGFyZ2V0KS5pcyhfdGhpczEwLl9lbGVtZW50KSkge1xuXHQgICAgICAgICAgICBfdGhpczEwLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiBfdGhpczEwLl9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1vZGFsLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gaGlkZShldmVudCkge1xuXHQgICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cdFxuXHQgICAgICBpZiAoZXZlbnQpIHtcblx0ICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICF0aGlzLl9pc1Nob3duKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgdHJhbnNpdGlvbiA9IFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSk7XG5cdFxuXHQgICAgICBpZiAodHJhbnNpdGlvbikge1xuXHQgICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUpO1xuXHRcblx0ICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cdFxuXHQgICAgICBpZiAoIXRoaXMuX2lzU2hvd24gfHwgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG5cdFxuXHQgICAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpO1xuXHQgICAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXHRcblx0ICAgICAgJChkb2N1bWVudCkub2ZmKEV2ZW50LkZPQ1VTSU4pO1xuXHRcblx0ICAgICAgJCh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cdFxuXHQgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFdmVudC5DTElDS19ESVNNSVNTKTtcblx0ICAgICAgJCh0aGlzLl9kaWFsb2cpLm9mZihFdmVudC5NT1VTRURPV05fRElTTUlTUyk7XG5cdFxuXHQgICAgICBpZiAodHJhbnNpdGlvbikge1xuXHRcblx0ICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgIHJldHVybiBfdGhpczExLl9oaWRlTW9kYWwoZXZlbnQpO1xuXHQgICAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMuX2hpZGVNb2RhbCgpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIE1vZGFsLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcblx0ICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcblx0XG5cdCAgICAgICQod2luZG93LCBkb2N1bWVudCwgdGhpcy5fZWxlbWVudCwgdGhpcy5fYmFja2Ryb3ApLm9mZihFVkVOVF9LRVkpO1xuXHRcblx0ICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcblx0ICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG5cdCAgICAgIHRoaXMuX2RpYWxvZyA9IG51bGw7XG5cdCAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcblx0ICAgICAgdGhpcy5faXNTaG93biA9IG51bGw7XG5cdCAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gbnVsbDtcblx0ICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IG51bGw7XG5cdCAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gbnVsbDtcblx0ICAgIH07XG5cdFxuXHQgICAgTW9kYWwucHJvdG90eXBlLmhhbmRsZVVwZGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZSgpIHtcblx0ICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIHByaXZhdGVcblx0XG5cdCAgICBNb2RhbC5wcm90b3R5cGUuX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG5cdCAgICAgIGNvbmZpZyA9ICQuZXh0ZW5kKHt9LCBEZWZhdWx0LCBjb25maWcpO1xuXHQgICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcblx0ICAgICAgcmV0dXJuIGNvbmZpZztcblx0ICAgIH07XG5cdFxuXHQgICAgTW9kYWwucHJvdG90eXBlLl9zaG93RWxlbWVudCA9IGZ1bmN0aW9uIF9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KSB7XG5cdCAgICAgIHZhciBfdGhpczEyID0gdGhpcztcblx0XG5cdCAgICAgIHZhciB0cmFuc2l0aW9uID0gVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKTtcblx0XG5cdCAgICAgIGlmICghdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlIHx8IHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcblx0ICAgICAgICAvLyBkb24ndCBtb3ZlIG1vZGFscyBkb20gcG9zaXRpb25cblx0ICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXHQgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcblx0ICAgICAgdGhpcy5fZWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuXHRcblx0ICAgICAgaWYgKHRyYW5zaXRpb24pIHtcblx0ICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgJCh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cdFxuXHQgICAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG5cdCAgICAgICAgdGhpcy5fZW5mb3JjZUZvY3VzKCk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBzaG93bkV2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XTiwge1xuXHQgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXRcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICB2YXIgdHJhbnNpdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gdHJhbnNpdGlvbkNvbXBsZXRlKCkge1xuXHQgICAgICAgIGlmIChfdGhpczEyLl9jb25maWcuZm9jdXMpIHtcblx0ICAgICAgICAgIF90aGlzMTIuX2VsZW1lbnQuZm9jdXMoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgX3RoaXMxMi5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG5cdCAgICAgICAgJChfdGhpczEyLl9lbGVtZW50KS50cmlnZ2VyKHNob3duRXZlbnQpO1xuXHQgICAgICB9O1xuXHRcblx0ICAgICAgaWYgKHRyYW5zaXRpb24pIHtcblx0ICAgICAgICAkKHRoaXMuX2RpYWxvZykub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIHRyYW5zaXRpb25Db21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdHJhbnNpdGlvbkNvbXBsZXRlKCk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgTW9kYWwucHJvdG90eXBlLl9lbmZvcmNlRm9jdXMgPSBmdW5jdGlvbiBfZW5mb3JjZUZvY3VzKCkge1xuXHQgICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cdFxuXHQgICAgICAkKGRvY3VtZW50KS5vZmYoRXZlbnQuRk9DVVNJTikgLy8gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBmb2N1cyBsb29wXG5cdCAgICAgIC5vbihFdmVudC5GT0NVU0lOLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICBpZiAoZG9jdW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJiBfdGhpczEzLl9lbGVtZW50ICE9PSBldmVudC50YXJnZXQgJiYgISQoX3RoaXMxMy5fZWxlbWVudCkuaGFzKGV2ZW50LnRhcmdldCkubGVuZ3RoKSB7XG5cdCAgICAgICAgICBfdGhpczEzLl9lbGVtZW50LmZvY3VzKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgTW9kYWwucHJvdG90eXBlLl9zZXRFc2NhcGVFdmVudCA9IGZ1bmN0aW9uIF9zZXRFc2NhcGVFdmVudCgpIHtcblx0ICAgICAgdmFyIF90aGlzMTQgPSB0aGlzO1xuXHRcblx0ICAgICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG5cdCAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5LRVlET1dOX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSkge1xuXHQgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgICAgICBfdGhpczE0LmhpZGUoKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93bikge1xuXHQgICAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50LktFWURPV05fRElTTUlTUyk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgTW9kYWwucHJvdG90eXBlLl9zZXRSZXNpemVFdmVudCA9IGZ1bmN0aW9uIF9zZXRSZXNpemVFdmVudCgpIHtcblx0ICAgICAgdmFyIF90aGlzMTUgPSB0aGlzO1xuXHRcblx0ICAgICAgaWYgKHRoaXMuX2lzU2hvd24pIHtcblx0ICAgICAgICAkKHdpbmRvdykub24oRXZlbnQuUkVTSVpFLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgIHJldHVybiBfdGhpczE1LmhhbmRsZVVwZGF0ZShldmVudCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgJCh3aW5kb3cpLm9mZihFdmVudC5SRVNJWkUpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIE1vZGFsLnByb3RvdHlwZS5faGlkZU1vZGFsID0gZnVuY3Rpb24gX2hpZGVNb2RhbCgpIHtcblx0ICAgICAgdmFyIF90aGlzMTYgPSB0aGlzO1xuXHRcblx0ICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHQgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcblx0ICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG5cdCAgICAgIHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgJChkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuT1BFTik7XG5cdCAgICAgICAgX3RoaXMxNi5fcmVzZXRBZGp1c3RtZW50cygpO1xuXHQgICAgICAgIF90aGlzMTYuX3Jlc2V0U2Nyb2xsYmFyKCk7XG5cdCAgICAgICAgJChfdGhpczE2Ll9lbGVtZW50KS50cmlnZ2VyKEV2ZW50LkhJRERFTik7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBNb2RhbC5wcm90b3R5cGUuX3JlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gX3JlbW92ZUJhY2tkcm9wKCkge1xuXHQgICAgICBpZiAodGhpcy5fYmFja2Ryb3ApIHtcblx0ICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmUoKTtcblx0ICAgICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgTW9kYWwucHJvdG90eXBlLl9zaG93QmFja2Ryb3AgPSBmdW5jdGlvbiBfc2hvd0JhY2tkcm9wKGNhbGxiYWNrKSB7XG5cdCAgICAgIHZhciBfdGhpczE3ID0gdGhpcztcblx0XG5cdCAgICAgIHZhciBhbmltYXRlID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkgPyBDbGFzc05hbWUuRkFERSA6ICcnO1xuXHRcblx0ICAgICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmJhY2tkcm9wKSB7XG5cdCAgICAgICAgdmFyIGRvQW5pbWF0ZSA9IFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgYW5pbWF0ZTtcblx0XG5cdCAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICAgICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc05hbWUgPSBDbGFzc05hbWUuQkFDS0RST1A7XG5cdFxuXHQgICAgICAgIGlmIChhbmltYXRlKSB7XG5cdCAgICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhhbmltYXRlKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgICQodGhpcy5fYmFja2Ryb3ApLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpO1xuXHRcblx0ICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgaWYgKF90aGlzMTcuX2lnbm9yZUJhY2tkcm9wQ2xpY2spIHtcblx0ICAgICAgICAgICAgX3RoaXMxNy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChfdGhpczE3Ll9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG5cdCAgICAgICAgICAgIF90aGlzMTcuX2VsZW1lbnQuZm9jdXMoKTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIF90aGlzMTcuaGlkZSgpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICBpZiAoZG9BbmltYXRlKSB7XG5cdCAgICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9iYWNrZHJvcCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cdFxuXHQgICAgICAgIGlmICghY2FsbGJhY2spIHtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICghZG9BbmltYXRlKSB7XG5cdCAgICAgICAgICBjYWxsYmFjaygpO1xuXHQgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKTtcblx0ICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93biAmJiB0aGlzLl9iYWNrZHJvcCkge1xuXHQgICAgICAgICQodGhpcy5fYmFja2Ryb3ApLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcblx0XG5cdCAgICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gY2FsbGJhY2tSZW1vdmUoKSB7XG5cdCAgICAgICAgICBfdGhpczE3Ll9yZW1vdmVCYWNrZHJvcCgpO1xuXHQgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG5cdCAgICAgICAgICAgIGNhbGxiYWNrKCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0XG5cdCAgICAgICAgaWYgKFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcblx0ICAgICAgICAgICQodGhpcy5fYmFja2Ryb3ApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjYWxsYmFja1JlbW92ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTik7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGNhbGxiYWNrUmVtb3ZlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2UgaWYgKGNhbGxiYWNrKSB7XG5cdCAgICAgICAgY2FsbGJhY2soKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICAvLyB0aGUgZm9sbG93aW5nIG1ldGhvZHMgYXJlIHVzZWQgdG8gaGFuZGxlIG92ZXJmbG93aW5nIG1vZGFsc1xuXHQgICAgLy8gdG9kbyAoZmF0KTogdGhlc2Ugc2hvdWxkIHByb2JhYmx5IGJlIHJlZmFjdG9yZWQgb3V0IG9mIG1vZGFsLmpzXG5cdCAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFxuXHQgICAgTW9kYWwucHJvdG90eXBlLl9hZGp1c3REaWFsb2cgPSBmdW5jdGlvbiBfYWRqdXN0RGlhbG9nKCkge1xuXHQgICAgICB2YXIgaXNNb2RhbE92ZXJmbG93aW5nID0gdGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXHRcblx0ICAgICAgaWYgKCF0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAmJiBpc01vZGFsT3ZlcmZsb3dpbmcpIHtcblx0ICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyAncHgnO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgIWlzTW9kYWxPdmVyZmxvd2luZykge1xuXHQgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyAncHgnO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIE1vZGFsLnByb3RvdHlwZS5fcmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uIF9yZXNldEFkanVzdG1lbnRzKCkge1xuXHQgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gJyc7XG5cdCAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJyc7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1vZGFsLnByb3RvdHlwZS5fY2hlY2tTY3JvbGxiYXIgPSBmdW5jdGlvbiBfY2hlY2tTY3JvbGxiYXIoKSB7XG5cdCAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCA8IHdpbmRvdy5pbm5lcldpZHRoO1xuXHQgICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IHRoaXMuX2dldFNjcm9sbGJhcldpZHRoKCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1vZGFsLnByb3RvdHlwZS5fc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gX3NldFNjcm9sbGJhcigpIHtcblx0ICAgICAgdmFyIF90aGlzMTggPSB0aGlzO1xuXHRcblx0ICAgICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nKSB7XG5cdCAgICAgICAgLy8gTm90ZTogRE9NTm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlIG9yICcnIGlmIG5vdCBzZXRcblx0ICAgICAgICAvLyAgIHdoaWxlICQoRE9NTm9kZSkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgcmV0dXJucyB0aGUgY2FsY3VsYXRlZCB2YWx1ZSBvciAwIGlmIG5vdCBzZXRcblx0XG5cdCAgICAgICAgLy8gQWRqdXN0IGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuXHQgICAgICAgICQoU2VsZWN0b3IuRklYRURfQ09OVEVOVCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcblx0ICAgICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gJChlbGVtZW50KVswXS5zdHlsZS5wYWRkaW5nUmlnaHQ7XG5cdCAgICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkKGVsZW1lbnQpLmNzcygncGFkZGluZy1yaWdodCcpO1xuXHQgICAgICAgICAgJChlbGVtZW50KS5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyBfdGhpczE4Ll9zY3JvbGxiYXJXaWR0aCArICdweCcpO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAvLyBBZGp1c3QgbmF2YmFyLXRvZ2dsZXIgbWFyZ2luXG5cdCAgICAgICAgJChTZWxlY3Rvci5OQVZCQVJfVE9HR0xFUikuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcblx0ICAgICAgICAgIHZhciBhY3R1YWxNYXJnaW4gPSAkKGVsZW1lbnQpWzBdLnN0eWxlLm1hcmdpblJpZ2h0O1xuXHQgICAgICAgICAgdmFyIGNhbGN1bGF0ZWRNYXJnaW4gPSAkKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0Jyk7XG5cdCAgICAgICAgICAkKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcsIGFjdHVhbE1hcmdpbikuY3NzKCdtYXJnaW4tcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRNYXJnaW4pICsgX3RoaXMxOC5fc2Nyb2xsYmFyV2lkdGggKyAncHgnKTtcblx0ICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgLy8gQWRqdXN0IGJvZHkgcGFkZGluZ1xuXHQgICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQ7XG5cdCAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYWRkaW5nID0gJCgnYm9keScpLmNzcygncGFkZGluZy1yaWdodCcpO1xuXHQgICAgICAgICQoJ2JvZHknKS5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyB0aGlzLl9zY3JvbGxiYXJXaWR0aCArICdweCcpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIE1vZGFsLnByb3RvdHlwZS5fcmVzZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiBfcmVzZXRTY3JvbGxiYXIoKSB7XG5cdCAgICAgIC8vIFJlc3RvcmUgZml4ZWQgY29udGVudCBwYWRkaW5nXG5cdCAgICAgICQoU2VsZWN0b3IuRklYRURfQ09OVEVOVCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcblx0ICAgICAgICB2YXIgcGFkZGluZyA9ICQoZWxlbWVudCkuZGF0YSgncGFkZGluZy1yaWdodCcpO1xuXHQgICAgICAgIGlmICh0eXBlb2YgcGFkZGluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgICQoZWxlbWVudCkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFkZGluZykucmVtb3ZlRGF0YSgncGFkZGluZy1yaWdodCcpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICAvLyBSZXN0b3JlIG5hdmJhci10b2dnbGVyIG1hcmdpblxuXHQgICAgICAkKFNlbGVjdG9yLk5BVkJBUl9UT0dHTEVSKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuXHQgICAgICAgIHZhciBtYXJnaW4gPSAkKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcpO1xuXHQgICAgICAgIGlmICh0eXBlb2YgbWFyZ2luICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgICAgJChlbGVtZW50KS5jc3MoJ21hcmdpbi1yaWdodCcsIG1hcmdpbikucmVtb3ZlRGF0YSgnbWFyZ2luLXJpZ2h0Jyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIC8vIFJlc3RvcmUgYm9keSBwYWRkaW5nXG5cdCAgICAgIHZhciBwYWRkaW5nID0gJCgnYm9keScpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKTtcblx0ICAgICAgaWYgKHR5cGVvZiBwYWRkaW5nICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgICQoJ2JvZHknKS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYWRkaW5nKS5yZW1vdmVEYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgTW9kYWwucHJvdG90eXBlLl9nZXRTY3JvbGxiYXJXaWR0aCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxiYXJXaWR0aCgpIHtcblx0ICAgICAgLy8gdGh4IGQud2Fsc2hcblx0ICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHQgICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gQ2xhc3NOYW1lLlNDUk9MTEJBUl9NRUFTVVJFUjtcblx0ICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuXHQgICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxEaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG5cdCAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcblx0ICAgICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBzdGF0aWNcblx0XG5cdCAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcsIHJlbGF0ZWRUYXJnZXQpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXHQgICAgICAgIHZhciBfY29uZmlnID0gJC5leHRlbmQoe30sIE1vZGFsLkRlZmF1bHQsICQodGhpcykuZGF0YSgpLCAodHlwZW9mIGNvbmZpZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29uZmlnKSkgPT09ICdvYmplY3QnICYmIGNvbmZpZyk7XG5cdFxuXHQgICAgICAgIGlmICghZGF0YSkge1xuXHQgICAgICAgICAgZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBfY29uZmlnKTtcblx0ICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBjb25maWcgKyAnXCInKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGRhdGFbY29uZmlnXShyZWxhdGVkVGFyZ2V0KTtcblx0ICAgICAgICB9IGVsc2UgaWYgKF9jb25maWcuc2hvdykge1xuXHQgICAgICAgICAgZGF0YS5zaG93KHJlbGF0ZWRUYXJnZXQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhNb2RhbCwgbnVsbCwgW3tcblx0ICAgICAga2V5OiAnVkVSU0lPTicsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIHJldHVybiBWRVJTSU9OO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ0RlZmF1bHQnLFxuXHQgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICByZXR1cm4gRGVmYXVsdDtcblx0ICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBNb2RhbDtcblx0ICB9KCk7XG5cdFxuXHQgIC8qKlxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICovXG5cdFxuXHQgICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICB2YXIgX3RoaXMxOSA9IHRoaXM7XG5cdFxuXHQgICAgdmFyIHRhcmdldCA9IHZvaWQgMDtcblx0ICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcblx0XG5cdCAgICBpZiAoc2VsZWN0b3IpIHtcblx0ICAgICAgdGFyZ2V0ID0gJChzZWxlY3RvcilbMF07XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGNvbmZpZyA9ICQodGFyZ2V0KS5kYXRhKERBVEFfS0VZKSA/ICd0b2dnbGUnIDogJC5leHRlbmQoe30sICQodGFyZ2V0KS5kYXRhKCksICQodGhpcykuZGF0YSgpKTtcblx0XG5cdCAgICBpZiAodGhpcy50YWdOYW1lID09PSAnQScgfHwgdGhpcy50YWdOYW1lID09PSAnQVJFQScpIHtcblx0ICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgJHRhcmdldCA9ICQodGFyZ2V0KS5vbmUoRXZlbnQuU0hPVywgZnVuY3Rpb24gKHNob3dFdmVudCkge1xuXHQgICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG5cdCAgICAgICAgLy8gb25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgJHRhcmdldC5vbmUoRXZlbnQuSElEREVOLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKCQoX3RoaXMxOSkuaXMoJzp2aXNpYmxlJykpIHtcblx0ICAgICAgICAgIF90aGlzMTkuZm9jdXMoKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfSk7XG5cdFxuXHQgICAgTW9kYWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGFyZ2V0KSwgY29uZmlnLCB0aGlzKTtcblx0ICB9KTtcblx0XG5cdCAgLyoqXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICogalF1ZXJ5XG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICovXG5cdFxuXHQgICQuZm5bTkFNRV0gPSBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlO1xuXHQgICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBNb2RhbDtcblx0ICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuXHQgICAgcmV0dXJuIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2U7XG5cdCAgfTtcblx0XG5cdCAgcmV0dXJuIE1vZGFsO1xuXHR9KGpRdWVyeSk7XG5cdFxuXHQvKipcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICogQm9vdHN0cmFwICh2NC4wLjAtYmV0YSk6IHNjcm9sbHNweS5qc1xuXHQgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgKi9cblx0XG5cdHZhciBTY3JvbGxTcHkgPSBmdW5jdGlvbiAoJCkge1xuXHRcblx0ICAvKipcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKiBDb25zdGFudHNcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0XG5cdCAgdmFyIE5BTUUgPSAnc2Nyb2xsc3B5Jztcblx0ICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1iZXRhJztcblx0ICB2YXIgREFUQV9LRVkgPSAnYnMuc2Nyb2xsc3B5Jztcblx0ICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG5cdCAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuXHQgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuXHRcblx0ICB2YXIgRGVmYXVsdCA9IHtcblx0ICAgIG9mZnNldDogMTAsXG5cdCAgICBtZXRob2Q6ICdhdXRvJyxcblx0ICAgIHRhcmdldDogJydcblx0ICB9O1xuXHRcblx0ICB2YXIgRGVmYXVsdFR5cGUgPSB7XG5cdCAgICBvZmZzZXQ6ICdudW1iZXInLFxuXHQgICAgbWV0aG9kOiAnc3RyaW5nJyxcblx0ICAgIHRhcmdldDogJyhzdHJpbmd8ZWxlbWVudCknXG5cdCAgfTtcblx0XG5cdCAgdmFyIEV2ZW50ID0ge1xuXHQgICAgQUNUSVZBVEU6ICdhY3RpdmF0ZScgKyBFVkVOVF9LRVksXG5cdCAgICBTQ1JPTEw6ICdzY3JvbGwnICsgRVZFTlRfS0VZLFxuXHQgICAgTE9BRF9EQVRBX0FQSTogJ2xvYWQnICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG5cdCAgfTtcblx0XG5cdCAgdmFyIENsYXNzTmFtZSA9IHtcblx0ICAgIERST1BET1dOX0lURU06ICdkcm9wZG93bi1pdGVtJyxcblx0ICAgIERST1BET1dOX01FTlU6ICdkcm9wZG93bi1tZW51Jyxcblx0ICAgIEFDVElWRTogJ2FjdGl2ZSdcblx0ICB9O1xuXHRcblx0ICB2YXIgU2VsZWN0b3IgPSB7XG5cdCAgICBEQVRBX1NQWTogJ1tkYXRhLXNweT1cInNjcm9sbFwiXScsXG5cdCAgICBBQ1RJVkU6ICcuYWN0aXZlJyxcblx0ICAgIE5BVl9MSVNUX0dST1VQOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuXHQgICAgTkFWX0xJTktTOiAnLm5hdi1saW5rJyxcblx0ICAgIExJU1RfSVRFTVM6ICcubGlzdC1ncm91cC1pdGVtJyxcblx0ICAgIERST1BET1dOOiAnLmRyb3Bkb3duJyxcblx0ICAgIERST1BET1dOX0lURU1TOiAnLmRyb3Bkb3duLWl0ZW0nLFxuXHQgICAgRFJPUERPV05fVE9HR0xFOiAnLmRyb3Bkb3duLXRvZ2dsZSdcblx0ICB9O1xuXHRcblx0ICB2YXIgT2Zmc2V0TWV0aG9kID0ge1xuXHQgICAgT0ZGU0VUOiAnb2Zmc2V0Jyxcblx0ICAgIFBPU0lUSU9OOiAncG9zaXRpb24nXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgICAqIENsYXNzIERlZmluaXRpb25cblx0ICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAgICovXG5cdFxuXHQgIH07XG5cdCAgdmFyIFNjcm9sbFNweSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBjb25maWcpIHtcblx0ICAgICAgdmFyIF90aGlzMjAgPSB0aGlzO1xuXHRcblx0ICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbFNweSk7XG5cdFxuXHQgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcblx0ICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IGVsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknID8gd2luZG93IDogZWxlbWVudDtcblx0ICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG5cdCAgICAgIHRoaXMuX3NlbGVjdG9yID0gdGhpcy5fY29uZmlnLnRhcmdldCArICcgJyArIFNlbGVjdG9yLk5BVl9MSU5LUyArICcsJyArICh0aGlzLl9jb25maWcudGFyZ2V0ICsgJyAnICsgU2VsZWN0b3IuTElTVF9JVEVNUyArICcsJykgKyAodGhpcy5fY29uZmlnLnRhcmdldCArICcgJyArIFNlbGVjdG9yLkRST1BET1dOX0lURU1TKTtcblx0ICAgICAgdGhpcy5fb2Zmc2V0cyA9IFtdO1xuXHQgICAgICB0aGlzLl90YXJnZXRzID0gW107XG5cdCAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG5cdCAgICAgIHRoaXMuX3Njcm9sbEhlaWdodCA9IDA7XG5cdFxuXHQgICAgICAkKHRoaXMuX3Njcm9sbEVsZW1lbnQpLm9uKEV2ZW50LlNDUk9MTCwgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgcmV0dXJuIF90aGlzMjAuX3Byb2Nlc3MoZXZlbnQpO1xuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIHRoaXMucmVmcmVzaCgpO1xuXHQgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gZ2V0dGVyc1xuXHRcblx0ICAgIC8vIHB1YmxpY1xuXHRcblx0ICAgIFNjcm9sbFNweS5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG5cdCAgICAgIHZhciBfdGhpczIxID0gdGhpcztcblx0XG5cdCAgICAgIHZhciBhdXRvTWV0aG9kID0gdGhpcy5fc2Nyb2xsRWxlbWVudCAhPT0gdGhpcy5fc2Nyb2xsRWxlbWVudC53aW5kb3cgPyBPZmZzZXRNZXRob2QuUE9TSVRJT04gOiBPZmZzZXRNZXRob2QuT0ZGU0VUO1xuXHRcblx0ICAgICAgdmFyIG9mZnNldE1ldGhvZCA9IHRoaXMuX2NvbmZpZy5tZXRob2QgPT09ICdhdXRvJyA/IGF1dG9NZXRob2QgOiB0aGlzLl9jb25maWcubWV0aG9kO1xuXHRcblx0ICAgICAgdmFyIG9mZnNldEJhc2UgPSBvZmZzZXRNZXRob2QgPT09IE9mZnNldE1ldGhvZC5QT1NJVElPTiA/IHRoaXMuX2dldFNjcm9sbFRvcCgpIDogMDtcblx0XG5cdCAgICAgIHRoaXMuX29mZnNldHMgPSBbXTtcblx0ICAgICAgdGhpcy5fdGFyZ2V0cyA9IFtdO1xuXHRcblx0ICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCk7XG5cdFxuXHQgICAgICB2YXIgdGFyZ2V0cyA9ICQubWFrZUFycmF5KCQodGhpcy5fc2VsZWN0b3IpKTtcblx0XG5cdCAgICAgIHRhcmdldHMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdCAgICAgICAgdmFyIHRhcmdldCA9IHZvaWQgMDtcblx0ICAgICAgICB2YXIgdGFyZ2V0U2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG5cdFxuXHQgICAgICAgIGlmICh0YXJnZXRTZWxlY3Rvcikge1xuXHQgICAgICAgICAgdGFyZ2V0ID0gJCh0YXJnZXRTZWxlY3RvcilbMF07XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAodGFyZ2V0KSB7XG5cdCAgICAgICAgICB2YXIgdGFyZ2V0QkNSID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHQgICAgICAgICAgaWYgKHRhcmdldEJDUi53aWR0aCB8fCB0YXJnZXRCQ1IuaGVpZ2h0KSB7XG5cdCAgICAgICAgICAgIC8vIHRvZG8gKGZhdCk6IHJlbW92ZSBza2V0Y2ggcmVsaWFuY2Ugb24galF1ZXJ5IHBvc2l0aW9uL29mZnNldFxuXHQgICAgICAgICAgICByZXR1cm4gWyQodGFyZ2V0KVtvZmZzZXRNZXRob2RdKCkudG9wICsgb2Zmc2V0QmFzZSwgdGFyZ2V0U2VsZWN0b3JdO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgcmV0dXJuIGl0ZW07XG5cdCAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcblx0ICAgICAgICByZXR1cm4gYVswXSAtIGJbMF07XG5cdCAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICBfdGhpczIxLl9vZmZzZXRzLnB1c2goaXRlbVswXSk7XG5cdCAgICAgICAgX3RoaXMyMS5fdGFyZ2V0cy5wdXNoKGl0ZW1bMV0pO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgU2Nyb2xsU3B5LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcblx0ICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcblx0ICAgICAgJCh0aGlzLl9zY3JvbGxFbGVtZW50KS5vZmYoRVZFTlRfS0VZKTtcblx0XG5cdCAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuXHQgICAgICB0aGlzLl9zY3JvbGxFbGVtZW50ID0gbnVsbDtcblx0ICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcblx0ICAgICAgdGhpcy5fc2VsZWN0b3IgPSBudWxsO1xuXHQgICAgICB0aGlzLl9vZmZzZXRzID0gbnVsbDtcblx0ICAgICAgdGhpcy5fdGFyZ2V0cyA9IG51bGw7XG5cdCAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG5cdCAgICAgIHRoaXMuX3Njcm9sbEhlaWdodCA9IG51bGw7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIHByaXZhdGVcblx0XG5cdCAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuXHQgICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgRGVmYXVsdCwgY29uZmlnKTtcblx0XG5cdCAgICAgIGlmICh0eXBlb2YgY29uZmlnLnRhcmdldCAhPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICB2YXIgaWQgPSAkKGNvbmZpZy50YXJnZXQpLmF0dHIoJ2lkJyk7XG5cdCAgICAgICAgaWYgKCFpZCkge1xuXHQgICAgICAgICAgaWQgPSBVdGlsLmdldFVJRChOQU1FKTtcblx0ICAgICAgICAgICQoY29uZmlnLnRhcmdldCkuYXR0cignaWQnLCBpZCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbmZpZy50YXJnZXQgPSAnIycgKyBpZDtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XG5cdFxuXHQgICAgICByZXR1cm4gY29uZmlnO1xuXHQgICAgfTtcblx0XG5cdCAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9nZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsVG9wKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gdGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsVG9wO1xuXHQgICAgfTtcblx0XG5cdCAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsSGVpZ2h0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9nZXRPZmZzZXRIZWlnaHQgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0SGVpZ2h0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNjcm9sbFNweS5wcm90b3R5cGUuX3Byb2Nlc3MgPSBmdW5jdGlvbiBfcHJvY2VzcygpIHtcblx0ICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuX2dldFNjcm9sbFRvcCgpICsgdGhpcy5fY29uZmlnLm9mZnNldDtcblx0ICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuX2dldFNjcm9sbEhlaWdodCgpO1xuXHQgICAgICB2YXIgbWF4U2Nyb2xsID0gdGhpcy5fY29uZmlnLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuX2dldE9mZnNldEhlaWdodCgpO1xuXHRcblx0ICAgICAgaWYgKHRoaXMuX3Njcm9sbEhlaWdodCAhPT0gc2Nyb2xsSGVpZ2h0KSB7XG5cdCAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG5cdCAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGggLSAxXTtcblx0XG5cdCAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGFyZ2V0KSB7XG5cdCAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkge1xuXHQgICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fY2xlYXIoKTtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9vZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuXHQgICAgICAgIHZhciBpc0FjdGl2ZVRhcmdldCA9IHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGhpcy5fdGFyZ2V0c1tpXSAmJiBzY3JvbGxUb3AgPj0gdGhpcy5fb2Zmc2V0c1tpXSAmJiAodGhpcy5fb2Zmc2V0c1tpICsgMV0gPT09IHVuZGVmaW5lZCB8fCBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzW2kgKyAxXSk7XG5cdFxuXHQgICAgICAgIGlmIChpc0FjdGl2ZVRhcmdldCkge1xuXHQgICAgICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fdGFyZ2V0c1tpXSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIFNjcm9sbFNweS5wcm90b3R5cGUuX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKHRhcmdldCkge1xuXHQgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSB0YXJnZXQ7XG5cdFxuXHQgICAgICB0aGlzLl9jbGVhcigpO1xuXHRcblx0ICAgICAgdmFyIHF1ZXJpZXMgPSB0aGlzLl9zZWxlY3Rvci5zcGxpdCgnLCcpO1xuXHQgICAgICBxdWVyaWVzID0gcXVlcmllcy5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG5cdCAgICAgICAgcmV0dXJuIHNlbGVjdG9yICsgJ1tkYXRhLXRhcmdldD1cIicgKyB0YXJnZXQgKyAnXCJdLCcgKyAoc2VsZWN0b3IgKyAnW2hyZWY9XCInICsgdGFyZ2V0ICsgJ1wiXScpO1xuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIHZhciAkbGluayA9ICQocXVlcmllcy5qb2luKCcsJykpO1xuXHRcblx0ICAgICAgaWYgKCRsaW5rLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QRE9XTl9JVEVNKSkge1xuXHQgICAgICAgICRsaW5rLmNsb3Nlc3QoU2VsZWN0b3IuRFJPUERPV04pLmZpbmQoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblx0ICAgICAgICAkbGluay5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAvLyBTZXQgdHJpZ2dlcmVkIGxpbmsgYXMgYWN0aXZlXG5cdCAgICAgICAgJGxpbmsuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG5cdCAgICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rcyBwYXJlbnRzIGFzIGFjdGl2ZVxuXHQgICAgICAgIC8vIFdpdGggYm90aCA8dWw+IGFuZCA8bmF2PiBtYXJrdXAgYSBwYXJlbnQgaXMgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YgYW55IG5hdiBhbmNlc3RvclxuXHQgICAgICAgICRsaW5rLnBhcmVudHMoU2VsZWN0b3IuTkFWX0xJU1RfR1JPVVApLnByZXYoU2VsZWN0b3IuTkFWX0xJTktTICsgJywgJyArIFNlbGVjdG9yLkxJU1RfSVRFTVMpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAkKHRoaXMuX3Njcm9sbEVsZW1lbnQpLnRyaWdnZXIoRXZlbnQuQUNUSVZBVEUsIHtcblx0ICAgICAgICByZWxhdGVkVGFyZ2V0OiB0YXJnZXRcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNjcm9sbFNweS5wcm90b3R5cGUuX2NsZWFyID0gZnVuY3Rpb24gX2NsZWFyKCkge1xuXHQgICAgICAkKHRoaXMuX3NlbGVjdG9yKS5maWx0ZXIoU2VsZWN0b3IuQUNUSVZFKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gc3RhdGljXG5cdFxuXHQgICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuXHQgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSk7XG5cdCAgICAgICAgdmFyIF9jb25maWcgPSAodHlwZW9mIGNvbmZpZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29uZmlnKSkgPT09ICdvYmplY3QnICYmIGNvbmZpZztcblx0XG5cdCAgICAgICAgaWYgKCFkYXRhKSB7XG5cdCAgICAgICAgICBkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBfY29uZmlnKTtcblx0ICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBjb25maWcgKyAnXCInKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhTY3JvbGxTcHksIG51bGwsIFt7XG5cdCAgICAgIGtleTogJ1ZFUlNJT04nLFxuXHQgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICByZXR1cm4gVkVSU0lPTjtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdEZWZhdWx0Jyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG5cdCAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gU2Nyb2xsU3B5O1xuXHQgIH0oKTtcblx0XG5cdCAgLyoqXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0XG5cdCAgJCh3aW5kb3cpLm9uKEV2ZW50LkxPQURfREFUQV9BUEksIGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBzY3JvbGxTcHlzID0gJC5tYWtlQXJyYXkoJChTZWxlY3Rvci5EQVRBX1NQWSkpO1xuXHRcblx0ICAgIGZvciAodmFyIGkgPSBzY3JvbGxTcHlzLmxlbmd0aDsgaS0tOykge1xuXHQgICAgICB2YXIgJHNweSA9ICQoc2Nyb2xsU3B5c1tpXSk7XG5cdCAgICAgIFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJHNweSwgJHNweS5kYXRhKCkpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHRcblx0ICAvKipcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKiBqUXVlcnlcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0XG5cdCAgJC5mbltOQU1FXSA9IFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlO1xuXHQgICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBTY3JvbGxTcHk7XG5cdCAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcblx0ICAgIHJldHVybiBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZTtcblx0ICB9O1xuXHRcblx0ICByZXR1cm4gU2Nyb2xsU3B5O1xuXHR9KGpRdWVyeSk7XG5cdFxuXHQvKipcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICogQm9vdHN0cmFwICh2NC4wLjAtYmV0YSk6IHRhYi5qc1xuXHQgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgKi9cblx0XG5cdHZhciBUYWIgPSBmdW5jdGlvbiAoJCkge1xuXHRcblx0ICAvKipcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKiBDb25zdGFudHNcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0XG5cdCAgdmFyIE5BTUUgPSAndGFiJztcblx0ICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1iZXRhJztcblx0ICB2YXIgREFUQV9LRVkgPSAnYnMudGFiJztcblx0ICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG5cdCAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuXHQgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuXHQgIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuXHRcblx0ICB2YXIgRXZlbnQgPSB7XG5cdCAgICBISURFOiAnaGlkZScgKyBFVkVOVF9LRVksXG5cdCAgICBISURERU46ICdoaWRkZW4nICsgRVZFTlRfS0VZLFxuXHQgICAgU0hPVzogJ3Nob3cnICsgRVZFTlRfS0VZLFxuXHQgICAgU0hPV046ICdzaG93bicgKyBFVkVOVF9LRVksXG5cdCAgICBDTElDS19EQVRBX0FQSTogJ2NsaWNrJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuXHQgIH07XG5cdFxuXHQgIHZhciBDbGFzc05hbWUgPSB7XG5cdCAgICBEUk9QRE9XTl9NRU5VOiAnZHJvcGRvd24tbWVudScsXG5cdCAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuXHQgICAgRElTQUJMRUQ6ICdkaXNhYmxlZCcsXG5cdCAgICBGQURFOiAnZmFkZScsXG5cdCAgICBTSE9XOiAnc2hvdydcblx0ICB9O1xuXHRcblx0ICB2YXIgU2VsZWN0b3IgPSB7XG5cdCAgICBEUk9QRE9XTjogJy5kcm9wZG93bicsXG5cdCAgICBOQVZfTElTVF9HUk9VUDogJy5uYXYsIC5saXN0LWdyb3VwJyxcblx0ICAgIEFDVElWRTogJy5hY3RpdmUnLFxuXHQgICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLXRvZ2dsZT1cImxpc3RcIl0nLFxuXHQgICAgRFJPUERPV05fVE9HR0xFOiAnLmRyb3Bkb3duLXRvZ2dsZScsXG5cdCAgICBEUk9QRE9XTl9BQ1RJVkVfQ0hJTEQ6ICc+IC5kcm9wZG93bi1tZW51IC5hY3RpdmUnXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgICAqIENsYXNzIERlZmluaXRpb25cblx0ICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAgICovXG5cdFxuXHQgIH07XG5cdCAgdmFyIFRhYiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFRhYihlbGVtZW50KSB7XG5cdCAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWIpO1xuXHRcblx0ICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gZ2V0dGVyc1xuXHRcblx0ICAgIC8vIHB1YmxpY1xuXHRcblx0ICAgIFRhYi5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG5cdCAgICAgIHZhciBfdGhpczIyID0gdGhpcztcblx0XG5cdCAgICAgIGlmICh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgJiYgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpIHx8ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIHRhcmdldCA9IHZvaWQgMDtcblx0ICAgICAgdmFyIHByZXZpb3VzID0gdm9pZCAwO1xuXHQgICAgICB2YXIgbGlzdEVsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuTkFWX0xJU1RfR1JPVVApWzBdO1xuXHQgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cdFxuXHQgICAgICBpZiAobGlzdEVsZW1lbnQpIHtcblx0ICAgICAgICBwcmV2aW91cyA9ICQubWFrZUFycmF5KCQobGlzdEVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFKSk7XG5cdCAgICAgICAgcHJldmlvdXMgPSBwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSwge1xuXHQgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XLCB7XG5cdCAgICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXNcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICBpZiAocHJldmlvdXMpIHtcblx0ICAgICAgICAkKHByZXZpb3VzKS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXHRcblx0ICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChzZWxlY3Rvcikge1xuXHQgICAgICAgIHRhcmdldCA9ICQoc2VsZWN0b3IpWzBdO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl9lbGVtZW50LCBsaXN0RWxlbWVudCk7XG5cdFxuXHQgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcblx0ICAgICAgICB2YXIgaGlkZGVuRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJRERFTiwge1xuXHQgICAgICAgICAgcmVsYXRlZFRhcmdldDogX3RoaXMyMi5fZWxlbWVudFxuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICB2YXIgc2hvd25FdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPV04sIHtcblx0ICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgICQocHJldmlvdXMpLnRyaWdnZXIoaGlkZGVuRXZlbnQpO1xuXHQgICAgICAgICQoX3RoaXMyMi5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KTtcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIGlmICh0YXJnZXQpIHtcblx0ICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQsIHRhcmdldC5wYXJlbnROb2RlLCBjb21wbGV0ZSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgY29tcGxldGUoKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBUYWIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuXHQgICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuXHQgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gcHJpdmF0ZVxuXHRcblx0ICAgIFRhYi5wcm90b3R5cGUuX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcblx0ICAgICAgdmFyIF90aGlzMjMgPSB0aGlzO1xuXHRcblx0ICAgICAgdmFyIGFjdGl2ZSA9ICQoY29udGFpbmVyKS5maW5kKFNlbGVjdG9yLkFDVElWRSlbMF07XG5cdCAgICAgIHZhciBpc1RyYW5zaXRpb25pbmcgPSBjYWxsYmFjayAmJiBVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmIGFjdGl2ZSAmJiAkKGFjdGl2ZSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuXHRcblx0ICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG5cdCAgICAgICAgcmV0dXJuIF90aGlzMjMuX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGlzVHJhbnNpdGlvbmluZywgY2FsbGJhY2spO1xuXHQgICAgICB9O1xuXHRcblx0ICAgICAgaWYgKGFjdGl2ZSAmJiBpc1RyYW5zaXRpb25pbmcpIHtcblx0ICAgICAgICAkKGFjdGl2ZSkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBjb21wbGV0ZSgpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoYWN0aXZlKSB7XG5cdCAgICAgICAgJChhY3RpdmUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBUYWIucHJvdG90eXBlLl90cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiBfdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgaXNUcmFuc2l0aW9uaW5nLCBjYWxsYmFjaykge1xuXHQgICAgICBpZiAoYWN0aXZlKSB7XG5cdCAgICAgICAgJChhY3RpdmUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuXHRcblx0ICAgICAgICB2YXIgZHJvcGRvd25DaGlsZCA9ICQoYWN0aXZlLnBhcmVudE5vZGUpLmZpbmQoU2VsZWN0b3IuRFJPUERPV05fQUNUSVZFX0NISUxEKVswXTtcblx0XG5cdCAgICAgICAgaWYgKGRyb3Bkb3duQ2hpbGQpIHtcblx0ICAgICAgICAgICQoZHJvcGRvd25DaGlsZCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBhY3RpdmUuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuXHQgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuXHRcblx0ICAgICAgaWYgKGlzVHJhbnNpdGlvbmluZykge1xuXHQgICAgICAgIFV0aWwucmVmbG93KGVsZW1lbnQpO1xuXHQgICAgICAgICQoZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICQoZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlICYmICQoZWxlbWVudC5wYXJlbnROb2RlKS5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUERPV05fTUVOVSkpIHtcblx0XG5cdCAgICAgICAgdmFyIGRyb3Bkb3duRWxlbWVudCA9ICQoZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5EUk9QRE9XTilbMF07XG5cdCAgICAgICAgaWYgKGRyb3Bkb3duRWxlbWVudCkge1xuXHQgICAgICAgICAgJChkcm9wZG93bkVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChjYWxsYmFjaykge1xuXHQgICAgICAgIGNhbGxiYWNrKCk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgLy8gc3RhdGljXG5cdFxuXHQgICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuXHQgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXHQgICAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YShEQVRBX0tFWSk7XG5cdFxuXHQgICAgICAgIGlmICghZGF0YSkge1xuXHQgICAgICAgICAgZGF0YSA9IG5ldyBUYWIodGhpcyk7XG5cdCAgICAgICAgICAkdGhpcy5kYXRhKERBVEFfS0VZLCBkYXRhKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJyArIGNvbmZpZyArICdcIicpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgZGF0YVtjb25maWddKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKFRhYiwgbnVsbCwgW3tcblx0ICAgICAga2V5OiAnVkVSU0lPTicsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIHJldHVybiBWRVJTSU9OO1xuXHQgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIFRhYjtcblx0ICB9KCk7XG5cdFxuXHQgIC8qKlxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICovXG5cdFxuXHQgICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHRoaXMpLCAnc2hvdycpO1xuXHQgIH0pO1xuXHRcblx0ICAvKipcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKiBqUXVlcnlcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0XG5cdCAgJC5mbltOQU1FXSA9IFRhYi5falF1ZXJ5SW50ZXJmYWNlO1xuXHQgICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBUYWI7XG5cdCAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcblx0ICAgIHJldHVybiBUYWIuX2pRdWVyeUludGVyZmFjZTtcblx0ICB9O1xuXHRcblx0ICByZXR1cm4gVGFiO1xuXHR9KGpRdWVyeSk7XG5cdFxuXHQvKiBnbG9iYWwgUG9wcGVyICovXG5cdFxuXHQvKipcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICogQm9vdHN0cmFwICh2NC4wLjAtYmV0YSk6IHRvb2x0aXAuanNcblx0ICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICovXG5cdFxuXHR2YXIgVG9vbHRpcCA9IGZ1bmN0aW9uICgkKSB7XG5cdFxuXHQgIC8qKlxuXHQgICAqIENoZWNrIGZvciBQb3BwZXIgZGVwZW5kZW5jeVxuXHQgICAqIFBvcHBlciAtIGh0dHBzOi8vcG9wcGVyLmpzLm9yZ1xuXHQgICAqL1xuXHQgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXAgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZyknKTtcblx0ICB9XG5cdFxuXHQgIC8qKlxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqIENvbnN0YW50c1xuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqL1xuXHRcblx0ICB2YXIgTkFNRSA9ICd0b29sdGlwJztcblx0ICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1iZXRhJztcblx0ICB2YXIgREFUQV9LRVkgPSAnYnMudG9vbHRpcCc7XG5cdCAgdmFyIEVWRU5UX0tFWSA9ICcuJyArIERBVEFfS0VZO1xuXHQgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuXHQgIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuXHQgIHZhciBDTEFTU19QUkVGSVggPSAnYnMtdG9vbHRpcCc7XG5cdCAgdmFyIEJTQ0xTX1BSRUZJWF9SRUdFWCA9IG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBDTEFTU19QUkVGSVggKyAnXFxcXFMrJywgJ2cnKTtcblx0XG5cdCAgdmFyIERlZmF1bHRUeXBlID0ge1xuXHQgICAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXG5cdCAgICB0ZW1wbGF0ZTogJ3N0cmluZycsXG5cdCAgICB0aXRsZTogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknLFxuXHQgICAgdHJpZ2dlcjogJ3N0cmluZycsXG5cdCAgICBkZWxheTogJyhudW1iZXJ8b2JqZWN0KScsXG5cdCAgICBodG1sOiAnYm9vbGVhbicsXG5cdCAgICBzZWxlY3RvcjogJyhzdHJpbmd8Ym9vbGVhbiknLFxuXHQgICAgcGxhY2VtZW50OiAnKHN0cmluZ3xmdW5jdGlvbiknLFxuXHQgICAgb2Zmc2V0OiAnKG51bWJlcnxzdHJpbmcpJyxcblx0ICAgIGNvbnRhaW5lcjogJyhzdHJpbmd8ZWxlbWVudHxib29sZWFuKScsXG5cdCAgICBmYWxsYmFja1BsYWNlbWVudDogJyhzdHJpbmd8YXJyYXkpJ1xuXHQgIH07XG5cdFxuXHQgIHZhciBBdHRhY2htZW50TWFwID0ge1xuXHQgICAgQVVUTzogJ2F1dG8nLFxuXHQgICAgVE9QOiAndG9wJyxcblx0ICAgIFJJR0hUOiAncmlnaHQnLFxuXHQgICAgQk9UVE9NOiAnYm90dG9tJyxcblx0ICAgIExFRlQ6ICdsZWZ0J1xuXHQgIH07XG5cdFxuXHQgIHZhciBEZWZhdWx0ID0ge1xuXHQgICAgYW5pbWF0aW9uOiB0cnVlLFxuXHQgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+JyArICc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+Jyxcblx0ICAgIHRyaWdnZXI6ICdob3ZlciBmb2N1cycsXG5cdCAgICB0aXRsZTogJycsXG5cdCAgICBkZWxheTogMCxcblx0ICAgIGh0bWw6IGZhbHNlLFxuXHQgICAgc2VsZWN0b3I6IGZhbHNlLFxuXHQgICAgcGxhY2VtZW50OiAndG9wJyxcblx0ICAgIG9mZnNldDogMCxcblx0ICAgIGNvbnRhaW5lcjogZmFsc2UsXG5cdCAgICBmYWxsYmFja1BsYWNlbWVudDogJ2ZsaXAnXG5cdCAgfTtcblx0XG5cdCAgdmFyIEhvdmVyU3RhdGUgPSB7XG5cdCAgICBTSE9XOiAnc2hvdycsXG5cdCAgICBPVVQ6ICdvdXQnXG5cdCAgfTtcblx0XG5cdCAgdmFyIEV2ZW50ID0ge1xuXHQgICAgSElERTogJ2hpZGUnICsgRVZFTlRfS0VZLFxuXHQgICAgSElEREVOOiAnaGlkZGVuJyArIEVWRU5UX0tFWSxcblx0ICAgIFNIT1c6ICdzaG93JyArIEVWRU5UX0tFWSxcblx0ICAgIFNIT1dOOiAnc2hvd24nICsgRVZFTlRfS0VZLFxuXHQgICAgSU5TRVJURUQ6ICdpbnNlcnRlZCcgKyBFVkVOVF9LRVksXG5cdCAgICBDTElDSzogJ2NsaWNrJyArIEVWRU5UX0tFWSxcblx0ICAgIEZPQ1VTSU46ICdmb2N1c2luJyArIEVWRU5UX0tFWSxcblx0ICAgIEZPQ1VTT1VUOiAnZm9jdXNvdXQnICsgRVZFTlRfS0VZLFxuXHQgICAgTU9VU0VFTlRFUjogJ21vdXNlZW50ZXInICsgRVZFTlRfS0VZLFxuXHQgICAgTU9VU0VMRUFWRTogJ21vdXNlbGVhdmUnICsgRVZFTlRfS0VZXG5cdCAgfTtcblx0XG5cdCAgdmFyIENsYXNzTmFtZSA9IHtcblx0ICAgIEZBREU6ICdmYWRlJyxcblx0ICAgIFNIT1c6ICdzaG93J1xuXHQgIH07XG5cdFxuXHQgIHZhciBTZWxlY3RvciA9IHtcblx0ICAgIFRPT0xUSVA6ICcudG9vbHRpcCcsXG5cdCAgICBUT09MVElQX0lOTkVSOiAnLnRvb2x0aXAtaW5uZXInLFxuXHQgICAgQVJST1c6ICcuYXJyb3cnXG5cdCAgfTtcblx0XG5cdCAgdmFyIFRyaWdnZXIgPSB7XG5cdCAgICBIT1ZFUjogJ2hvdmVyJyxcblx0ICAgIEZPQ1VTOiAnZm9jdXMnLFxuXHQgICAgQ0xJQ0s6ICdjbGljaycsXG5cdCAgICBNQU5VQUw6ICdtYW51YWwnXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgICAqIENsYXNzIERlZmluaXRpb25cblx0ICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAgICovXG5cdFxuXHQgIH07XG5cdCAgdmFyIFRvb2x0aXAgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBUb29sdGlwKGVsZW1lbnQsIGNvbmZpZykge1xuXHQgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9vbHRpcCk7XG5cdFxuXHQgICAgICAvLyBwcml2YXRlXG5cdCAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWU7XG5cdCAgICAgIHRoaXMuX3RpbWVvdXQgPSAwO1xuXHQgICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XG5cdCAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXIgPSB7fTtcblx0ICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcblx0XG5cdCAgICAgIC8vIHByb3RlY3RlZFxuXHQgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuXHQgICAgICB0aGlzLmNvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuXHQgICAgICB0aGlzLnRpcCA9IG51bGw7XG5cdFxuXHQgICAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKTtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBnZXR0ZXJzXG5cdFxuXHQgICAgLy8gcHVibGljXG5cdFxuXHQgICAgVG9vbHRpcC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKCkge1xuXHQgICAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb29sdGlwLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0ICAgICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2U7XG5cdCAgICB9O1xuXHRcblx0ICAgIFRvb2x0aXAucHJvdG90eXBlLnRvZ2dsZUVuYWJsZWQgPSBmdW5jdGlvbiB0b2dnbGVFbmFibGVkKCkge1xuXHQgICAgICB0aGlzLl9pc0VuYWJsZWQgPSAhdGhpcy5faXNFbmFibGVkO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoZXZlbnQpIHtcblx0ICAgICAgaWYgKGV2ZW50KSB7XG5cdCAgICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZO1xuXHQgICAgICAgIHZhciBjb250ZXh0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXHRcblx0ICAgICAgICBpZiAoIWNvbnRleHQpIHtcblx0ICAgICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcblx0ICAgICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2sgPSAhY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljaztcblx0XG5cdCAgICAgICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuXHQgICAgICAgICAgY29udGV4dC5fZW50ZXIobnVsbCwgY29udGV4dCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGNvbnRleHQuX2xlYXZlKG51bGwsIGNvbnRleHQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0XG5cdCAgICAgICAgaWYgKCQodGhpcy5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuXHQgICAgICAgICAgdGhpcy5fbGVhdmUobnVsbCwgdGhpcyk7XG5cdCAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB0aGlzLl9lbnRlcihudWxsLCB0aGlzKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBUb29sdGlwLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcblx0ICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuXHRcblx0ICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSk7XG5cdFxuXHQgICAgICAkKHRoaXMuZWxlbWVudCkub2ZmKHRoaXMuY29uc3RydWN0b3IuRVZFTlRfS0VZKTtcblx0ICAgICAgJCh0aGlzLmVsZW1lbnQpLmNsb3Nlc3QoJy5tb2RhbCcpLm9mZignaGlkZS5icy5tb2RhbCcpO1xuXHRcblx0ICAgICAgaWYgKHRoaXMudGlwKSB7XG5cdCAgICAgICAgJCh0aGlzLnRpcCkucmVtb3ZlKCk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IG51bGw7XG5cdCAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuXHQgICAgICB0aGlzLl9ob3ZlclN0YXRlID0gbnVsbDtcblx0ICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IG51bGw7XG5cdCAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcblx0ICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG5cdFxuXHQgICAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuXHQgICAgICB0aGlzLmNvbmZpZyA9IG51bGw7XG5cdCAgICAgIHRoaXMudGlwID0gbnVsbDtcblx0ICAgIH07XG5cdFxuXHQgICAgVG9vbHRpcC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG5cdCAgICAgIHZhciBfdGhpczI0ID0gdGhpcztcblx0XG5cdCAgICAgIGlmICgkKHRoaXMuZWxlbWVudCkuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJykge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHVzZSBzaG93IG9uIHZpc2libGUgZWxlbWVudHMnKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XKTtcblx0ICAgICAgaWYgKHRoaXMuaXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkge1xuXHQgICAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cdFxuXHQgICAgICAgIHZhciBpc0luVGhlRG9tID0gJC5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuZWxlbWVudCk7XG5cdFxuXHQgICAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgIWlzSW5UaGVEb20pIHtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcblx0ICAgICAgICB2YXIgdGlwSWQgPSBVdGlsLmdldFVJRCh0aGlzLmNvbnN0cnVjdG9yLk5BTUUpO1xuXHRcblx0ICAgICAgICB0aXAuc2V0QXR0cmlidXRlKCdpZCcsIHRpcElkKTtcblx0ICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwSWQpO1xuXHRcblx0ICAgICAgICB0aGlzLnNldENvbnRlbnQoKTtcblx0XG5cdCAgICAgICAgaWYgKHRoaXMuY29uZmlnLmFuaW1hdGlvbikge1xuXHQgICAgICAgICAgJCh0aXApLmFkZENsYXNzKENsYXNzTmFtZS5GQURFKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciBwbGFjZW1lbnQgPSB0eXBlb2YgdGhpcy5jb25maWcucGxhY2VtZW50ID09PSAnZnVuY3Rpb24nID8gdGhpcy5jb25maWcucGxhY2VtZW50LmNhbGwodGhpcywgdGlwLCB0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcucGxhY2VtZW50O1xuXHRcblx0ICAgICAgICB2YXIgYXR0YWNobWVudCA9IHRoaXMuX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KTtcblx0ICAgICAgICB0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KTtcblx0XG5cdCAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY29uZmlnLmNvbnRhaW5lciA9PT0gZmFsc2UgPyBkb2N1bWVudC5ib2R5IDogJCh0aGlzLmNvbmZpZy5jb250YWluZXIpO1xuXHRcblx0ICAgICAgICAkKHRpcCkuZGF0YSh0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKTtcblx0XG5cdCAgICAgICAgaWYgKCEkLmNvbnRhaW5zKHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy50aXApKSB7XG5cdCAgICAgICAgICAkKHRpcCkuYXBwZW5kVG8oY29udGFpbmVyKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSU5TRVJURUQpO1xuXHRcblx0ICAgICAgICB0aGlzLl9wb3BwZXIgPSBuZXcgUG9wcGVyKHRoaXMuZWxlbWVudCwgdGlwLCB7XG5cdCAgICAgICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG5cdCAgICAgICAgICBtb2RpZmllcnM6IHtcblx0ICAgICAgICAgICAgb2Zmc2V0OiB7XG5cdCAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLmNvbmZpZy5vZmZzZXRcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgZmxpcDoge1xuXHQgICAgICAgICAgICAgIGJlaGF2aW9yOiB0aGlzLmNvbmZpZy5mYWxsYmFja1BsYWNlbWVudFxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBhcnJvdzoge1xuXHQgICAgICAgICAgICAgIGVsZW1lbnQ6IFNlbGVjdG9yLkFSUk9XXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0sXG5cdCAgICAgICAgICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoZGF0YSkge1xuXHQgICAgICAgICAgICBpZiAoZGF0YS5vcmlnaW5hbFBsYWNlbWVudCAhPT0gZGF0YS5wbGFjZW1lbnQpIHtcblx0ICAgICAgICAgICAgICBfdGhpczI0Ll9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0sXG5cdCAgICAgICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSkge1xuXHQgICAgICAgICAgICBfdGhpczI0Ll9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgICQodGlwKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cdFxuXHQgICAgICAgIC8vIGlmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcblx0ICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuXHQgICAgICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG5cdCAgICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG5cdCAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuXHQgICAgICAgICAgJCgnYm9keScpLmNoaWxkcmVuKCkub24oJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcblx0ICAgICAgICAgIGlmIChfdGhpczI0LmNvbmZpZy5hbmltYXRpb24pIHtcblx0ICAgICAgICAgICAgX3RoaXMyNC5fZml4VHJhbnNpdGlvbigpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gX3RoaXMyNC5faG92ZXJTdGF0ZTtcblx0ICAgICAgICAgIF90aGlzMjQuX2hvdmVyU3RhdGUgPSBudWxsO1xuXHRcblx0ICAgICAgICAgICQoX3RoaXMyNC5lbGVtZW50KS50cmlnZ2VyKF90aGlzMjQuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pO1xuXHRcblx0ICAgICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcblx0ICAgICAgICAgICAgX3RoaXMyNC5fbGVhdmUobnVsbCwgX3RoaXMyNCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0XG5cdCAgICAgICAgaWYgKFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCh0aGlzLnRpcCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG5cdCAgICAgICAgICAkKHRoaXMudGlwKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuX1RSQU5TSVRJT05fRFVSQVRJT04pO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBjb21wbGV0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBUb29sdGlwLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gaGlkZShjYWxsYmFjaykge1xuXHQgICAgICB2YXIgX3RoaXMyNSA9IHRoaXM7XG5cdFxuXHQgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG5cdCAgICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSElERSk7XG5cdCAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuXHQgICAgICAgIGlmIChfdGhpczI1Ll9ob3ZlclN0YXRlICE9PSBIb3ZlclN0YXRlLlNIT1cgJiYgdGlwLnBhcmVudE5vZGUpIHtcblx0ICAgICAgICAgIHRpcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRpcCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBfdGhpczI1Ll9jbGVhblRpcENsYXNzKCk7XG5cdCAgICAgICAgX3RoaXMyNS5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpO1xuXHQgICAgICAgICQoX3RoaXMyNS5lbGVtZW50KS50cmlnZ2VyKF90aGlzMjUuY29uc3RydWN0b3IuRXZlbnQuSElEREVOKTtcblx0ICAgICAgICBpZiAoX3RoaXMyNS5fcG9wcGVyICE9PSBudWxsKSB7XG5cdCAgICAgICAgICBfdGhpczI1Ll9wb3BwZXIuZGVzdHJveSgpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG5cdCAgICAgICAgICBjYWxsYmFjaygpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0XG5cdCAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cdFxuXHQgICAgICBpZiAoaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAkKHRpcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXHRcblx0ICAgICAgLy8gaWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcblx0ICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcblx0ICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuXHQgICAgICAgICQoJ2JvZHknKS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkNMSUNLXSA9IGZhbHNlO1xuXHQgICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuRk9DVVNdID0gZmFsc2U7XG5cdCAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVHJpZ2dlci5IT1ZFUl0gPSBmYWxzZTtcblx0XG5cdCAgICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQodGhpcy50aXApLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuXHRcblx0ICAgICAgICAkKHRpcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBjb21wbGV0ZSgpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XG5cdCAgICB9O1xuXHRcblx0ICAgIFRvb2x0aXAucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblx0ICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuXHQgICAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIHByb3RlY3RlZFxuXHRcblx0ICAgIFRvb2x0aXAucHJvdG90eXBlLmlzV2l0aENvbnRlbnQgPSBmdW5jdGlvbiBpc1dpdGhDb250ZW50KCkge1xuXHQgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb29sdGlwLnByb3RvdHlwZS5hZGRBdHRhY2htZW50Q2xhc3MgPSBmdW5jdGlvbiBhZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuXHQgICAgICAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhDTEFTU19QUkVGSVggKyAnLScgKyBhdHRhY2htZW50KTtcblx0ICAgIH07XG5cdFxuXHQgICAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VGlwRWxlbWVudCA9IGZ1bmN0aW9uIGdldFRpcEVsZW1lbnQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnRpcCA9IHRoaXMudGlwIHx8ICQodGhpcy5jb25maWcudGVtcGxhdGUpWzBdO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb29sdGlwLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gc2V0Q29udGVudCgpIHtcblx0ICAgICAgdmFyICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcblx0ICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU2VsZWN0b3IuVE9PTFRJUF9JTk5FUiksIHRoaXMuZ2V0VGl0bGUoKSk7XG5cdCAgICAgICR0aXAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUgKyAnICcgKyBDbGFzc05hbWUuU0hPVyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFRvb2x0aXAucHJvdG90eXBlLnNldEVsZW1lbnRDb250ZW50ID0gZnVuY3Rpb24gc2V0RWxlbWVudENvbnRlbnQoJGVsZW1lbnQsIGNvbnRlbnQpIHtcblx0ICAgICAgdmFyIGh0bWwgPSB0aGlzLmNvbmZpZy5odG1sO1xuXHQgICAgICBpZiAoKHR5cGVvZiBjb250ZW50ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb250ZW50KSkgPT09ICdvYmplY3QnICYmIChjb250ZW50Lm5vZGVUeXBlIHx8IGNvbnRlbnQuanF1ZXJ5KSkge1xuXHQgICAgICAgIC8vIGNvbnRlbnQgaXMgYSBET00gbm9kZSBvciBhIGpRdWVyeVxuXHQgICAgICAgIGlmIChodG1sKSB7XG5cdCAgICAgICAgICBpZiAoISQoY29udGVudCkucGFyZW50KCkuaXMoJGVsZW1lbnQpKSB7XG5cdCAgICAgICAgICAgICRlbGVtZW50LmVtcHR5KCkuYXBwZW5kKGNvbnRlbnQpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAkZWxlbWVudC50ZXh0KCQoY29udGVudCkudGV4dCgpKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgJGVsZW1lbnRbaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10oY29udGVudCk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VGl0bGUgPSBmdW5jdGlvbiBnZXRUaXRsZSgpIHtcblx0ICAgICAgdmFyIHRpdGxlID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpO1xuXHRcblx0ICAgICAgaWYgKCF0aXRsZSkge1xuXHQgICAgICAgIHRpdGxlID0gdHlwZW9mIHRoaXMuY29uZmlnLnRpdGxlID09PSAnZnVuY3Rpb24nID8gdGhpcy5jb25maWcudGl0bGUuY2FsbCh0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcudGl0bGU7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiB0aXRsZTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gcHJpdmF0ZVxuXHRcblx0ICAgIFRvb2x0aXAucHJvdG90eXBlLl9nZXRBdHRhY2htZW50ID0gZnVuY3Rpb24gX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KSB7XG5cdCAgICAgIHJldHVybiBBdHRhY2htZW50TWFwW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXTtcblx0ICAgIH07XG5cdFxuXHQgICAgVG9vbHRpcC5wcm90b3R5cGUuX3NldExpc3RlbmVycyA9IGZ1bmN0aW9uIF9zZXRMaXN0ZW5lcnMoKSB7XG5cdCAgICAgIHZhciBfdGhpczI2ID0gdGhpcztcblx0XG5cdCAgICAgIHZhciB0cmlnZ2VycyA9IHRoaXMuY29uZmlnLnRyaWdnZXIuc3BsaXQoJyAnKTtcblx0XG5cdCAgICAgIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcblx0ICAgICAgICBpZiAodHJpZ2dlciA9PT0gJ2NsaWNrJykge1xuXHQgICAgICAgICAgJChfdGhpczI2LmVsZW1lbnQpLm9uKF90aGlzMjYuY29uc3RydWN0b3IuRXZlbnQuQ0xJQ0ssIF90aGlzMjYuY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIF90aGlzMjYudG9nZ2xlKGV2ZW50KTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPT0gVHJpZ2dlci5NQU5VQUwpIHtcblx0ICAgICAgICAgIHZhciBldmVudEluID0gdHJpZ2dlciA9PT0gVHJpZ2dlci5IT1ZFUiA/IF90aGlzMjYuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VFTlRFUiA6IF90aGlzMjYuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNJTjtcblx0ICAgICAgICAgIHZhciBldmVudE91dCA9IHRyaWdnZXIgPT09IFRyaWdnZXIuSE9WRVIgPyBfdGhpczI2LmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkUgOiBfdGhpczI2LmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTT1VUO1xuXHRcblx0ICAgICAgICAgICQoX3RoaXMyNi5lbGVtZW50KS5vbihldmVudEluLCBfdGhpczI2LmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfdGhpczI2Ll9lbnRlcihldmVudCk7XG5cdCAgICAgICAgICB9KS5vbihldmVudE91dCwgX3RoaXMyNi5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICByZXR1cm4gX3RoaXMyNi5fbGVhdmUoZXZlbnQpO1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAkKF90aGlzMjYuZWxlbWVudCkuY2xvc2VzdCgnLm1vZGFsJykub24oJ2hpZGUuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICByZXR1cm4gX3RoaXMyNi5oaWRlKCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgaWYgKHRoaXMuY29uZmlnLnNlbGVjdG9yKSB7XG5cdCAgICAgICAgdGhpcy5jb25maWcgPSAkLmV4dGVuZCh7fSwgdGhpcy5jb25maWcsIHtcblx0ICAgICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxuXHQgICAgICAgICAgc2VsZWN0b3I6ICcnXG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5fZml4VGl0bGUoKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBUb29sdGlwLnByb3RvdHlwZS5fZml4VGl0bGUgPSBmdW5jdGlvbiBfZml4VGl0bGUoKSB7XG5cdCAgICAgIHZhciB0aXRsZVR5cGUgPSBfdHlwZW9mKHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKSk7XG5cdCAgICAgIGlmICh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8IHRpdGxlVHlwZSAhPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCAnJyk7XG5cdCAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnJyk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgVG9vbHRpcC5wcm90b3R5cGUuX2VudGVyID0gZnVuY3Rpb24gX2VudGVyKGV2ZW50LCBjb250ZXh0KSB7XG5cdCAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcblx0XG5cdCAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblx0XG5cdCAgICAgIGlmICghY29udGV4dCkge1xuXHQgICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcblx0ICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChldmVudCkge1xuXHQgICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXJbZXZlbnQudHlwZSA9PT0gJ2ZvY3VzaW4nID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJdID0gdHJ1ZTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCQoY29udGV4dC5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSB8fCBjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcblx0ICAgICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5TSE9XO1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuXHRcblx0ICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPVztcblx0XG5cdCAgICAgIGlmICghY29udGV4dC5jb25maWcuZGVsYXkgfHwgIWNvbnRleHQuY29uZmlnLmRlbGF5LnNob3cpIHtcblx0ICAgICAgICBjb250ZXh0LnNob3coKTtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5TSE9XKSB7XG5cdCAgICAgICAgICBjb250ZXh0LnNob3coKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sIGNvbnRleHQuY29uZmlnLmRlbGF5LnNob3cpO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb29sdGlwLnByb3RvdHlwZS5fbGVhdmUgPSBmdW5jdGlvbiBfbGVhdmUoZXZlbnQsIGNvbnRleHQpIHtcblx0ICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZO1xuXHRcblx0ICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXHRcblx0ICAgICAgaWYgKCFjb250ZXh0KSB7XG5cdCAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuXHQgICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGV2ZW50KSB7XG5cdCAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJdID0gZmFsc2U7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KTtcblx0XG5cdCAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLk9VVDtcblx0XG5cdCAgICAgIGlmICghY29udGV4dC5jb25maWcuZGVsYXkgfHwgIWNvbnRleHQuY29uZmlnLmRlbGF5LmhpZGUpIHtcblx0ICAgICAgICBjb250ZXh0LmhpZGUoKTtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcblx0ICAgICAgICAgIGNvbnRleHQuaGlkZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFRvb2x0aXAucHJvdG90eXBlLl9pc1dpdGhBY3RpdmVUcmlnZ2VyID0gZnVuY3Rpb24gX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSB7XG5cdCAgICAgIGZvciAodmFyIHRyaWdnZXIgaW4gdGhpcy5fYWN0aXZlVHJpZ2dlcikge1xuXHQgICAgICAgIGlmICh0aGlzLl9hY3RpdmVUcmlnZ2VyW3RyaWdnZXJdKSB7XG5cdCAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH07XG5cdFxuXHQgICAgVG9vbHRpcC5wcm90b3R5cGUuX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG5cdCAgICAgIGNvbmZpZyA9ICQuZXh0ZW5kKHt9LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsICQodGhpcy5lbGVtZW50KS5kYXRhKCksIGNvbmZpZyk7XG5cdFxuXHQgICAgICBpZiAoY29uZmlnLmRlbGF5ICYmIHR5cGVvZiBjb25maWcuZGVsYXkgPT09ICdudW1iZXInKSB7XG5cdCAgICAgICAgY29uZmlnLmRlbGF5ID0ge1xuXHQgICAgICAgICAgc2hvdzogY29uZmlnLmRlbGF5LFxuXHQgICAgICAgICAgaGlkZTogY29uZmlnLmRlbGF5XG5cdCAgICAgICAgfTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGNvbmZpZy50aXRsZSAmJiB0eXBlb2YgY29uZmlnLnRpdGxlID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgIGNvbmZpZy50aXRsZSA9IGNvbmZpZy50aXRsZS50b1N0cmluZygpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoY29uZmlnLmNvbnRlbnQgJiYgdHlwZW9mIGNvbmZpZy5jb250ZW50ID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgIGNvbmZpZy5jb250ZW50ID0gY29uZmlnLmNvbnRlbnQudG9TdHJpbmcoKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcblx0XG5cdCAgICAgIHJldHVybiBjb25maWc7XG5cdCAgICB9O1xuXHRcblx0ICAgIFRvb2x0aXAucHJvdG90eXBlLl9nZXREZWxlZ2F0ZUNvbmZpZyA9IGZ1bmN0aW9uIF9nZXREZWxlZ2F0ZUNvbmZpZygpIHtcblx0ICAgICAgdmFyIGNvbmZpZyA9IHt9O1xuXHRcblx0ICAgICAgaWYgKHRoaXMuY29uZmlnKSB7XG5cdCAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuY29uZmlnKSB7XG5cdCAgICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0W2tleV0gIT09IHRoaXMuY29uZmlnW2tleV0pIHtcblx0ICAgICAgICAgICAgY29uZmlnW2tleV0gPSB0aGlzLmNvbmZpZ1trZXldO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIGNvbmZpZztcblx0ICAgIH07XG5cdFxuXHQgICAgVG9vbHRpcC5wcm90b3R5cGUuX2NsZWFuVGlwQ2xhc3MgPSBmdW5jdGlvbiBfY2xlYW5UaXBDbGFzcygpIHtcblx0ICAgICAgdmFyICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcblx0ICAgICAgdmFyIHRhYkNsYXNzID0gJHRpcC5hdHRyKCdjbGFzcycpLm1hdGNoKEJTQ0xTX1BSRUZJWF9SRUdFWCk7XG5cdCAgICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgJHRpcC5yZW1vdmVDbGFzcyh0YWJDbGFzcy5qb2luKCcnKSk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgVG9vbHRpcC5wcm90b3R5cGUuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSA9IGZ1bmN0aW9uIF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSkge1xuXHQgICAgICB0aGlzLl9jbGVhblRpcENsYXNzKCk7XG5cdCAgICAgIHRoaXMuYWRkQXR0YWNobWVudENsYXNzKHRoaXMuX2dldEF0dGFjaG1lbnQoZGF0YS5wbGFjZW1lbnQpKTtcblx0ICAgIH07XG5cdFxuXHQgICAgVG9vbHRpcC5wcm90b3R5cGUuX2ZpeFRyYW5zaXRpb24gPSBmdW5jdGlvbiBfZml4VHJhbnNpdGlvbigpIHtcblx0ICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuXHQgICAgICB2YXIgaW5pdENvbmZpZ0FuaW1hdGlvbiA9IHRoaXMuY29uZmlnLmFuaW1hdGlvbjtcblx0ICAgICAgaWYgKHRpcC5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JykgIT09IG51bGwpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0ICAgICAgJCh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5GQURFKTtcblx0ICAgICAgdGhpcy5jb25maWcuYW5pbWF0aW9uID0gZmFsc2U7XG5cdCAgICAgIHRoaXMuaGlkZSgpO1xuXHQgICAgICB0aGlzLnNob3coKTtcblx0ICAgICAgdGhpcy5jb25maWcuYW5pbWF0aW9uID0gaW5pdENvbmZpZ0FuaW1hdGlvbjtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gc3RhdGljXG5cdFxuXHQgICAgVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXHQgICAgICAgIHZhciBfY29uZmlnID0gKHR5cGVvZiBjb25maWcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNvbmZpZykpID09PSAnb2JqZWN0JyAmJiBjb25maWc7XG5cdFxuXHQgICAgICAgIGlmICghZGF0YSAmJiAvZGlzcG9zZXxoaWRlLy50ZXN0KGNvbmZpZykpIHtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICghZGF0YSkge1xuXHQgICAgICAgICAgZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIF9jb25maWcpO1xuXHQgICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJyArIGNvbmZpZyArICdcIicpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgZGF0YVtjb25maWddKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKFRvb2x0aXAsIG51bGwsIFt7XG5cdCAgICAgIGtleTogJ1ZFUlNJT04nLFxuXHQgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICByZXR1cm4gVkVSU0lPTjtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdEZWZhdWx0Jyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnTkFNRScsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIHJldHVybiBOQU1FO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ0RBVEFfS0VZJyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIERBVEFfS0VZO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ0V2ZW50Jyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIEV2ZW50O1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ0VWRU5UX0tFWScsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIHJldHVybiBFVkVOVF9LRVk7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnRGVmYXVsdFR5cGUnLFxuXHQgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGU7XG5cdCAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gVG9vbHRpcDtcblx0ICB9KCk7XG5cdFxuXHQgIC8qKlxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqIGpRdWVyeVxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqL1xuXHRcblx0ICAkLmZuW05BTUVdID0gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlO1xuXHQgICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBUb29sdGlwO1xuXHQgICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG5cdCAgICByZXR1cm4gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlO1xuXHQgIH07XG5cdFxuXHQgIHJldHVybiBUb29sdGlwO1xuXHR9KGpRdWVyeSk7XG5cdFxuXHQvKipcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICogQm9vdHN0cmFwICh2NC4wLjAtYmV0YSk6IHBvcG92ZXIuanNcblx0ICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICovXG5cdFxuXHR2YXIgUG9wb3ZlciA9IGZ1bmN0aW9uICgkKSB7XG5cdFxuXHQgIC8qKlxuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqIENvbnN0YW50c1xuXHQgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAqL1xuXHRcblx0ICB2YXIgTkFNRSA9ICdwb3BvdmVyJztcblx0ICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1iZXRhJztcblx0ICB2YXIgREFUQV9LRVkgPSAnYnMucG9wb3Zlcic7XG5cdCAgdmFyIEVWRU5UX0tFWSA9ICcuJyArIERBVEFfS0VZO1xuXHQgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuXHQgIHZhciBDTEFTU19QUkVGSVggPSAnYnMtcG9wb3Zlcic7XG5cdCAgdmFyIEJTQ0xTX1BSRUZJWF9SRUdFWCA9IG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBDTEFTU19QUkVGSVggKyAnXFxcXFMrJywgJ2cnKTtcblx0XG5cdCAgdmFyIERlZmF1bHQgPSAkLmV4dGVuZCh7fSwgVG9vbHRpcC5EZWZhdWx0LCB7XG5cdCAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG5cdCAgICB0cmlnZ2VyOiAnY2xpY2snLFxuXHQgICAgY29udGVudDogJycsXG5cdCAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgKyAnPGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPicgKyAnPGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PjwvZGl2Pidcblx0ICB9KTtcblx0XG5cdCAgdmFyIERlZmF1bHRUeXBlID0gJC5leHRlbmQoe30sIFRvb2x0aXAuRGVmYXVsdFR5cGUsIHtcblx0ICAgIGNvbnRlbnQ6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJ1xuXHQgIH0pO1xuXHRcblx0ICB2YXIgQ2xhc3NOYW1lID0ge1xuXHQgICAgRkFERTogJ2ZhZGUnLFxuXHQgICAgU0hPVzogJ3Nob3cnXG5cdCAgfTtcblx0XG5cdCAgdmFyIFNlbGVjdG9yID0ge1xuXHQgICAgVElUTEU6ICcucG9wb3Zlci1oZWFkZXInLFxuXHQgICAgQ09OVEVOVDogJy5wb3BvdmVyLWJvZHknXG5cdCAgfTtcblx0XG5cdCAgdmFyIEV2ZW50ID0ge1xuXHQgICAgSElERTogJ2hpZGUnICsgRVZFTlRfS0VZLFxuXHQgICAgSElEREVOOiAnaGlkZGVuJyArIEVWRU5UX0tFWSxcblx0ICAgIFNIT1c6ICdzaG93JyArIEVWRU5UX0tFWSxcblx0ICAgIFNIT1dOOiAnc2hvd24nICsgRVZFTlRfS0VZLFxuXHQgICAgSU5TRVJURUQ6ICdpbnNlcnRlZCcgKyBFVkVOVF9LRVksXG5cdCAgICBDTElDSzogJ2NsaWNrJyArIEVWRU5UX0tFWSxcblx0ICAgIEZPQ1VTSU46ICdmb2N1c2luJyArIEVWRU5UX0tFWSxcblx0ICAgIEZPQ1VTT1VUOiAnZm9jdXNvdXQnICsgRVZFTlRfS0VZLFxuXHQgICAgTU9VU0VFTlRFUjogJ21vdXNlZW50ZXInICsgRVZFTlRfS0VZLFxuXHQgICAgTU9VU0VMRUFWRTogJ21vdXNlbGVhdmUnICsgRVZFTlRfS0VZXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgICAqIENsYXNzIERlZmluaXRpb25cblx0ICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgICAgICovXG5cdFxuXHQgIH07XG5cdCAgdmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoX1Rvb2x0aXApIHtcblx0ICAgIF9pbmhlcml0cyhQb3BvdmVyLCBfVG9vbHRpcCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gUG9wb3ZlcigpIHtcblx0ICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcG92ZXIpO1xuXHRcblx0ICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Ub29sdGlwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIG92ZXJyaWRlc1xuXHRcblx0ICAgIFBvcG92ZXIucHJvdG90eXBlLmlzV2l0aENvbnRlbnQgPSBmdW5jdGlvbiBpc1dpdGhDb250ZW50KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuX2dldENvbnRlbnQoKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUG9wb3Zlci5wcm90b3R5cGUuYWRkQXR0YWNobWVudENsYXNzID0gZnVuY3Rpb24gYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpIHtcblx0ICAgICAgJCh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoQ0xBU1NfUFJFRklYICsgJy0nICsgYXR0YWNobWVudCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFBvcG92ZXIucHJvdG90eXBlLmdldFRpcEVsZW1lbnQgPSBmdW5jdGlvbiBnZXRUaXBFbGVtZW50KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXTtcblx0ICAgIH07XG5cdFxuXHQgICAgUG9wb3Zlci5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uIHNldENvbnRlbnQoKSB7XG5cdCAgICAgIHZhciAkdGlwID0gJCh0aGlzLmdldFRpcEVsZW1lbnQoKSk7XG5cdFxuXHQgICAgICAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG5cdCAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLlRJVExFKSwgdGhpcy5nZXRUaXRsZSgpKTtcblx0ICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU2VsZWN0b3IuQ09OVEVOVCksIHRoaXMuX2dldENvbnRlbnQoKSk7XG5cdFxuXHQgICAgICAkdGlwLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5GQURFICsgJyAnICsgQ2xhc3NOYW1lLlNIT1cpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBwcml2YXRlXG5cdFxuXHQgICAgUG9wb3Zlci5wcm90b3R5cGUuX2dldENvbnRlbnQgPSBmdW5jdGlvbiBfZ2V0Q29udGVudCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpIHx8ICh0eXBlb2YgdGhpcy5jb25maWcuY29udGVudCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuY29uZmlnLmNvbnRlbnQuY2FsbCh0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcuY29udGVudCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFBvcG92ZXIucHJvdG90eXBlLl9jbGVhblRpcENsYXNzID0gZnVuY3Rpb24gX2NsZWFuVGlwQ2xhc3MoKSB7XG5cdCAgICAgIHZhciAkdGlwID0gJCh0aGlzLmdldFRpcEVsZW1lbnQoKSk7XG5cdCAgICAgIHZhciB0YWJDbGFzcyA9ICR0aXAuYXR0cignY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpO1xuXHQgICAgICBpZiAodGFiQ2xhc3MgIT09IG51bGwgJiYgdGFiQ2xhc3MubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIHN0YXRpY1xuXHRcblx0ICAgIFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKTtcblx0ICAgICAgICB2YXIgX2NvbmZpZyA9ICh0eXBlb2YgY29uZmlnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb25maWcpKSA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsO1xuXHRcblx0ICAgICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChjb25maWcpKSB7XG5cdCAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoIWRhdGEpIHtcblx0ICAgICAgICAgIGRhdGEgPSBuZXcgUG9wb3Zlcih0aGlzLCBfY29uZmlnKTtcblx0ICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBjb25maWcgKyAnXCInKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhQb3BvdmVyLCBudWxsLCBbe1xuXHQgICAgICBrZXk6ICdWRVJTSU9OJyxcblx0XG5cdFxuXHQgICAgICAvLyBnZXR0ZXJzXG5cdFxuXHQgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICByZXR1cm4gVkVSU0lPTjtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdEZWZhdWx0Jyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnTkFNRScsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIHJldHVybiBOQU1FO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ0RBVEFfS0VZJyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIERBVEFfS0VZO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ0V2ZW50Jyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIEV2ZW50O1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ0VWRU5UX0tFWScsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIHJldHVybiBFVkVOVF9LRVk7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnRGVmYXVsdFR5cGUnLFxuXHQgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGU7XG5cdCAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gUG9wb3Zlcjtcblx0ICB9KFRvb2x0aXApO1xuXHRcblx0ICAvKipcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKiBqUXVlcnlcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0XG5cdCAgJC5mbltOQU1FXSA9IFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZTtcblx0ICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gUG9wb3Zlcjtcblx0ICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuXHQgICAgcmV0dXJuIFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZTtcblx0ICB9O1xuXHRcblx0ICByZXR1cm4gUG9wb3Zlcjtcblx0fShqUXVlcnkpO1xuXHRcblx0XG5cdH0pKCk7XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHttb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcInR1cmJvbGlua3NcIl0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSgpKSkpXG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHttb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIiRcIl0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSgpKSkpXG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOy8qXG5cdFR1cmJvbGlua3MgNS4wLjNcblx0Q29weXJpZ2h0IMKpIDIwMTcgQmFzZWNhbXAsIExMQ1xuXHQgKi9cblx0KGZ1bmN0aW9uKCl7KGZ1bmN0aW9uKCl7KGZ1bmN0aW9uKCl7dGhpcy5UdXJib2xpbmtzPXtzdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9d2luZG93Lmhpc3RvcnkucHVzaFN0YXRlJiZudWxsIT13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZudWxsIT13aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcn0oKSx2aXNpdDpmdW5jdGlvbihlLHIpe3JldHVybiB0LmNvbnRyb2xsZXIudmlzaXQoZSxyKX0sY2xlYXJDYWNoZTpmdW5jdGlvbigpe3JldHVybiB0LmNvbnRyb2xsZXIuY2xlYXJDYWNoZSgpfX19KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzKTt2YXIgdD10aGlzLlR1cmJvbGlua3M7KGZ1bmN0aW9uKCl7KGZ1bmN0aW9uKCl7dmFyIGUscixuPVtdLnNsaWNlO3QuY29weU9iamVjdD1mdW5jdGlvbih0KXt2YXIgZSxyLG47cj17fTtmb3IoZSBpbiB0KW49dFtlXSxyW2VdPW47cmV0dXJuIHJ9LHQuY2xvc2VzdD1mdW5jdGlvbih0LHIpe3JldHVybiBlLmNhbGwodCxyKX0sZT1mdW5jdGlvbigpe3ZhciB0LGU7cmV0dXJuIHQ9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LG51bGwhPShlPXQuY2xvc2VzdCk/ZTpmdW5jdGlvbih0KXt2YXIgZTtmb3IoZT10aGlzO2U7KXtpZihlLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUmJnIuY2FsbChlLHQpKXJldHVybiBlO2U9ZS5wYXJlbnROb2RlfX19KCksdC5kZWZlcj1mdW5jdGlvbih0KXtyZXR1cm4gc2V0VGltZW91dCh0LDEpfSx0LnRocm90dGxlPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBlPW51bGwsZnVuY3Rpb24oKXt2YXIgcjtyZXR1cm4gcj0xPD1hcmd1bWVudHMubGVuZ3RoP24uY2FsbChhcmd1bWVudHMsMCk6W10sbnVsbCE9ZT9lOmU9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKG4pe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlPW51bGwsdC5hcHBseShuLHIpfX0odGhpcykpfX0sdC5kaXNwYXRjaD1mdW5jdGlvbih0LGUpe3ZhciByLG4sbyxpLHM7cmV0dXJuIGk9bnVsbCE9ZT9lOnt9LHM9aS50YXJnZXQscj1pLmNhbmNlbGFibGUsbj1pLmRhdGEsbz1kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50c1wiKSxvLmluaXRFdmVudCh0LCEwLHI9PT0hMCksby5kYXRhPW51bGwhPW4/bjp7fSwobnVsbCE9cz9zOmRvY3VtZW50KS5kaXNwYXRjaEV2ZW50KG8pLG99LHQubWF0Y2g9ZnVuY3Rpb24odCxlKXtyZXR1cm4gci5jYWxsKHQsZSl9LHI9ZnVuY3Rpb24oKXt2YXIgdCxlLHIsbjtyZXR1cm4gdD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsbnVsbCE9KGU9bnVsbCE9KHI9bnVsbCE9KG49dC5tYXRjaGVzU2VsZWN0b3IpP246dC53ZWJraXRNYXRjaGVzU2VsZWN0b3IpP3I6dC5tc01hdGNoZXNTZWxlY3Rvcik/ZTp0Lm1vek1hdGNoZXNTZWxlY3Rvcn0oKSx0LnV1aWQ9ZnVuY3Rpb24oKXt2YXIgdCxlLHI7Zm9yKHI9XCJcIix0PWU9MTszNj49ZTt0PSsrZSlyKz05PT09dHx8MTQ9PT10fHwxOT09PXR8fDI0PT09dD9cIi1cIjoxNT09PXQ/XCI0XCI6MjA9PT10PyhNYXRoLmZsb29yKDQqTWF0aC5yYW5kb20oKSkrOCkudG9TdHJpbmcoMTYpOk1hdGguZmxvb3IoMTUqTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMTYpO3JldHVybiByfX0pLmNhbGwodGhpcyksZnVuY3Rpb24oKXt0LkxvY2F0aW9uPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt2YXIgZSxyO251bGw9PXQmJih0PVwiXCIpLHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIiksci5ocmVmPXQudG9TdHJpbmcoKSx0aGlzLmFic29sdXRlVVJMPXIuaHJlZixlPXIuaGFzaC5sZW5ndGgsMj5lP3RoaXMucmVxdWVzdFVSTD10aGlzLmFic29sdXRlVVJMOih0aGlzLnJlcXVlc3RVUkw9dGhpcy5hYnNvbHV0ZVVSTC5zbGljZSgwLC1lKSx0aGlzLmFuY2hvcj1yLmhhc2guc2xpY2UoMSkpfXZhciBlLHIsbixvO3JldHVybiB0LndyYXA9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiB0aGlzP3Q6bmV3IHRoaXModCl9LHQucHJvdG90eXBlLmdldE9yaWdpbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFic29sdXRlVVJMLnNwbGl0KFwiL1wiLDMpLmpvaW4oXCIvXCIpfSx0LnByb3RvdHlwZS5nZXRQYXRoPWZ1bmN0aW9uKCl7dmFyIHQsZTtyZXR1cm4gbnVsbCE9KHQ9bnVsbCE9KGU9dGhpcy5hYnNvbHV0ZVVSTC5tYXRjaCgvXFwvXFwvW15cXC9dKihcXC9bXj87XSopLykpP2VbMV06dm9pZCAwKT90OlwiL1wifSx0LnByb3RvdHlwZS5nZXRQYXRoQ29tcG9uZW50cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFBhdGgoKS5zcGxpdChcIi9cIikuc2xpY2UoMSl9LHQucHJvdG90eXBlLmdldExhc3RQYXRoQ29tcG9uZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0UGF0aENvbXBvbmVudHMoKS5zbGljZSgtMSlbMF19LHQucHJvdG90eXBlLmdldEV4dGVuc2lvbj1mdW5jdGlvbigpe3ZhciB0LGU7cmV0dXJuIG51bGwhPSh0PW51bGwhPShlPXRoaXMuZ2V0TGFzdFBhdGhDb21wb25lbnQoKS5tYXRjaCgvXFwuW14uXSokLykpP2VbMF06dm9pZCAwKT90OlwiXCJ9LHQucHJvdG90eXBlLmlzSFRNTD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEV4dGVuc2lvbigpLm1hdGNoKC9eKD86fFxcLig/Omh0bXxodG1sfHhodG1sKSkkLyl9LHQucHJvdG90eXBlLmlzUHJlZml4ZWRCeT1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gZT1yKHQpLHRoaXMuaXNFcXVhbFRvKHQpfHxvKHRoaXMuYWJzb2x1dGVVUkwsZSl9LHQucHJvdG90eXBlLmlzRXF1YWxUbz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5hYnNvbHV0ZVVSTD09PShudWxsIT10P3QuYWJzb2x1dGVVUkw6dm9pZCAwKX0sdC5wcm90b3R5cGUudG9DYWNoZUtleT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcXVlc3RVUkx9LHQucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFic29sdXRlVVJMfSx0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFic29sdXRlVVJMfSx0LnByb3RvdHlwZS52YWx1ZU9mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWJzb2x1dGVVUkx9LHI9ZnVuY3Rpb24odCl7cmV0dXJuIGUodC5nZXRPcmlnaW4oKSt0LmdldFBhdGgoKSl9LGU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odCxcIi9cIik/dDp0K1wiL1wifSxvPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuc2xpY2UoMCxlLmxlbmd0aCk9PT1lfSxuPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuc2xpY2UoLWUubGVuZ3RoKT09PWV9LHR9KCl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbih0LGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KGUsYXJndW1lbnRzKX19O3QuSHR0cFJlcXVlc3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiByKHIsbixvKXt0aGlzLmRlbGVnYXRlPXIsdGhpcy5yZXF1ZXN0Q2FuY2VsZWQ9ZSh0aGlzLnJlcXVlc3RDYW5jZWxlZCx0aGlzKSx0aGlzLnJlcXVlc3RUaW1lZE91dD1lKHRoaXMucmVxdWVzdFRpbWVkT3V0LHRoaXMpLHRoaXMucmVxdWVzdEZhaWxlZD1lKHRoaXMucmVxdWVzdEZhaWxlZCx0aGlzKSx0aGlzLnJlcXVlc3RMb2FkZWQ9ZSh0aGlzLnJlcXVlc3RMb2FkZWQsdGhpcyksdGhpcy5yZXF1ZXN0UHJvZ3Jlc3NlZD1lKHRoaXMucmVxdWVzdFByb2dyZXNzZWQsdGhpcyksdGhpcy51cmw9dC5Mb2NhdGlvbi53cmFwKG4pLnJlcXVlc3RVUkwsdGhpcy5yZWZlcnJlcj10LkxvY2F0aW9uLndyYXAobykuYWJzb2x1dGVVUkwsdGhpcy5jcmVhdGVYSFIoKX1yZXR1cm4gci5ORVRXT1JLX0ZBSUxVUkU9MCxyLlRJTUVPVVRfRkFJTFVSRT0tMSxyLnRpbWVvdXQ9NjAsci5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbigpe3ZhciB0O3JldHVybiB0aGlzLnhociYmIXRoaXMuc2VudD8odGhpcy5ub3RpZnlBcHBsaWNhdGlvbkJlZm9yZVJlcXVlc3RTdGFydCgpLHRoaXMuc2V0UHJvZ3Jlc3MoMCksdGhpcy54aHIuc2VuZCgpLHRoaXMuc2VudD0hMCxcImZ1bmN0aW9uXCI9PXR5cGVvZih0PXRoaXMuZGVsZWdhdGUpLnJlcXVlc3RTdGFydGVkP3QucmVxdWVzdFN0YXJ0ZWQoKTp2b2lkIDApOnZvaWQgMH0sci5wcm90b3R5cGUuY2FuY2VsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMueGhyJiZ0aGlzLnNlbnQ/dGhpcy54aHIuYWJvcnQoKTp2b2lkIDB9LHIucHJvdG90eXBlLnJlcXVlc3RQcm9ncmVzc2VkPWZ1bmN0aW9uKHQpe3JldHVybiB0Lmxlbmd0aENvbXB1dGFibGU/dGhpcy5zZXRQcm9ncmVzcyh0LmxvYWRlZC90LnRvdGFsKTp2b2lkIDB9LHIucHJvdG90eXBlLnJlcXVlc3RMb2FkZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbmRSZXF1ZXN0KGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3ZhciBlO3JldHVybiAyMDA8PShlPXQueGhyLnN0YXR1cykmJjMwMD5lP3QuZGVsZWdhdGUucmVxdWVzdENvbXBsZXRlZFdpdGhSZXNwb25zZSh0Lnhoci5yZXNwb25zZVRleHQsdC54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJUdXJib2xpbmtzLUxvY2F0aW9uXCIpKToodC5mYWlsZWQ9ITAsdC5kZWxlZ2F0ZS5yZXF1ZXN0RmFpbGVkV2l0aFN0YXR1c0NvZGUodC54aHIuc3RhdHVzLHQueGhyLnJlc3BvbnNlVGV4dCkpfX0odGhpcykpfSxyLnByb3RvdHlwZS5yZXF1ZXN0RmFpbGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5kUmVxdWVzdChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdC5mYWlsZWQ9ITAsdC5kZWxlZ2F0ZS5yZXF1ZXN0RmFpbGVkV2l0aFN0YXR1c0NvZGUodC5jb25zdHJ1Y3Rvci5ORVRXT1JLX0ZBSUxVUkUpfX0odGhpcykpfSxyLnByb3RvdHlwZS5yZXF1ZXN0VGltZWRPdXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbmRSZXF1ZXN0KGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmZhaWxlZD0hMCx0LmRlbGVnYXRlLnJlcXVlc3RGYWlsZWRXaXRoU3RhdHVzQ29kZSh0LmNvbnN0cnVjdG9yLlRJTUVPVVRfRkFJTFVSRSl9fSh0aGlzKSl9LHIucHJvdG90eXBlLnJlcXVlc3RDYW5jZWxlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuZFJlcXVlc3QoKX0sci5wcm90b3R5cGUubm90aWZ5QXBwbGljYXRpb25CZWZvcmVSZXF1ZXN0U3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXNwYXRjaChcInR1cmJvbGlua3M6cmVxdWVzdC1zdGFydFwiLHtkYXRhOnt1cmw6dGhpcy51cmwseGhyOnRoaXMueGhyfX0pfSxyLnByb3RvdHlwZS5ub3RpZnlBcHBsaWNhdGlvbkFmdGVyUmVxdWVzdEVuZD1mdW5jdGlvbigpe3JldHVybiB0LmRpc3BhdGNoKFwidHVyYm9saW5rczpyZXF1ZXN0LWVuZFwiLHtkYXRhOnt1cmw6dGhpcy51cmwseGhyOnRoaXMueGhyfX0pfSxyLnByb3RvdHlwZS5jcmVhdGVYSFI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54aHI9bmV3IFhNTEh0dHBSZXF1ZXN0LHRoaXMueGhyLm9wZW4oXCJHRVRcIix0aGlzLnVybCwhMCksdGhpcy54aHIudGltZW91dD0xZTMqdGhpcy5jb25zdHJ1Y3Rvci50aW1lb3V0LHRoaXMueGhyLnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIixcInRleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sXCIpLHRoaXMueGhyLnNldFJlcXVlc3RIZWFkZXIoXCJUdXJib2xpbmtzLVJlZmVycmVyXCIsdGhpcy5yZWZlcnJlciksdGhpcy54aHIub25wcm9ncmVzcz10aGlzLnJlcXVlc3RQcm9ncmVzc2VkLHRoaXMueGhyLm9ubG9hZD10aGlzLnJlcXVlc3RMb2FkZWQsdGhpcy54aHIub25lcnJvcj10aGlzLnJlcXVlc3RGYWlsZWQsdGhpcy54aHIub250aW1lb3V0PXRoaXMucmVxdWVzdFRpbWVkT3V0LHRoaXMueGhyLm9uYWJvcnQ9dGhpcy5yZXF1ZXN0Q2FuY2VsZWR9LHIucHJvdG90eXBlLmVuZFJlcXVlc3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMueGhyPyh0aGlzLm5vdGlmeUFwcGxpY2F0aW9uQWZ0ZXJSZXF1ZXN0RW5kKCksbnVsbCE9dCYmdC5jYWxsKHRoaXMpLHRoaXMuZGVzdHJveSgpKTp2b2lkIDB9LHIucHJvdG90eXBlLnNldFByb2dyZXNzPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiB0aGlzLnByb2dyZXNzPXQsXCJmdW5jdGlvblwiPT10eXBlb2YoZT10aGlzLmRlbGVnYXRlKS5yZXF1ZXN0UHJvZ3Jlc3NlZD9lLnJlcXVlc3RQcm9ncmVzc2VkKHRoaXMucHJvZ3Jlc3MpOnZvaWQgMH0sci5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciB0O3JldHVybiB0aGlzLnNldFByb2dyZXNzKDEpLFwiZnVuY3Rpb25cIj09dHlwZW9mKHQ9dGhpcy5kZWxlZ2F0ZSkucmVxdWVzdEZpbmlzaGVkJiZ0LnJlcXVlc3RGaW5pc2hlZCgpLHRoaXMuZGVsZWdhdGU9bnVsbCx0aGlzLnhocj1udWxsfSxyfSgpfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseShlLGFyZ3VtZW50cyl9fTt0LlByb2dyZXNzQmFyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMudHJpY2tsZT1lKHRoaXMudHJpY2tsZSx0aGlzKSx0aGlzLnN0eWxlc2hlZXRFbGVtZW50PXRoaXMuY3JlYXRlU3R5bGVzaGVldEVsZW1lbnQoKSx0aGlzLnByb2dyZXNzRWxlbWVudD10aGlzLmNyZWF0ZVByb2dyZXNzRWxlbWVudCgpfXZhciByO3JldHVybiByPTMwMCx0LmRlZmF1bHRDU1M9XCIudHVyYm9saW5rcy1wcm9ncmVzcy1iYXIge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgaGVpZ2h0OiAzcHg7XFxuICBiYWNrZ3JvdW5kOiAjMDA3NmZmO1xcbiAgei1pbmRleDogOTk5OTtcXG4gIHRyYW5zaXRpb246IHdpZHRoIFwiK3IrXCJtcyBlYXNlLW91dCwgb3BhY2l0eSBcIityLzIrXCJtcyBcIityLzIrXCJtcyBlYXNlLWluO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXG59XCIsdC5wcm90b3R5cGUuc2hvdz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZpc2libGU/dm9pZCAwOih0aGlzLnZpc2libGU9ITAsdGhpcy5pbnN0YWxsU3R5bGVzaGVldEVsZW1lbnQoKSx0aGlzLmluc3RhbGxQcm9ncmVzc0VsZW1lbnQoKSx0aGlzLnN0YXJ0VHJpY2tsaW5nKCkpfSx0LnByb3RvdHlwZS5oaWRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlzaWJsZSYmIXRoaXMuaGlkaW5nPyh0aGlzLmhpZGluZz0hMCx0aGlzLmZhZGVQcm9ncmVzc0VsZW1lbnQoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQudW5pbnN0YWxsUHJvZ3Jlc3NFbGVtZW50KCksdC5zdG9wVHJpY2tsaW5nKCksdC52aXNpYmxlPSExLHQuaGlkaW5nPSExfX0odGhpcykpKTp2b2lkIDB9LHQucHJvdG90eXBlLnNldFZhbHVlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnZhbHVlPXQsdGhpcy5yZWZyZXNoKCl9LHQucHJvdG90eXBlLmluc3RhbGxTdHlsZXNoZWV0RWxlbWVudD1mdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5oZWFkLmluc2VydEJlZm9yZSh0aGlzLnN0eWxlc2hlZXRFbGVtZW50LGRvY3VtZW50LmhlYWQuZmlyc3RDaGlsZCl9LHQucHJvdG90eXBlLmluc3RhbGxQcm9ncmVzc0VsZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9ncmVzc0VsZW1lbnQuc3R5bGUud2lkdGg9MCx0aGlzLnByb2dyZXNzRWxlbWVudC5zdHlsZS5vcGFjaXR5PTEsZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lmluc2VydEJlZm9yZSh0aGlzLnByb2dyZXNzRWxlbWVudCxkb2N1bWVudC5ib2R5KSx0aGlzLnJlZnJlc2goKX0sdC5wcm90b3R5cGUuZmFkZVByb2dyZXNzRWxlbWVudD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5wcm9ncmVzc0VsZW1lbnQuc3R5bGUub3BhY2l0eT0wLHNldFRpbWVvdXQodCwxLjUqcil9LHQucHJvdG90eXBlLnVuaW5zdGFsbFByb2dyZXNzRWxlbWVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByb2dyZXNzRWxlbWVudC5wYXJlbnROb2RlP2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLnByb2dyZXNzRWxlbWVudCk6dm9pZCAwfSx0LnByb3RvdHlwZS5zdGFydFRyaWNrbGluZz1mdW5jdGlvbigpe3JldHVybiBudWxsIT10aGlzLnRyaWNrbGVJbnRlcnZhbD90aGlzLnRyaWNrbGVJbnRlcnZhbDp0aGlzLnRyaWNrbGVJbnRlcnZhbD1zZXRJbnRlcnZhbCh0aGlzLnRyaWNrbGUscil9LHQucHJvdG90eXBlLnN0b3BUcmlja2xpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gY2xlYXJJbnRlcnZhbCh0aGlzLnRyaWNrbGVJbnRlcnZhbCksdGhpcy50cmlja2xlSW50ZXJ2YWw9bnVsbH0sdC5wcm90b3R5cGUudHJpY2tsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNldFZhbHVlKHRoaXMudmFsdWUrTWF0aC5yYW5kb20oKS8xMDApfSx0LnByb3RvdHlwZS5yZWZyZXNoPWZ1bmN0aW9uKCl7cmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdC5wcm9ncmVzc0VsZW1lbnQuc3R5bGUud2lkdGg9MTArOTAqdC52YWx1ZStcIiVcIn19KHRoaXMpKX0sdC5wcm90b3R5cGUuY3JlYXRlU3R5bGVzaGVldEVsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiksdC50eXBlPVwidGV4dC9jc3NcIix0LnRleHRDb250ZW50PXRoaXMuY29uc3RydWN0b3IuZGVmYXVsdENTUyx0fSx0LnByb3RvdHlwZS5jcmVhdGVQcm9ncmVzc0VsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHQuY2xhc3NOYW1lPVwidHVyYm9saW5rcy1wcm9ncmVzcy1iYXJcIix0fSx0fSgpfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseShlLGFyZ3VtZW50cyl9fTt0LkJyb3dzZXJBZGFwdGVyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihyKXt0aGlzLmNvbnRyb2xsZXI9cix0aGlzLnNob3dQcm9ncmVzc0Jhcj1lKHRoaXMuc2hvd1Byb2dyZXNzQmFyLHRoaXMpLHRoaXMucHJvZ3Jlc3NCYXI9bmV3IHQuUHJvZ3Jlc3NCYXJ9dmFyIG4sbyxpLHM7cmV0dXJuIHM9dC5IdHRwUmVxdWVzdCxuPXMuTkVUV09SS19GQUlMVVJFLGk9cy5USU1FT1VUX0ZBSUxVUkUsbz01MDAsci5wcm90b3R5cGUudmlzaXRQcm9wb3NlZFRvTG9jYXRpb25XaXRoQWN0aW9uPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuY29udHJvbGxlci5zdGFydFZpc2l0VG9Mb2NhdGlvbldpdGhBY3Rpb24odCxlKX0sci5wcm90b3R5cGUudmlzaXRTdGFydGVkPWZ1bmN0aW9uKHQpe3JldHVybiB0Lmlzc3VlUmVxdWVzdCgpLHQuY2hhbmdlSGlzdG9yeSgpLHQubG9hZENhY2hlZFNuYXBzaG90KCl9LHIucHJvdG90eXBlLnZpc2l0UmVxdWVzdFN0YXJ0ZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMucHJvZ3Jlc3NCYXIuc2V0VmFsdWUoMCksdC5oYXNDYWNoZWRTbmFwc2hvdCgpfHxcInJlc3RvcmVcIiE9PXQuYWN0aW9uP3RoaXMuc2hvd1Byb2dyZXNzQmFyQWZ0ZXJEZWxheSgpOnRoaXMuc2hvd1Byb2dyZXNzQmFyKCl9LHIucHJvdG90eXBlLnZpc2l0UmVxdWVzdFByb2dyZXNzZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMucHJvZ3Jlc3NCYXIuc2V0VmFsdWUodC5wcm9ncmVzcyl9LHIucHJvdG90eXBlLnZpc2l0UmVxdWVzdENvbXBsZXRlZD1mdW5jdGlvbih0KXtyZXR1cm4gdC5sb2FkUmVzcG9uc2UoKX0sci5wcm90b3R5cGUudmlzaXRSZXF1ZXN0RmFpbGVkV2l0aFN0YXR1c0NvZGU9ZnVuY3Rpb24odCxlKXtzd2l0Y2goZSl7Y2FzZSBuOmNhc2UgaTpyZXR1cm4gdGhpcy5yZWxvYWQoKTtkZWZhdWx0OnJldHVybiB0LmxvYWRSZXNwb25zZSgpfX0sci5wcm90b3R5cGUudmlzaXRSZXF1ZXN0RmluaXNoZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuaGlkZVByb2dyZXNzQmFyKCl9LHIucHJvdG90eXBlLnZpc2l0Q29tcGxldGVkPWZ1bmN0aW9uKHQpe3JldHVybiB0LmZvbGxvd1JlZGlyZWN0KCl9LHIucHJvdG90eXBlLnBhZ2VJbnZhbGlkYXRlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlbG9hZCgpfSxyLnByb3RvdHlwZS5zaG93UHJvZ3Jlc3NCYXJBZnRlckRlbGF5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvZ3Jlc3NCYXJUaW1lb3V0PXNldFRpbWVvdXQodGhpcy5zaG93UHJvZ3Jlc3NCYXIsbyl9LHIucHJvdG90eXBlLnNob3dQcm9ncmVzc0Jhcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByb2dyZXNzQmFyLnNob3coKX0sci5wcm90b3R5cGUuaGlkZVByb2dyZXNzQmFyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvZ3Jlc3NCYXIuaGlkZSgpLGNsZWFyVGltZW91dCh0aGlzLnByb2dyZXNzQmFyVGltZW91dCl9LHIucHJvdG90eXBlLnJlbG9hZD1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCl9LHJ9KCl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbih0LGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KGUsYXJndW1lbnRzKX19O3QuSGlzdG9yeT1mdW5jdGlvbigpe2Z1bmN0aW9uIHIodCl7dGhpcy5kZWxlZ2F0ZT10LHRoaXMub25QYWdlTG9hZD1lKHRoaXMub25QYWdlTG9hZCx0aGlzKSx0aGlzLm9uUG9wU3RhdGU9ZSh0aGlzLm9uUG9wU3RhdGUsdGhpcyl9cmV0dXJuIHIucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhcnRlZD92b2lkIDA6KGFkZEV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLHRoaXMub25Qb3BTdGF0ZSwhMSksYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIix0aGlzLm9uUGFnZUxvYWQsITEpLHRoaXMuc3RhcnRlZD0hMCl9LHIucHJvdG90eXBlLnN0b3A9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGFydGVkPyhyZW1vdmVFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIix0aGlzLm9uUG9wU3RhdGUsITEpLHJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcy5vblBhZ2VMb2FkLCExKSx0aGlzLnN0YXJ0ZWQ9ITEpOnZvaWQgMH0sci5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHIpe3JldHVybiBlPXQuTG9jYXRpb24ud3JhcChlKSx0aGlzLnVwZGF0ZShcInB1c2hcIixlLHIpfSxyLnByb3RvdHlwZS5yZXBsYWNlPWZ1bmN0aW9uKGUscil7cmV0dXJuIGU9dC5Mb2NhdGlvbi53cmFwKGUpLHRoaXMudXBkYXRlKFwicmVwbGFjZVwiLGUscil9LHIucHJvdG90eXBlLm9uUG9wU3RhdGU9ZnVuY3Rpb24oZSl7dmFyIHIsbixvLGk7cmV0dXJuIHRoaXMuc2hvdWxkSGFuZGxlUG9wU3RhdGUoKSYmKGk9bnVsbCE9KG49ZS5zdGF0ZSk/bi50dXJib2xpbmtzOnZvaWQgMCk/KHI9dC5Mb2NhdGlvbi53cmFwKHdpbmRvdy5sb2NhdGlvbiksbz1pLnJlc3RvcmF0aW9uSWRlbnRpZmllcix0aGlzLmRlbGVnYXRlLmhpc3RvcnlQb3BwZWRUb0xvY2F0aW9uV2l0aFJlc3RvcmF0aW9uSWRlbnRpZmllcihyLG8pKTp2b2lkIDB9LHIucHJvdG90eXBlLm9uUGFnZUxvYWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHQuZGVmZXIoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQucGFnZUxvYWRlZD0hMH19KHRoaXMpKX0sci5wcm90b3R5cGUuc2hvdWxkSGFuZGxlUG9wU3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYWdlSXNMb2FkZWQoKX0sci5wcm90b3R5cGUucGFnZUlzTG9hZGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFnZUxvYWRlZHx8XCJjb21wbGV0ZVwiPT09ZG9jdW1lbnQucmVhZHlTdGF0ZX0sci5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbjtyZXR1cm4gbj17dHVyYm9saW5rczp7cmVzdG9yYXRpb25JZGVudGlmaWVyOnJ9fSxoaXN0b3J5W3QrXCJTdGF0ZVwiXShuLG51bGwsZSl9LHJ9KCl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXt0LlNuYXBzaG90PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt2YXIgZSxyO3I9dC5oZWFkLGU9dC5ib2R5LHRoaXMuaGVhZD1udWxsIT1yP3I6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImhlYWRcIiksdGhpcy5ib2R5PW51bGwhPWU/ZTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYm9keVwiKX1yZXR1cm4gZS53cmFwPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgdGhpcz90OnRoaXMuZnJvbUhUTUwodCl9LGUuZnJvbUhUTUw9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImh0bWxcIiksZS5pbm5lckhUTUw9dCx0aGlzLmZyb21FbGVtZW50KGUpfSxlLmZyb21FbGVtZW50PWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgdGhpcyh7aGVhZDp0LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkXCIpLGJvZHk6dC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKX0pfSxlLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgZSh7aGVhZDp0aGlzLmhlYWQuY2xvbmVOb2RlKCEwKSxib2R5OnRoaXMuYm9keS5jbG9uZU5vZGUoITApfSl9LGUucHJvdG90eXBlLmdldFJvb3RMb2NhdGlvbj1mdW5jdGlvbigpe3ZhciBlLHI7cmV0dXJuIHI9bnVsbCE9KGU9dGhpcy5nZXRTZXR0aW5nKFwicm9vdFwiKSk/ZTpcIi9cIixuZXcgdC5Mb2NhdGlvbihyKX0sZS5wcm90b3R5cGUuZ2V0Q2FjaGVDb250cm9sVmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRTZXR0aW5nKFwiY2FjaGUtY29udHJvbFwiKX0sZS5wcm90b3R5cGUuaGFzQW5jaG9yPWZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gbnVsbCE9dGhpcy5ib2R5LnF1ZXJ5U2VsZWN0b3IoXCJbaWQ9J1wiK3QrXCInXVwiKX1jYXRjaChlKXt9fSxlLnByb3RvdHlwZS5pc1ByZXZpZXdhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuXCJuby1wcmV2aWV3XCIhPT10aGlzLmdldENhY2hlQ29udHJvbFZhbHVlKCl9LGUucHJvdG90eXBlLmlzQ2FjaGVhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuXCJuby1jYWNoZVwiIT09dGhpcy5nZXRDYWNoZUNvbnRyb2xWYWx1ZSgpfSxlLnByb3RvdHlwZS5nZXRTZXR0aW5nPWZ1bmN0aW9uKHQpe3ZhciBlLHI7cmV0dXJuIHI9dGhpcy5oZWFkLnF1ZXJ5U2VsZWN0b3JBbGwoXCJtZXRhW25hbWU9J3R1cmJvbGlua3MtXCIrdCtcIiddXCIpLGU9cltyLmxlbmd0aC0xXSxudWxsIT1lP2UuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKTp2b2lkIDB9LGV9KCl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXt2YXIgZT1bXS5zbGljZTt0LlJlbmRlcmVyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe312YXIgcjtyZXR1cm4gdC5yZW5kZXI9ZnVuY3Rpb24oKXt2YXIgdCxyLG4sbztyZXR1cm4gbj1hcmd1bWVudHNbMF0scj1hcmd1bWVudHNbMV0sdD0zPD1hcmd1bWVudHMubGVuZ3RoP2UuY2FsbChhcmd1bWVudHMsMik6W10sbz1mdW5jdGlvbih0LGUscil7ci5wcm90b3R5cGU9dC5wcm90b3R5cGU7dmFyIG49bmV3IHIsbz10LmFwcGx5KG4sZSk7cmV0dXJuIE9iamVjdChvKT09PW8/bzpufSh0aGlzLHQsZnVuY3Rpb24oKXt9KSxvLmRlbGVnYXRlPW4sby5yZW5kZXIociksb30sdC5wcm90b3R5cGUucmVuZGVyVmlldz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kZWxlZ2F0ZS52aWV3V2lsbFJlbmRlcih0aGlzLm5ld0JvZHkpLHQoKSx0aGlzLmRlbGVnYXRlLnZpZXdSZW5kZXJlZCh0aGlzLm5ld0JvZHkpfSx0LnByb3RvdHlwZS5pbnZhbGlkYXRlVmlldz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRlbGVnYXRlLnZpZXdJbnZhbGlkYXRlZCgpfSx0LnByb3RvdHlwZS5jcmVhdGVTY3JpcHRFbGVtZW50PWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVyblwiZmFsc2VcIj09PXQuZ2V0QXR0cmlidXRlKFwiZGF0YS10dXJib2xpbmtzLWV2YWxcIik/dDooZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpLGUudGV4dENvbnRlbnQ9dC50ZXh0Q29udGVudCxyKGUsdCksZSl9LHI9ZnVuY3Rpb24odCxlKXt2YXIgcixuLG8saSxzLGEsdTtmb3IoaT1lLmF0dHJpYnV0ZXMsYT1bXSxyPTAsbj1pLmxlbmd0aDtuPnI7cisrKXM9aVtyXSxvPXMubmFtZSx1PXMudmFsdWUsYS5wdXNoKHQuc2V0QXR0cmlidXRlKG8sdSkpO3JldHVybiBhfSx0fSgpfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7dC5IZWFkRGV0YWlscz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dmFyIGUscixpLHMsYSx1LGw7Zm9yKHRoaXMuZWxlbWVudD10LHRoaXMuZWxlbWVudHM9e30sbD10aGlzLmVsZW1lbnQuY2hpbGROb2RlcyxzPTAsdT1sLmxlbmd0aDt1PnM7cysrKWk9bFtzXSxpLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUmJihhPWkub3V0ZXJIVE1MLHI9bnVsbCE9KGU9dGhpcy5lbGVtZW50cylbYV0/ZVthXTplW2FdPXt0eXBlOm8oaSksdHJhY2tlZDpuKGkpLGVsZW1lbnRzOltdfSxyLmVsZW1lbnRzLnB1c2goaSkpfXZhciBlLHIsbixvO3JldHVybiB0LnByb3RvdHlwZS5oYXNFbGVtZW50V2l0aEtleT1mdW5jdGlvbih0KXtyZXR1cm4gdCBpbiB0aGlzLmVsZW1lbnRzfSx0LnByb3RvdHlwZS5nZXRUcmFja2VkRWxlbWVudFNpZ25hdHVyZT1mdW5jdGlvbigpe3ZhciB0LGU7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHIsbjtyPXRoaXMuZWxlbWVudHMsbj1bXTtmb3IodCBpbiByKWU9clt0XS50cmFja2VkLGUmJm4ucHVzaCh0KTtyZXR1cm4gbn0uY2FsbCh0aGlzKS5qb2luKFwiXCIpfSx0LnByb3RvdHlwZS5nZXRTY3JpcHRFbGVtZW50c05vdEluRGV0YWlscz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5nZXRFbGVtZW50c01hdGNoaW5nVHlwZU5vdEluRGV0YWlscyhcInNjcmlwdFwiLHQpfSx0LnByb3RvdHlwZS5nZXRTdHlsZXNoZWV0RWxlbWVudHNOb3RJbkRldGFpbHM9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2V0RWxlbWVudHNNYXRjaGluZ1R5cGVOb3RJbkRldGFpbHMoXCJzdHlsZXNoZWV0XCIsdCl9LHQucHJvdG90eXBlLmdldEVsZW1lbnRzTWF0Y2hpbmdUeXBlTm90SW5EZXRhaWxzPWZ1bmN0aW9uKHQsZSl7dmFyIHIsbixvLGkscyxhO289dGhpcy5lbGVtZW50cyxzPVtdO2ZvcihuIGluIG8paT1vW25dLGE9aS50eXBlLHI9aS5lbGVtZW50cyxhIT09dHx8ZS5oYXNFbGVtZW50V2l0aEtleShuKXx8cy5wdXNoKHJbMF0pO3JldHVybiBzfSx0LnByb3RvdHlwZS5nZXRQcm92aXNpb25hbEVsZW1lbnRzPWZ1bmN0aW9uKCl7dmFyIHQsZSxyLG4sbyxpLHM7cj1bXSxuPXRoaXMuZWxlbWVudHM7Zm9yKGUgaW4gbilvPW5bZV0scz1vLnR5cGUsaT1vLnRyYWNrZWQsdD1vLmVsZW1lbnRzLG51bGwhPXN8fGk/dC5sZW5ndGg+MSYmci5wdXNoLmFwcGx5KHIsdC5zbGljZSgxKSk6ci5wdXNoLmFwcGx5KHIsdCk7cmV0dXJuIHJ9LG89ZnVuY3Rpb24odCl7cmV0dXJuIGUodCk/XCJzY3JpcHRcIjpyKHQpP1wic3R5bGVzaGVldFwiOnZvaWQgMH0sbj1mdW5jdGlvbih0KXtyZXR1cm5cInJlbG9hZFwiPT09dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXR1cmJvbGlua3MtdHJhY2tcIil9LGU9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIGU9dC50YWdOYW1lLnRvTG93ZXJDYXNlKCksXCJzY3JpcHRcIj09PWV9LHI9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIGU9dC50YWdOYW1lLnRvTG93ZXJDYXNlKCksXCJzdHlsZVwiPT09ZXx8XCJsaW5rXCI9PT1lJiZcInN0eWxlc2hlZXRcIj09PXQuZ2V0QXR0cmlidXRlKFwicmVsXCIpfSx0fSgpfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKCl7dGhpcy5jb25zdHJ1Y3Rvcj10fWZvcih2YXIgbyBpbiBlKXIuY2FsbChlLG8pJiYodFtvXT1lW29dKTtyZXR1cm4gbi5wcm90b3R5cGU9ZS5wcm90b3R5cGUsdC5wcm90b3R5cGU9bmV3IG4sdC5fX3N1cGVyX189ZS5wcm90b3R5cGUsdH0scj17fS5oYXNPd25Qcm9wZXJ0eTt0LlNuYXBzaG90UmVuZGVyZXI9ZnVuY3Rpb24ocil7ZnVuY3Rpb24gbihlLHIpe3RoaXMuY3VycmVudFNuYXBzaG90PWUsdGhpcy5uZXdTbmFwc2hvdD1yLHRoaXMuY3VycmVudEhlYWREZXRhaWxzPW5ldyB0LkhlYWREZXRhaWxzKHRoaXMuY3VycmVudFNuYXBzaG90LmhlYWQpLHRoaXMubmV3SGVhZERldGFpbHM9bmV3IHQuSGVhZERldGFpbHModGhpcy5uZXdTbmFwc2hvdC5oZWFkKSx0aGlzLm5ld0JvZHk9dGhpcy5uZXdTbmFwc2hvdC5ib2R5fXJldHVybiBlKG4sciksbi5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRyYWNrZWRFbGVtZW50c0FyZUlkZW50aWNhbCgpPyh0aGlzLm1lcmdlSGVhZCgpLHRoaXMucmVuZGVyVmlldyhmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5yZXBsYWNlQm9keSgpLGUuZm9jdXNGaXJzdEF1dG9mb2N1c2FibGVFbGVtZW50KCksdCgpfX0odGhpcykpKTp0aGlzLmludmFsaWRhdGVWaWV3KCl9LG4ucHJvdG90eXBlLm1lcmdlSGVhZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvcHlOZXdIZWFkU3R5bGVzaGVldEVsZW1lbnRzKCksdGhpcy5jb3B5TmV3SGVhZFNjcmlwdEVsZW1lbnRzKCksdGhpcy5yZW1vdmVDdXJyZW50SGVhZFByb3Zpc2lvbmFsRWxlbWVudHMoKSx0aGlzLmNvcHlOZXdIZWFkUHJvdmlzaW9uYWxFbGVtZW50cygpfSxuLnByb3RvdHlwZS5yZXBsYWNlQm9keT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFjdGl2YXRlQm9keVNjcmlwdEVsZW1lbnRzKCksdGhpcy5pbXBvcnRCb2R5UGVybWFuZW50RWxlbWVudHMoKSx0aGlzLmFzc2lnbk5ld0JvZHkoKX0sbi5wcm90b3R5cGUudHJhY2tlZEVsZW1lbnRzQXJlSWRlbnRpY2FsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VycmVudEhlYWREZXRhaWxzLmdldFRyYWNrZWRFbGVtZW50U2lnbmF0dXJlKCk9PT10aGlzLm5ld0hlYWREZXRhaWxzLmdldFRyYWNrZWRFbGVtZW50U2lnbmF0dXJlKCl9LG4ucHJvdG90eXBlLmNvcHlOZXdIZWFkU3R5bGVzaGVldEVsZW1lbnRzPWZ1bmN0aW9uKCl7dmFyIHQsZSxyLG4sbztmb3Iobj10aGlzLmdldE5ld0hlYWRTdHlsZXNoZWV0RWxlbWVudHMoKSxvPVtdLGU9MCxyPW4ubGVuZ3RoO3I+ZTtlKyspdD1uW2VdLG8ucHVzaChkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHQpKTtyZXR1cm4gb30sbi5wcm90b3R5cGUuY29weU5ld0hlYWRTY3JpcHRFbGVtZW50cz1mdW5jdGlvbigpe3ZhciB0LGUscixuLG87Zm9yKG49dGhpcy5nZXROZXdIZWFkU2NyaXB0RWxlbWVudHMoKSxvPVtdLGU9MCxyPW4ubGVuZ3RoO3I+ZTtlKyspdD1uW2VdLG8ucHVzaChkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlU2NyaXB0RWxlbWVudCh0KSkpO3JldHVybiBvfSxuLnByb3RvdHlwZS5yZW1vdmVDdXJyZW50SGVhZFByb3Zpc2lvbmFsRWxlbWVudHM9ZnVuY3Rpb24oKXt2YXIgdCxlLHIsbixvO2ZvcihuPXRoaXMuZ2V0Q3VycmVudEhlYWRQcm92aXNpb25hbEVsZW1lbnRzKCksbz1bXSxlPTAscj1uLmxlbmd0aDtyPmU7ZSsrKXQ9bltlXSxvLnB1c2goZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZCh0KSk7cmV0dXJuIG99LG4ucHJvdG90eXBlLmNvcHlOZXdIZWFkUHJvdmlzaW9uYWxFbGVtZW50cz1mdW5jdGlvbigpe3ZhciB0LGUscixuLG87Zm9yKG49dGhpcy5nZXROZXdIZWFkUHJvdmlzaW9uYWxFbGVtZW50cygpLG89W10sZT0wLHI9bi5sZW5ndGg7cj5lO2UrKyl0PW5bZV0sby5wdXNoKGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodCkpO3JldHVybiBvfSxuLnByb3RvdHlwZS5pbXBvcnRCb2R5UGVybWFuZW50RWxlbWVudHM9ZnVuY3Rpb24oKXt2YXIgdCxlLHIsbixvLGk7Zm9yKG49dGhpcy5nZXROZXdCb2R5UGVybWFuZW50RWxlbWVudHMoKSxpPVtdLGU9MCxyPW4ubGVuZ3RoO3I+ZTtlKyspbz1uW2VdLCh0PXRoaXMuZmluZEN1cnJlbnRCb2R5UGVybWFuZW50RWxlbWVudChvKSk/aS5wdXNoKG8ucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQodCxvKSk6aS5wdXNoKHZvaWQgMCk7cmV0dXJuIGl9LG4ucHJvdG90eXBlLmFjdGl2YXRlQm9keVNjcmlwdEVsZW1lbnRzPWZ1bmN0aW9uKCl7dmFyIHQsZSxyLG4sbyxpO2ZvcihuPXRoaXMuZ2V0TmV3Qm9keVNjcmlwdEVsZW1lbnRzKCksaT1bXSxlPTAscj1uLmxlbmd0aDtyPmU7ZSsrKW89bltlXSx0PXRoaXMuY3JlYXRlU2NyaXB0RWxlbWVudChvKSxpLnB1c2goby5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0LG8pKTtyZXR1cm4gaX0sbi5wcm90b3R5cGUuYXNzaWduTmV3Qm9keT1mdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5ib2R5PXRoaXMubmV3Qm9keX0sbi5wcm90b3R5cGUuZm9jdXNGaXJzdEF1dG9mb2N1c2FibGVFbGVtZW50PWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIG51bGwhPSh0PXRoaXMuZmluZEZpcnN0QXV0b2ZvY3VzYWJsZUVsZW1lbnQoKSk/dC5mb2N1cygpOnZvaWQgMH0sbi5wcm90b3R5cGUuZ2V0TmV3SGVhZFN0eWxlc2hlZXRFbGVtZW50cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5ld0hlYWREZXRhaWxzLmdldFN0eWxlc2hlZXRFbGVtZW50c05vdEluRGV0YWlscyh0aGlzLmN1cnJlbnRIZWFkRGV0YWlscyl9LG4ucHJvdG90eXBlLmdldE5ld0hlYWRTY3JpcHRFbGVtZW50cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5ld0hlYWREZXRhaWxzLmdldFNjcmlwdEVsZW1lbnRzTm90SW5EZXRhaWxzKHRoaXMuY3VycmVudEhlYWREZXRhaWxzKX0sbi5wcm90b3R5cGUuZ2V0Q3VycmVudEhlYWRQcm92aXNpb25hbEVsZW1lbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VycmVudEhlYWREZXRhaWxzLmdldFByb3Zpc2lvbmFsRWxlbWVudHMoKX0sbi5wcm90b3R5cGUuZ2V0TmV3SGVhZFByb3Zpc2lvbmFsRWxlbWVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uZXdIZWFkRGV0YWlscy5nZXRQcm92aXNpb25hbEVsZW1lbnRzKCl9LG4ucHJvdG90eXBlLmdldE5ld0JvZHlQZXJtYW5lbnRFbGVtZW50cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5ld0JvZHkucXVlcnlTZWxlY3RvckFsbChcIltpZF1bZGF0YS10dXJib2xpbmtzLXBlcm1hbmVudF1cIil9LG4ucHJvdG90eXBlLmZpbmRDdXJyZW50Qm9keVBlcm1hbmVudEVsZW1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIiNcIit0LmlkK1wiW2RhdGEtdHVyYm9saW5rcy1wZXJtYW5lbnRdXCIpfSxuLnByb3RvdHlwZS5nZXROZXdCb2R5U2NyaXB0RWxlbWVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uZXdCb2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzY3JpcHRcIil9LG4ucHJvdG90eXBlLmZpbmRGaXJzdEF1dG9mb2N1c2FibGVFbGVtZW50PWZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIlthdXRvZm9jdXNdXCIpfSxufSh0LlJlbmRlcmVyKX0uY2FsbCh0aGlzKSxmdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbigpe3RoaXMuY29uc3RydWN0b3I9dH1mb3IodmFyIG8gaW4gZSlyLmNhbGwoZSxvKSYmKHRbb109ZVtvXSk7cmV0dXJuIG4ucHJvdG90eXBlPWUucHJvdG90eXBlLHQucHJvdG90eXBlPW5ldyBuLHQuX19zdXBlcl9fPWUucHJvdG90eXBlLHR9LHI9e30uaGFzT3duUHJvcGVydHk7dC5FcnJvclJlbmRlcmVyPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIHIodCl7dGhpcy5odG1sPXR9cmV0dXJuIGUocix0KSxyLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMucmVuZGVyVmlldyhmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5yZXBsYWNlRG9jdW1lbnRIVE1MKCksZS5hY3RpdmF0ZUJvZHlTY3JpcHRFbGVtZW50cygpLHQoKX19KHRoaXMpKX0sci5wcm90b3R5cGUucmVwbGFjZURvY3VtZW50SFRNTD1mdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MPXRoaXMuaHRtbH0sci5wcm90b3R5cGUuYWN0aXZhdGVCb2R5U2NyaXB0RWxlbWVudHM9ZnVuY3Rpb24oKXt2YXIgdCxlLHIsbixvLGk7Zm9yKG49dGhpcy5nZXRTY3JpcHRFbGVtZW50cygpLGk9W10sZT0wLHI9bi5sZW5ndGg7cj5lO2UrKylvPW5bZV0sdD10aGlzLmNyZWF0ZVNjcmlwdEVsZW1lbnQobyksaS5wdXNoKG8ucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQodCxvKSk7cmV0dXJuIGl9LHIucHJvdG90eXBlLmdldFNjcmlwdEVsZW1lbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic2NyaXB0XCIpfSxyfSh0LlJlbmRlcmVyKX0uY2FsbCh0aGlzKSxmdW5jdGlvbigpe3QuVmlldz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7dGhpcy5kZWxlZ2F0ZT10LHRoaXMuZWxlbWVudD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnR9cmV0dXJuIGUucHJvdG90eXBlLmdldFJvb3RMb2NhdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFNuYXBzaG90KCkuZ2V0Um9vdExvY2F0aW9uKCl9LGUucHJvdG90eXBlLmdldFNuYXBzaG90PWZ1bmN0aW9uKCl7cmV0dXJuIHQuU25hcHNob3QuZnJvbUVsZW1lbnQodGhpcy5lbGVtZW50KX0sZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKHQsZSl7dmFyIHIsbixvO3JldHVybiBvPXQuc25hcHNob3Qscj10LmVycm9yLG49dC5pc1ByZXZpZXcsdGhpcy5tYXJrQXNQcmV2aWV3KG4pLG51bGwhPW8/dGhpcy5yZW5kZXJTbmFwc2hvdChvLGUpOnRoaXMucmVuZGVyRXJyb3IocixlKX0sZS5wcm90b3R5cGUubWFya0FzUHJldmlldz1mdW5jdGlvbih0KXtyZXR1cm4gdD90aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS10dXJib2xpbmtzLXByZXZpZXdcIixcIlwiKTp0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS10dXJib2xpbmtzLXByZXZpZXdcIil9LGUucHJvdG90eXBlLnJlbmRlclNuYXBzaG90PWZ1bmN0aW9uKGUscil7cmV0dXJuIHQuU25hcHNob3RSZW5kZXJlci5yZW5kZXIodGhpcy5kZWxlZ2F0ZSxyLHRoaXMuZ2V0U25hcHNob3QoKSx0LlNuYXBzaG90LndyYXAoZSkpfSxlLnByb3RvdHlwZS5yZW5kZXJFcnJvcj1mdW5jdGlvbihlLHIpe3JldHVybiB0LkVycm9yUmVuZGVyZXIucmVuZGVyKHRoaXMuZGVsZWdhdGUscixlKX0sZX0oKX0uY2FsbCh0aGlzKSxmdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfX07dC5TY3JvbGxNYW5hZ2VyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihyKXt0aGlzLmRlbGVnYXRlPXIsdGhpcy5vblNjcm9sbD1lKHRoaXMub25TY3JvbGwsdGhpcyksdGhpcy5vblNjcm9sbD10LnRocm90dGxlKHRoaXMub25TY3JvbGwpfXJldHVybiByLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXJ0ZWQ/dm9pZCAwOihhZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsdGhpcy5vblNjcm9sbCwhMSksdGhpcy5vblNjcm9sbCgpLHRoaXMuc3RhcnRlZD0hMCl9LHIucHJvdG90eXBlLnN0b3A9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGFydGVkPyhyZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsdGhpcy5vblNjcm9sbCwhMSksdGhpcy5zdGFydGVkPSExKTp2b2lkIDB9LHIucHJvdG90eXBlLnNjcm9sbFRvRWxlbWVudD1mdW5jdGlvbih0KXtyZXR1cm4gdC5zY3JvbGxJbnRvVmlldygpfSxyLnByb3RvdHlwZS5zY3JvbGxUb1Bvc2l0aW9uPWZ1bmN0aW9uKHQpe3ZhciBlLHI7cmV0dXJuIGU9dC54LHI9dC55LHdpbmRvdy5zY3JvbGxUbyhlLHIpfSxyLnByb3RvdHlwZS5vblNjcm9sbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy51cGRhdGVQb3NpdGlvbih7eDp3aW5kb3cucGFnZVhPZmZzZXQseTp3aW5kb3cucGFnZVlPZmZzZXR9KX0sci5wcm90b3R5cGUudXBkYXRlUG9zaXRpb249ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIHRoaXMucG9zaXRpb249dCxudWxsIT0oZT10aGlzLmRlbGVnYXRlKT9lLnNjcm9sbFBvc2l0aW9uQ2hhbmdlZCh0aGlzLnBvc2l0aW9uKTp2b2lkIDB9LHJ9KCl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXt0LlNuYXBzaG90Q2FjaGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3RoaXMuc2l6ZT10LHRoaXMua2V5cz1bXSx0aGlzLnNuYXBzaG90cz17fX12YXIgcjtyZXR1cm4gZS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBlPXIodCksZSBpbiB0aGlzLnNuYXBzaG90c30sZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe3ZhciBlO2lmKHRoaXMuaGFzKHQpKXJldHVybiBlPXRoaXMucmVhZCh0KSx0aGlzLnRvdWNoKHQpLGV9LGUucHJvdG90eXBlLnB1dD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLndyaXRlKHQsZSksdGhpcy50b3VjaCh0KSxlfSxlLnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBlPXIodCksdGhpcy5zbmFwc2hvdHNbZV19LGUucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQsZSl7dmFyIG47cmV0dXJuIG49cih0KSx0aGlzLnNuYXBzaG90c1tuXT1lfSxlLnByb3RvdHlwZS50b3VjaD1mdW5jdGlvbih0KXt2YXIgZSxuO3JldHVybiBuPXIodCksZT10aGlzLmtleXMuaW5kZXhPZihuKSxlPi0xJiZ0aGlzLmtleXMuc3BsaWNlKGUsMSksdGhpcy5rZXlzLnVuc2hpZnQobiksdGhpcy50cmltKCl9LGUucHJvdG90eXBlLnRyaW09ZnVuY3Rpb24oKXt2YXIgdCxlLHIsbixvO2ZvcihuPXRoaXMua2V5cy5zcGxpY2UodGhpcy5zaXplKSxvPVtdLHQ9MCxyPW4ubGVuZ3RoO3I+dDt0KyspZT1uW3RdLG8ucHVzaChkZWxldGUgdGhpcy5zbmFwc2hvdHNbZV0pO3JldHVybiBvfSxyPWZ1bmN0aW9uKGUpe3JldHVybiB0LkxvY2F0aW9uLndyYXAoZSkudG9DYWNoZUtleSgpfSxlfSgpfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseShlLGFyZ3VtZW50cyl9fTt0LlZpc2l0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihyLG4sbyl7dGhpcy5jb250cm9sbGVyPXIsdGhpcy5hY3Rpb249byx0aGlzLnBlcmZvcm1TY3JvbGw9ZSh0aGlzLnBlcmZvcm1TY3JvbGwsdGhpcyksdGhpcy5pZGVudGlmaWVyPXQudXVpZCgpLHRoaXMubG9jYXRpb249dC5Mb2NhdGlvbi53cmFwKG4pLHRoaXMuYWRhcHRlcj10aGlzLmNvbnRyb2xsZXIuYWRhcHRlcix0aGlzLnN0YXRlPVwiaW5pdGlhbGl6ZWRcIix0aGlzLnRpbWluZ01ldHJpY3M9e319dmFyIG47cmV0dXJuIHIucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKCl7cmV0dXJuXCJpbml0aWFsaXplZFwiPT09dGhpcy5zdGF0ZT8odGhpcy5yZWNvcmRUaW1pbmdNZXRyaWMoXCJ2aXNpdFN0YXJ0XCIpLHRoaXMuc3RhdGU9XCJzdGFydGVkXCIsdGhpcy5hZGFwdGVyLnZpc2l0U3RhcnRlZCh0aGlzKSk6dm9pZCAwfSxyLnByb3RvdHlwZS5jYW5jZWw9ZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm5cInN0YXJ0ZWRcIj09PXRoaXMuc3RhdGU/KG51bGwhPSh0PXRoaXMucmVxdWVzdCkmJnQuY2FuY2VsKCksdGhpcy5jYW5jZWxSZW5kZXIoKSx0aGlzLnN0YXRlPVwiY2FuY2VsZWRcIik6dm9pZCAwfSxyLnByb3RvdHlwZS5jb21wbGV0ZT1mdW5jdGlvbigpe3ZhciB0O3JldHVyblwic3RhcnRlZFwiPT09dGhpcy5zdGF0ZT8odGhpcy5yZWNvcmRUaW1pbmdNZXRyaWMoXCJ2aXNpdEVuZFwiKSx0aGlzLnN0YXRlPVwiY29tcGxldGVkXCIsXCJmdW5jdGlvblwiPT10eXBlb2YodD10aGlzLmFkYXB0ZXIpLnZpc2l0Q29tcGxldGVkJiZ0LnZpc2l0Q29tcGxldGVkKHRoaXMpLHRoaXMuY29udHJvbGxlci52aXNpdENvbXBsZXRlZCh0aGlzKSk6dm9pZCAwfSxyLnByb3RvdHlwZS5mYWlsPWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuXCJzdGFydGVkXCI9PT10aGlzLnN0YXRlPyh0aGlzLnN0YXRlPVwiZmFpbGVkXCIsXCJmdW5jdGlvblwiPT10eXBlb2YodD10aGlzLmFkYXB0ZXIpLnZpc2l0RmFpbGVkP3QudmlzaXRGYWlsZWQodGhpcyk6dm9pZCAwKTp2b2lkIDB9LHIucHJvdG90eXBlLmNoYW5nZUhpc3Rvcnk9ZnVuY3Rpb24oKXt2YXIgdCxlO3JldHVybiB0aGlzLmhpc3RvcnlDaGFuZ2VkP3ZvaWQgMDoodD10aGlzLmxvY2F0aW9uLmlzRXF1YWxUbyh0aGlzLnJlZmVycmVyKT9cInJlcGxhY2VcIjp0aGlzLmFjdGlvbixlPW4odCksdGhpcy5jb250cm9sbGVyW2VdKHRoaXMubG9jYXRpb24sdGhpcy5yZXN0b3JhdGlvbklkZW50aWZpZXIpLHRoaXMuaGlzdG9yeUNoYW5nZWQ9ITApfSxyLnByb3RvdHlwZS5pc3N1ZVJlcXVlc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaG91bGRJc3N1ZVJlcXVlc3QoKSYmbnVsbD09dGhpcy5yZXF1ZXN0Pyh0aGlzLnByb2dyZXNzPTAsdGhpcy5yZXF1ZXN0PW5ldyB0Lkh0dHBSZXF1ZXN0KHRoaXMsdGhpcy5sb2NhdGlvbix0aGlzLnJlZmVycmVyKSx0aGlzLnJlcXVlc3Quc2VuZCgpKTp2b2lkIDB9LHIucHJvdG90eXBlLmdldENhY2hlZFNuYXBzaG90PWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuISh0PXRoaXMuY29udHJvbGxlci5nZXRDYWNoZWRTbmFwc2hvdEZvckxvY2F0aW9uKHRoaXMubG9jYXRpb24pKXx8bnVsbCE9dGhpcy5sb2NhdGlvbi5hbmNob3ImJiF0Lmhhc0FuY2hvcih0aGlzLmxvY2F0aW9uLmFuY2hvcil8fFwicmVzdG9yZVwiIT09dGhpcy5hY3Rpb24mJiF0LmlzUHJldmlld2FibGUoKT92b2lkIDA6dH0sci5wcm90b3R5cGUuaGFzQ2FjaGVkU25hcHNob3Q9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9dGhpcy5nZXRDYWNoZWRTbmFwc2hvdCgpfSxyLnByb3RvdHlwZS5sb2FkQ2FjaGVkU25hcHNob3Q9ZnVuY3Rpb24oKXt2YXIgdCxlO3JldHVybihlPXRoaXMuZ2V0Q2FjaGVkU25hcHNob3QoKSk/KHQ9dGhpcy5zaG91bGRJc3N1ZVJlcXVlc3QoKSx0aGlzLnJlbmRlcihmdW5jdGlvbigpe3ZhciByO3JldHVybiB0aGlzLmNhY2hlU25hcHNob3QoKSx0aGlzLmNvbnRyb2xsZXIucmVuZGVyKHtzbmFwc2hvdDplLGlzUHJldmlldzp0fSx0aGlzLnBlcmZvcm1TY3JvbGwpLFwiZnVuY3Rpb25cIj09dHlwZW9mKHI9dGhpcy5hZGFwdGVyKS52aXNpdFJlbmRlcmVkJiZyLnZpc2l0UmVuZGVyZWQodGhpcyksdD92b2lkIDA6dGhpcy5jb21wbGV0ZSgpfSkpOnZvaWQgMH0sci5wcm90b3R5cGUubG9hZFJlc3BvbnNlPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXRoaXMucmVzcG9uc2U/dGhpcy5yZW5kZXIoZnVuY3Rpb24oKXt2YXIgdCxlO3JldHVybiB0aGlzLmNhY2hlU25hcHNob3QoKSx0aGlzLnJlcXVlc3QuZmFpbGVkPyh0aGlzLmNvbnRyb2xsZXIucmVuZGVyKHtlcnJvcjp0aGlzLnJlc3BvbnNlfSx0aGlzLnBlcmZvcm1TY3JvbGwpLFwiZnVuY3Rpb25cIj09dHlwZW9mKHQ9dGhpcy5hZGFwdGVyKS52aXNpdFJlbmRlcmVkJiZ0LnZpc2l0UmVuZGVyZWQodGhpcyksdGhpcy5mYWlsKCkpOih0aGlzLmNvbnRyb2xsZXIucmVuZGVyKHtzbmFwc2hvdDp0aGlzLnJlc3BvbnNlfSx0aGlzLnBlcmZvcm1TY3JvbGwpLFwiZnVuY3Rpb25cIj09dHlwZW9mKGU9dGhpcy5hZGFwdGVyKS52aXNpdFJlbmRlcmVkJiZlLnZpc2l0UmVuZGVyZWQodGhpcyksdGhpcy5jb21wbGV0ZSgpKX0pOnZvaWQgMH0sci5wcm90b3R5cGUuZm9sbG93UmVkaXJlY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWRpcmVjdGVkVG9Mb2NhdGlvbiYmIXRoaXMuZm9sbG93ZWRSZWRpcmVjdD8odGhpcy5sb2NhdGlvbj10aGlzLnJlZGlyZWN0ZWRUb0xvY2F0aW9uLHRoaXMuY29udHJvbGxlci5yZXBsYWNlSGlzdG9yeVdpdGhMb2NhdGlvbkFuZFJlc3RvcmF0aW9uSWRlbnRpZmllcih0aGlzLnJlZGlyZWN0ZWRUb0xvY2F0aW9uLHRoaXMucmVzdG9yYXRpb25JZGVudGlmaWVyKSx0aGlzLmZvbGxvd2VkUmVkaXJlY3Q9ITApOnZvaWQgMH0sci5wcm90b3R5cGUucmVxdWVzdFN0YXJ0ZWQ9ZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gdGhpcy5yZWNvcmRUaW1pbmdNZXRyaWMoXCJyZXF1ZXN0U3RhcnRcIiksXCJmdW5jdGlvblwiPT10eXBlb2YodD10aGlzLmFkYXB0ZXIpLnZpc2l0UmVxdWVzdFN0YXJ0ZWQ/dC52aXNpdFJlcXVlc3RTdGFydGVkKHRoaXMpOnZvaWQgMH0sci5wcm90b3R5cGUucmVxdWVzdFByb2dyZXNzZWQ9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIHRoaXMucHJvZ3Jlc3M9dCxcImZ1bmN0aW9uXCI9PXR5cGVvZihlPXRoaXMuYWRhcHRlcikudmlzaXRSZXF1ZXN0UHJvZ3Jlc3NlZD9lLnZpc2l0UmVxdWVzdFByb2dyZXNzZWQodGhpcyk6dm9pZCAwfSxyLnByb3RvdHlwZS5yZXF1ZXN0Q29tcGxldGVkV2l0aFJlc3BvbnNlPWZ1bmN0aW9uKGUscil7cmV0dXJuIHRoaXMucmVzcG9uc2U9ZSxudWxsIT1yJiYodGhpcy5yZWRpcmVjdGVkVG9Mb2NhdGlvbj10LkxvY2F0aW9uLndyYXAocikpLHRoaXMuYWRhcHRlci52aXNpdFJlcXVlc3RDb21wbGV0ZWQodGhpcyl9LHIucHJvdG90eXBlLnJlcXVlc3RGYWlsZWRXaXRoU3RhdHVzQ29kZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnJlc3BvbnNlPWUsdGhpcy5hZGFwdGVyLnZpc2l0UmVxdWVzdEZhaWxlZFdpdGhTdGF0dXNDb2RlKHRoaXMsdCl9LHIucHJvdG90eXBlLnJlcXVlc3RGaW5pc2hlZD1mdW5jdGlvbigpe3ZhciB0O3JldHVybiB0aGlzLnJlY29yZFRpbWluZ01ldHJpYyhcInJlcXVlc3RFbmRcIiksXCJmdW5jdGlvblwiPT10eXBlb2YodD10aGlzLmFkYXB0ZXIpLnZpc2l0UmVxdWVzdEZpbmlzaGVkP3QudmlzaXRSZXF1ZXN0RmluaXNoZWQodGhpcyk6dm9pZCAwfSxyLnByb3RvdHlwZS5wZXJmb3JtU2Nyb2xsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2Nyb2xsZWQ/dm9pZCAwOihcInJlc3RvcmVcIj09PXRoaXMuYWN0aW9uP3RoaXMuc2Nyb2xsVG9SZXN0b3JlZFBvc2l0aW9uKCl8fHRoaXMuc2Nyb2xsVG9Ub3AoKTp0aGlzLnNjcm9sbFRvQW5jaG9yKCl8fHRoaXMuc2Nyb2xsVG9Ub3AoKSx0aGlzLnNjcm9sbGVkPSEwKX0sci5wcm90b3R5cGUuc2Nyb2xsVG9SZXN0b3JlZFBvc2l0aW9uPWZ1bmN0aW9uKCl7dmFyIHQsZTtyZXR1cm4gdD1udWxsIT0oZT10aGlzLnJlc3RvcmF0aW9uRGF0YSk/ZS5zY3JvbGxQb3NpdGlvbjp2b2lkIDAsbnVsbCE9dD8odGhpcy5jb250cm9sbGVyLnNjcm9sbFRvUG9zaXRpb24odCksITApOnZvaWQgMH0sci5wcm90b3R5cGUuc2Nyb2xsVG9BbmNob3I9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9dGhpcy5sb2NhdGlvbi5hbmNob3I/KHRoaXMuY29udHJvbGxlci5zY3JvbGxUb0FuY2hvcih0aGlzLmxvY2F0aW9uLmFuY2hvciksITApOnZvaWQgMH0sci5wcm90b3R5cGUuc2Nyb2xsVG9Ub3A9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb250cm9sbGVyLnNjcm9sbFRvUG9zaXRpb24oe3g6MCx5OjB9KX0sci5wcm90b3R5cGUucmVjb3JkVGltaW5nTWV0cmljPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBudWxsIT0oZT10aGlzLnRpbWluZ01ldHJpY3MpW3RdP2VbdF06ZVt0XT0obmV3IERhdGUpLmdldFRpbWUoKX0sci5wcm90b3R5cGUuZ2V0VGltaW5nTWV0cmljcz1mdW5jdGlvbigpe3JldHVybiB0LmNvcHlPYmplY3QodGhpcy50aW1pbmdNZXRyaWNzKX0sbj1mdW5jdGlvbih0KXtzd2l0Y2godCl7Y2FzZVwicmVwbGFjZVwiOnJldHVyblwicmVwbGFjZUhpc3RvcnlXaXRoTG9jYXRpb25BbmRSZXN0b3JhdGlvbklkZW50aWZpZXJcIjtjYXNlXCJhZHZhbmNlXCI6Y2FzZVwicmVzdG9yZVwiOnJldHVyblwicHVzaEhpc3RvcnlXaXRoTG9jYXRpb25BbmRSZXN0b3JhdGlvbklkZW50aWZpZXJcIn19LHIucHJvdG90eXBlLnNob3VsZElzc3VlUmVxdWVzdD1mdW5jdGlvbigpe3JldHVyblwicmVzdG9yZVwiPT09dGhpcy5hY3Rpb24/IXRoaXMuaGFzQ2FjaGVkU25hcHNob3QoKTohMH0sci5wcm90b3R5cGUuY2FjaGVTbmFwc2hvdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNuYXBzaG90Q2FjaGVkP3ZvaWQgMDoodGhpcy5jb250cm9sbGVyLmNhY2hlU25hcHNob3QoKSx0aGlzLnNuYXBzaG90Q2FjaGVkPSEwKX0sci5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNhbmNlbFJlbmRlcigpLHRoaXMuZnJhbWU9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlLmZyYW1lPW51bGwsdC5jYWxsKGUpfX0odGhpcykpfSxyLnByb3RvdHlwZS5jYW5jZWxSZW5kZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mcmFtZT9jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmZyYW1lKTp2b2lkIDB9LHJ9KCl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbih0LGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KGUsYXJndW1lbnRzKX19O3QuQ29udHJvbGxlcj1mdW5jdGlvbigpe2Z1bmN0aW9uIHIoKXt0aGlzLmNsaWNrQnViYmxlZD1lKHRoaXMuY2xpY2tCdWJibGVkLHRoaXMpLHRoaXMuY2xpY2tDYXB0dXJlZD1lKHRoaXMuY2xpY2tDYXB0dXJlZCx0aGlzKSx0aGlzLnBhZ2VMb2FkZWQ9ZSh0aGlzLnBhZ2VMb2FkZWQsdGhpcyksdGhpcy5oaXN0b3J5PW5ldyB0Lkhpc3RvcnkodGhpcyksdGhpcy52aWV3PW5ldyB0LlZpZXcodGhpcyksdGhpcy5zY3JvbGxNYW5hZ2VyPW5ldyB0LlNjcm9sbE1hbmFnZXIodGhpcyksdGhpcy5yZXN0b3JhdGlvbkRhdGE9e30sdGhpcy5jbGVhckNhY2hlKCl9cmV0dXJuIHIucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKCl7cmV0dXJuIHQuc3VwcG9ydGVkJiYhdGhpcy5zdGFydGVkPyhhZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLmNsaWNrQ2FwdHVyZWQsITApLGFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsdGhpcy5wYWdlTG9hZGVkLCExKSx0aGlzLnNjcm9sbE1hbmFnZXIuc3RhcnQoKSx0aGlzLnN0YXJ0SGlzdG9yeSgpLHRoaXMuc3RhcnRlZD0hMCx0aGlzLmVuYWJsZWQ9ITApOnZvaWQgMH0sci5wcm90b3R5cGUuZGlzYWJsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuYWJsZWQ9ITF9LHIucHJvdG90eXBlLnN0b3A9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGFydGVkPyhyZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLmNsaWNrQ2FwdHVyZWQsITApLHJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsdGhpcy5wYWdlTG9hZGVkLCExKSx0aGlzLnNjcm9sbE1hbmFnZXIuc3RvcCgpLHRoaXMuc3RvcEhpc3RvcnkoKSx0aGlzLnN0YXJ0ZWQ9ITEpOnZvaWQgMH0sci5wcm90b3R5cGUuY2xlYXJDYWNoZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNhY2hlPW5ldyB0LlNuYXBzaG90Q2FjaGUoMTApfSxyLnByb3RvdHlwZS52aXNpdD1mdW5jdGlvbihlLHIpe3ZhciBuLG87cmV0dXJuIG51bGw9PXImJihyPXt9KSxlPXQuTG9jYXRpb24ud3JhcChlKSx0aGlzLmFwcGxpY2F0aW9uQWxsb3dzVmlzaXRpbmdMb2NhdGlvbihlKT90aGlzLmxvY2F0aW9uSXNWaXNpdGFibGUoZSk/KG49bnVsbCE9KG89ci5hY3Rpb24pP286XCJhZHZhbmNlXCIsdGhpcy5hZGFwdGVyLnZpc2l0UHJvcG9zZWRUb0xvY2F0aW9uV2l0aEFjdGlvbihlLG4pKTp3aW5kb3cubG9jYXRpb249ZTp2b2lkIDB9LHIucHJvdG90eXBlLnN0YXJ0VmlzaXRUb0xvY2F0aW9uV2l0aEFjdGlvbj1mdW5jdGlvbihlLHIsbil7dmFyIG87cmV0dXJuIHQuc3VwcG9ydGVkPyhvPXRoaXMuZ2V0UmVzdG9yYXRpb25EYXRhRm9ySWRlbnRpZmllcihuKSx0aGlzLnN0YXJ0VmlzaXQoZSxyLHtyZXN0b3JhdGlvbkRhdGE6b30pKTp3aW5kb3cubG9jYXRpb249ZX0sci5wcm90b3R5cGUuc3RhcnRIaXN0b3J5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubG9jYXRpb249dC5Mb2NhdGlvbi53cmFwKHdpbmRvdy5sb2NhdGlvbiksdGhpcy5yZXN0b3JhdGlvbklkZW50aWZpZXI9dC51dWlkKCksdGhpcy5oaXN0b3J5LnN0YXJ0KCksdGhpcy5oaXN0b3J5LnJlcGxhY2UodGhpcy5sb2NhdGlvbix0aGlzLnJlc3RvcmF0aW9uSWRlbnRpZmllcil9LHIucHJvdG90eXBlLnN0b3BIaXN0b3J5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGlzdG9yeS5zdG9wKCl9LHIucHJvdG90eXBlLnB1c2hIaXN0b3J5V2l0aExvY2F0aW9uQW5kUmVzdG9yYXRpb25JZGVudGlmaWVyPWZ1bmN0aW9uKGUscil7cmV0dXJuIHRoaXMucmVzdG9yYXRpb25JZGVudGlmaWVyPXIsdGhpcy5sb2NhdGlvbj10LkxvY2F0aW9uLndyYXAoZSksdGhpcy5oaXN0b3J5LnB1c2godGhpcy5sb2NhdGlvbix0aGlzLnJlc3RvcmF0aW9uSWRlbnRpZmllcil9LHIucHJvdG90eXBlLnJlcGxhY2VIaXN0b3J5V2l0aExvY2F0aW9uQW5kUmVzdG9yYXRpb25JZGVudGlmaWVyPWZ1bmN0aW9uKGUscil7cmV0dXJuIHRoaXMucmVzdG9yYXRpb25JZGVudGlmaWVyPXIsdGhpcy5sb2NhdGlvbj10LkxvY2F0aW9uLndyYXAoZSksdGhpcy5oaXN0b3J5LnJlcGxhY2UodGhpcy5sb2NhdGlvbix0aGlzLnJlc3RvcmF0aW9uSWRlbnRpZmllcil9LHIucHJvdG90eXBlLmhpc3RvcnlQb3BwZWRUb0xvY2F0aW9uV2l0aFJlc3RvcmF0aW9uSWRlbnRpZmllcj1mdW5jdGlvbihlLHIpe3ZhciBuO3JldHVybiB0aGlzLnJlc3RvcmF0aW9uSWRlbnRpZmllcj1yLHRoaXMuZW5hYmxlZD8obj10aGlzLmdldFJlc3RvcmF0aW9uRGF0YUZvcklkZW50aWZpZXIodGhpcy5yZXN0b3JhdGlvbklkZW50aWZpZXIpLHRoaXMuc3RhcnRWaXNpdChlLFwicmVzdG9yZVwiLHtyZXN0b3JhdGlvbklkZW50aWZpZXI6dGhpcy5yZXN0b3JhdGlvbklkZW50aWZpZXIscmVzdG9yYXRpb25EYXRhOm4saGlzdG9yeUNoYW5nZWQ6ITB9KSx0aGlzLmxvY2F0aW9uPXQuTG9jYXRpb24ud3JhcChlKSk6dGhpcy5hZGFwdGVyLnBhZ2VJbnZhbGlkYXRlZCgpfSxyLnByb3RvdHlwZS5nZXRDYWNoZWRTbmFwc2hvdEZvckxvY2F0aW9uPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBlPXRoaXMuY2FjaGUuZ2V0KHQpLGU/ZS5jbG9uZSgpOnZvaWQgMH0sci5wcm90b3R5cGUuc2hvdWxkQ2FjaGVTbmFwc2hvdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZXcuZ2V0U25hcHNob3QoKS5pc0NhY2hlYWJsZSgpfSxyLnByb3RvdHlwZS5jYWNoZVNuYXBzaG90PWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIHRoaXMuc2hvdWxkQ2FjaGVTbmFwc2hvdCgpPyh0aGlzLm5vdGlmeUFwcGxpY2F0aW9uQmVmb3JlQ2FjaGluZ1NuYXBzaG90KCksdD10aGlzLnZpZXcuZ2V0U25hcHNob3QoKSx0aGlzLmNhY2hlLnB1dCh0aGlzLmxhc3RSZW5kZXJlZExvY2F0aW9uLHQuY2xvbmUoKSkpOnZvaWQgMH0sci5wcm90b3R5cGUuc2Nyb2xsVG9BbmNob3I9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuKGU9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodCkpP3RoaXMuc2Nyb2xsVG9FbGVtZW50KGUpOnRoaXMuc2Nyb2xsVG9Qb3NpdGlvbih7eDowLHk6MH0pfSxyLnByb3RvdHlwZS5zY3JvbGxUb0VsZW1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc2Nyb2xsTWFuYWdlci5zY3JvbGxUb0VsZW1lbnQodCl9LHIucHJvdG90eXBlLnNjcm9sbFRvUG9zaXRpb249ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc2Nyb2xsTWFuYWdlci5zY3JvbGxUb1Bvc2l0aW9uKHQpfSxyLnByb3RvdHlwZS5zY3JvbGxQb3NpdGlvbkNoYW5nZWQ9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIGU9dGhpcy5nZXRDdXJyZW50UmVzdG9yYXRpb25EYXRhKCksZS5zY3JvbGxQb3NpdGlvbj10fSxyLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy52aWV3LnJlbmRlcih0LGUpfSxyLnByb3RvdHlwZS52aWV3SW52YWxpZGF0ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hZGFwdGVyLnBhZ2VJbnZhbGlkYXRlZCgpfSxyLnByb3RvdHlwZS52aWV3V2lsbFJlbmRlcj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ub3RpZnlBcHBsaWNhdGlvbkJlZm9yZVJlbmRlcih0KX0sci5wcm90b3R5cGUudmlld1JlbmRlcmVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGFzdFJlbmRlcmVkTG9jYXRpb249dGhpcy5jdXJyZW50VmlzaXQubG9jYXRpb24sdGhpcy5ub3RpZnlBcHBsaWNhdGlvbkFmdGVyUmVuZGVyKCl9LHIucHJvdG90eXBlLnBhZ2VMb2FkZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sYXN0UmVuZGVyZWRMb2NhdGlvbj10aGlzLmxvY2F0aW9uLHRoaXMubm90aWZ5QXBwbGljYXRpb25BZnRlclBhZ2VMb2FkKCl9LHIucHJvdG90eXBlLmNsaWNrQ2FwdHVyZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5jbGlja0J1YmJsZWQsITEpLGFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMuY2xpY2tCdWJibGVkLCExKX0sci5wcm90b3R5cGUuY2xpY2tCdWJibGVkPWZ1bmN0aW9uKHQpe3ZhciBlLHIsbjtyZXR1cm4gdGhpcy5lbmFibGVkJiZ0aGlzLmNsaWNrRXZlbnRJc1NpZ25pZmljYW50KHQpJiYocj10aGlzLmdldFZpc2l0YWJsZUxpbmtGb3JOb2RlKHQudGFyZ2V0KSkmJihuPXRoaXMuZ2V0VmlzaXRhYmxlTG9jYXRpb25Gb3JMaW5rKHIpKSYmdGhpcy5hcHBsaWNhdGlvbkFsbG93c0ZvbGxvd2luZ0xpbmtUb0xvY2F0aW9uKHIsbik/KHQucHJldmVudERlZmF1bHQoKSxlPXRoaXMuZ2V0QWN0aW9uRm9yTGluayhyKSx0aGlzLnZpc2l0KG4se2FjdGlvbjplfSkpOnZvaWQgMH0sci5wcm90b3R5cGUuYXBwbGljYXRpb25BbGxvd3NGb2xsb3dpbmdMaW5rVG9Mb2NhdGlvbj1mdW5jdGlvbih0LGUpe3ZhciByO3JldHVybiByPXRoaXMubm90aWZ5QXBwbGljYXRpb25BZnRlckNsaWNraW5nTGlua1RvTG9jYXRpb24odCxlKSwhci5kZWZhdWx0UHJldmVudGVkfSxyLnByb3RvdHlwZS5hcHBsaWNhdGlvbkFsbG93c1Zpc2l0aW5nTG9jYXRpb249ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIGU9dGhpcy5ub3RpZnlBcHBsaWNhdGlvbkJlZm9yZVZpc2l0aW5nTG9jYXRpb24odCksIWUuZGVmYXVsdFByZXZlbnRlZH0sci5wcm90b3R5cGUubm90aWZ5QXBwbGljYXRpb25BZnRlckNsaWNraW5nTGlua1RvTG9jYXRpb249ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5kaXNwYXRjaChcInR1cmJvbGlua3M6Y2xpY2tcIix7dGFyZ2V0OmUsZGF0YTp7dXJsOnIuYWJzb2x1dGVVUkx9LGNhbmNlbGFibGU6ITB9KX0sci5wcm90b3R5cGUubm90aWZ5QXBwbGljYXRpb25CZWZvcmVWaXNpdGluZ0xvY2F0aW9uPWZ1bmN0aW9uKGUpe3JldHVybiB0LmRpc3BhdGNoKFwidHVyYm9saW5rczpiZWZvcmUtdmlzaXRcIix7ZGF0YTp7dXJsOmUuYWJzb2x1dGVVUkx9LGNhbmNlbGFibGU6ITB9KX0sci5wcm90b3R5cGUubm90aWZ5QXBwbGljYXRpb25BZnRlclZpc2l0aW5nTG9jYXRpb249ZnVuY3Rpb24oZSl7cmV0dXJuIHQuZGlzcGF0Y2goXCJ0dXJib2xpbmtzOnZpc2l0XCIse2RhdGE6e3VybDplLmFic29sdXRlVVJMfX0pfSxyLnByb3RvdHlwZS5ub3RpZnlBcHBsaWNhdGlvbkJlZm9yZUNhY2hpbmdTbmFwc2hvdD1mdW5jdGlvbigpe3JldHVybiB0LmRpc3BhdGNoKFwidHVyYm9saW5rczpiZWZvcmUtY2FjaGVcIil9LHIucHJvdG90eXBlLm5vdGlmeUFwcGxpY2F0aW9uQmVmb3JlUmVuZGVyPWZ1bmN0aW9uKGUpe1xuXHRyZXR1cm4gdC5kaXNwYXRjaChcInR1cmJvbGlua3M6YmVmb3JlLXJlbmRlclwiLHtkYXRhOntuZXdCb2R5OmV9fSl9LHIucHJvdG90eXBlLm5vdGlmeUFwcGxpY2F0aW9uQWZ0ZXJSZW5kZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXNwYXRjaChcInR1cmJvbGlua3M6cmVuZGVyXCIpfSxyLnByb3RvdHlwZS5ub3RpZnlBcHBsaWNhdGlvbkFmdGVyUGFnZUxvYWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWUmJihlPXt9KSx0LmRpc3BhdGNoKFwidHVyYm9saW5rczpsb2FkXCIse2RhdGE6e3VybDp0aGlzLmxvY2F0aW9uLmFic29sdXRlVVJMLHRpbWluZzplfX0pfSxyLnByb3RvdHlwZS5zdGFydFZpc2l0PWZ1bmN0aW9uKHQsZSxyKXt2YXIgbjtyZXR1cm4gbnVsbCE9KG49dGhpcy5jdXJyZW50VmlzaXQpJiZuLmNhbmNlbCgpLHRoaXMuY3VycmVudFZpc2l0PXRoaXMuY3JlYXRlVmlzaXQodCxlLHIpLHRoaXMuY3VycmVudFZpc2l0LnN0YXJ0KCksdGhpcy5ub3RpZnlBcHBsaWNhdGlvbkFmdGVyVmlzaXRpbmdMb2NhdGlvbih0KX0sci5wcm90b3R5cGUuY3JlYXRlVmlzaXQ9ZnVuY3Rpb24oZSxyLG4pe3ZhciBvLGkscyxhLHU7cmV0dXJuIGk9bnVsbCE9bj9uOnt9LGE9aS5yZXN0b3JhdGlvbklkZW50aWZpZXIscz1pLnJlc3RvcmF0aW9uRGF0YSxvPWkuaGlzdG9yeUNoYW5nZWQsdT1uZXcgdC5WaXNpdCh0aGlzLGUsciksdS5yZXN0b3JhdGlvbklkZW50aWZpZXI9bnVsbCE9YT9hOnQudXVpZCgpLHUucmVzdG9yYXRpb25EYXRhPXQuY29weU9iamVjdChzKSx1Lmhpc3RvcnlDaGFuZ2VkPW8sdS5yZWZlcnJlcj10aGlzLmxvY2F0aW9uLHV9LHIucHJvdG90eXBlLnZpc2l0Q29tcGxldGVkPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vdGlmeUFwcGxpY2F0aW9uQWZ0ZXJQYWdlTG9hZCh0LmdldFRpbWluZ01ldHJpY3MoKSl9LHIucHJvdG90eXBlLmNsaWNrRXZlbnRJc1NpZ25pZmljYW50PWZ1bmN0aW9uKHQpe3JldHVybiEodC5kZWZhdWx0UHJldmVudGVkfHx0LnRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZXx8dC53aGljaD4xfHx0LmFsdEtleXx8dC5jdHJsS2V5fHx0Lm1ldGFLZXl8fHQuc2hpZnRLZXkpfSxyLnByb3RvdHlwZS5nZXRWaXNpdGFibGVMaW5rRm9yTm9kZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5ub2RlSXNWaXNpdGFibGUoZSk/dC5jbG9zZXN0KGUsXCJhW2hyZWZdOm5vdChbdGFyZ2V0XSk6bm90KFtkb3dubG9hZF0pXCIpOnZvaWQgMH0sci5wcm90b3R5cGUuZ2V0VmlzaXRhYmxlTG9jYXRpb25Gb3JMaW5rPWZ1bmN0aW9uKGUpe3ZhciByO3JldHVybiByPW5ldyB0LkxvY2F0aW9uKGUuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSksdGhpcy5sb2NhdGlvbklzVmlzaXRhYmxlKHIpP3I6dm9pZCAwfSxyLnByb3RvdHlwZS5nZXRBY3Rpb25Gb3JMaW5rPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBudWxsIT0oZT10LmdldEF0dHJpYnV0ZShcImRhdGEtdHVyYm9saW5rcy1hY3Rpb25cIikpP2U6XCJhZHZhbmNlXCJ9LHIucHJvdG90eXBlLm5vZGVJc1Zpc2l0YWJsZT1mdW5jdGlvbihlKXt2YXIgcjtyZXR1cm4ocj10LmNsb3Nlc3QoZSxcIltkYXRhLXR1cmJvbGlua3NdXCIpKT9cImZhbHNlXCIhPT1yLmdldEF0dHJpYnV0ZShcImRhdGEtdHVyYm9saW5rc1wiKTohMH0sci5wcm90b3R5cGUubG9jYXRpb25Jc1Zpc2l0YWJsZT1mdW5jdGlvbih0KXtyZXR1cm4gdC5pc1ByZWZpeGVkQnkodGhpcy52aWV3LmdldFJvb3RMb2NhdGlvbigpKSYmdC5pc0hUTUwoKX0sci5wcm90b3R5cGUuZ2V0Q3VycmVudFJlc3RvcmF0aW9uRGF0YT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFJlc3RvcmF0aW9uRGF0YUZvcklkZW50aWZpZXIodGhpcy5yZXN0b3JhdGlvbklkZW50aWZpZXIpfSxyLnByb3RvdHlwZS5nZXRSZXN0b3JhdGlvbkRhdGFGb3JJZGVudGlmaWVyPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBudWxsIT0oZT10aGlzLnJlc3RvcmF0aW9uRGF0YSlbdF0/ZVt0XTplW3RdPXt9fSxyfSgpfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7dmFyIGUscixuO3Quc3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gcigpPyhudWxsPT10LmNvbnRyb2xsZXImJih0LmNvbnRyb2xsZXI9ZSgpKSx0LmNvbnRyb2xsZXIuc3RhcnQoKSk6dm9pZCAwfSxyPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PXdpbmRvdy5UdXJib2xpbmtzJiYod2luZG93LlR1cmJvbGlua3M9dCksbigpfSxlPWZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIGU9bmV3IHQuQ29udHJvbGxlcixlLmFkYXB0ZXI9bmV3IHQuQnJvd3NlckFkYXB0ZXIoZSksZX0sbj1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cuVHVyYm9saW5rcz09PXR9LG4oKSYmdC5zdGFydCgpfS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzKSxcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz10OlwiZnVuY3Rpb25cIj09XCJmdW5jdGlvblwiJiZfX3dlYnBhY2tfcmVxdWlyZV9fKDkpJiYhKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9ICh0KSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAodHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gJ2Z1bmN0aW9uJyA/IChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fLCBleHBvcnRzLCBtb2R1bGUpKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKX0pLmNhbGwodGhpcyk7XG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihfX3dlYnBhY2tfYW1kX29wdGlvbnNfXykge21vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XHJcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCB7fSkpXG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gdmVuZG9yLmpzIiwiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXTtcbiBcdHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGNodW5rSWRzLCBtb3JlTW9kdWxlcykge1xuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIGNhbGxiYWNrcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pXG4gXHRcdFx0XHRjYWxsYmFja3MucHVzaC5hcHBseShjYWxsYmFja3MsIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSk7XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oY2h1bmtJZHMsIG1vcmVNb2R1bGVzKTtcbiBcdFx0d2hpbGUoY2FsbGJhY2tzLmxlbmd0aClcbiBcdFx0XHRjYWxsYmFja3Muc2hpZnQoKS5jYWxsKG51bGwsIF9fd2VicGFja19yZXF1aXJlX18pO1xuIFx0XHRpZihtb3JlTW9kdWxlc1swXSkge1xuIFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbMF0gPSAwO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gXCIwXCIgbWVhbnMgXCJhbHJlYWR5IGxvYWRlZFwiXG4gXHQvLyBBcnJheSBtZWFucyBcImxvYWRpbmdcIiwgYXJyYXkgY29udGFpbnMgY2FsbGJhY2tzXG4gXHR2YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuIFx0XHQxOjBcbiBcdH07XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuIFx0Ly8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuIFx0Ly8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSBmdW5jdGlvbiByZXF1aXJlRW5zdXJlKGNodW5rSWQsIGNhbGxiYWNrKSB7XG4gXHRcdC8vIFwiMFwiIGlzIHRoZSBzaWduYWwgZm9yIFwiYWxyZWFkeSBsb2FkZWRcIlxuIFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPT09IDApXG4gXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwobnVsbCwgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gYW4gYXJyYXkgbWVhbnMgXCJjdXJyZW50bHkgbG9hZGluZ1wiLlxuIFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZCkge1xuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXS5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW2NhbGxiYWNrXTtcbiBcdFx0XHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gXHRcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuIFx0XHRcdHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gXHRcdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuIFx0XHRcdHNjcmlwdC5hc3luYyA9IHRydWU7XG5cbiBcdFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5hcHAuanNcIjtcbiBcdFx0XHRoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMTI1ZTNkMGRjNjg5MmY1Yzc0YWQiLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIlRldGhlclwiXSA9IHJlcXVpcmUoXCItIS9Vc2Vycy9yYWZhZWxub3dyb3Rlay9Eb2N1bWVudHMvUHJvamVrdGUvQmV5b25kL1dvcmtzcGFjZS9iZXlvbmQvd3AtY29udGVudC90aGVtZXMva2lja3MtYXBwL25vZGVfbW9kdWxlcy9leHBvc2UtbG9hZGVyL2luZGV4LmpzPyQhLi90ZXRoZXIuanNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3RldGhlci9kaXN0L2pzL3RldGhlci5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIiRcIl0gPSByZXF1aXJlKFwiLSEuL3RldGhlci5qc1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXhwb3NlLWxvYWRlcj8kIS4vfi90ZXRoZXIvZGlzdC9qcy90ZXRoZXIuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiLyohIHRldGhlciAxLjQuMCAqL1xuXG4oZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuVGV0aGVyID0gZmFjdG9yeSgpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG52YXIgVGV0aGVyQmFzZSA9IHVuZGVmaW5lZDtcbmlmICh0eXBlb2YgVGV0aGVyQmFzZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgVGV0aGVyQmFzZSA9IHsgbW9kdWxlczogW10gfTtcbn1cblxudmFyIHplcm9FbGVtZW50ID0gbnVsbDtcblxuLy8gU2FtZSBhcyBuYXRpdmUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0LCBleGNlcHQgaXQgdGFrZXMgaW50byBhY2NvdW50IHBhcmVudCA8ZnJhbWU+IG9mZnNldHNcbi8vIGlmIHRoZSBlbGVtZW50IGxpZXMgd2l0aGluIGEgbmVzdGVkIGRvY3VtZW50ICg8ZnJhbWU+IG9yIDxpZnJhbWU+LWxpa2UpLlxuZnVuY3Rpb24gZ2V0QWN0dWFsQm91bmRpbmdDbGllbnRSZWN0KG5vZGUpIHtcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgLy8gVGhlIG9yaWdpbmFsIG9iamVjdCByZXR1cm5lZCBieSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgaW1tdXRhYmxlLCBzbyB3ZSBjbG9uZSBpdFxuICAvLyBXZSBjYW4ndCB1c2UgZXh0ZW5kIGJlY2F1c2UgdGhlIHByb3BlcnRpZXMgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIG9iamVjdCBieSBoYXNPd25Qcm9wZXJ0eSBpbiBJRTlcbiAgdmFyIHJlY3QgPSB7fTtcbiAgZm9yICh2YXIgayBpbiBib3VuZGluZ1JlY3QpIHtcbiAgICByZWN0W2tdID0gYm91bmRpbmdSZWN0W2tdO1xuICB9XG5cbiAgaWYgKG5vZGUub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQpIHtcbiAgICB2YXIgX2ZyYW1lRWxlbWVudCA9IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5mcmFtZUVsZW1lbnQ7XG4gICAgaWYgKF9mcmFtZUVsZW1lbnQpIHtcbiAgICAgIHZhciBmcmFtZVJlY3QgPSBnZXRBY3R1YWxCb3VuZGluZ0NsaWVudFJlY3QoX2ZyYW1lRWxlbWVudCk7XG4gICAgICByZWN0LnRvcCArPSBmcmFtZVJlY3QudG9wO1xuICAgICAgcmVjdC5ib3R0b20gKz0gZnJhbWVSZWN0LnRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBmcmFtZVJlY3QubGVmdDtcbiAgICAgIHJlY3QucmlnaHQgKz0gZnJhbWVSZWN0LmxlZnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudHMoZWwpIHtcbiAgLy8gSW4gZmlyZWZveCBpZiB0aGUgZWwgaXMgaW5zaWRlIGFuIGlmcmFtZSB3aXRoIGRpc3BsYXk6IG5vbmU7IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCkgd2lsbCByZXR1cm4gbnVsbDtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gIHZhciBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCkgfHwge307XG4gIHZhciBwb3NpdGlvbiA9IGNvbXB1dGVkU3R5bGUucG9zaXRpb247XG4gIHZhciBwYXJlbnRzID0gW107XG5cbiAgaWYgKHBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIFtlbF07XG4gIH1cblxuICB2YXIgcGFyZW50ID0gZWw7XG4gIHdoaWxlICgocGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGUpICYmIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgPT09IDEpIHtcbiAgICB2YXIgc3R5bGUgPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpO1xuICAgIH0gY2F0Y2ggKGVycikge31cblxuICAgIGlmICh0eXBlb2Ygc3R5bGUgPT09ICd1bmRlZmluZWQnIHx8IHN0eWxlID09PSBudWxsKSB7XG4gICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIHJldHVybiBwYXJlbnRzO1xuICAgIH1cblxuICAgIHZhciBfc3R5bGUgPSBzdHlsZTtcbiAgICB2YXIgb3ZlcmZsb3cgPSBfc3R5bGUub3ZlcmZsb3c7XG4gICAgdmFyIG92ZXJmbG93WCA9IF9zdHlsZS5vdmVyZmxvd1g7XG4gICAgdmFyIG92ZXJmbG93WSA9IF9zdHlsZS5vdmVyZmxvd1k7XG5cbiAgICBpZiAoLyhhdXRvfHNjcm9sbCkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgICBpZiAocG9zaXRpb24gIT09ICdhYnNvbHV0ZScgfHwgWydyZWxhdGl2ZScsICdhYnNvbHV0ZScsICdmaXhlZCddLmluZGV4T2Yoc3R5bGUucG9zaXRpb24pID49IDApIHtcbiAgICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcGFyZW50cy5wdXNoKGVsLm93bmVyRG9jdW1lbnQuYm9keSk7XG5cbiAgLy8gSWYgdGhlIG5vZGUgaXMgd2l0aGluIGEgZnJhbWUsIGFjY291bnQgZm9yIHRoZSBwYXJlbnQgd2luZG93IHNjcm9sbFxuICBpZiAoZWwub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQpIHtcbiAgICBwYXJlbnRzLnB1c2goZWwub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldyk7XG4gIH1cblxuICByZXR1cm4gcGFyZW50cztcbn1cblxudmFyIHVuaXF1ZUlkID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKytpZDtcbiAgfTtcbn0pKCk7XG5cbnZhciB6ZXJvUG9zQ2FjaGUgPSB7fTtcbnZhciBnZXRPcmlnaW4gPSBmdW5jdGlvbiBnZXRPcmlnaW4oKSB7XG4gIC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB1bmZvcnR1bmF0ZWx5IHRvbyBhY2N1cmF0ZS4gIEl0IGludHJvZHVjZXMgYSBwaXhlbCBvciB0d28gb2ZcbiAgLy8gaml0dGVyIGFzIHRoZSB1c2VyIHNjcm9sbHMgdGhhdCBtZXNzZXMgd2l0aCBvdXIgYWJpbGl0eSB0byBkZXRlY3QgaWYgdHdvIHBvc2l0aW9uc1xuICAvLyBhcmUgZXF1aXZpbGFudCBvciBub3QuICBXZSBwbGFjZSBhbiBlbGVtZW50IGF0IHRoZSB0b3AgbGVmdCBvZiB0aGUgcGFnZSB0aGF0IHdpbGxcbiAgLy8gZ2V0IHRoZSBzYW1lIGppdHRlciwgc28gd2UgY2FuIGNhbmNlbCB0aGUgdHdvIG91dC5cbiAgdmFyIG5vZGUgPSB6ZXJvRWxlbWVudDtcbiAgaWYgKCFub2RlIHx8ICFkb2N1bWVudC5ib2R5LmNvbnRhaW5zKG5vZGUpKSB7XG4gICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXRldGhlci1pZCcsIHVuaXF1ZUlkKCkpO1xuICAgIGV4dGVuZChub2RlLnN0eWxlLCB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9KTtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9kZSk7XG5cbiAgICB6ZXJvRWxlbWVudCA9IG5vZGU7XG4gIH1cblxuICB2YXIgaWQgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS10ZXRoZXItaWQnKTtcbiAgaWYgKHR5cGVvZiB6ZXJvUG9zQ2FjaGVbaWRdID09PSAndW5kZWZpbmVkJykge1xuICAgIHplcm9Qb3NDYWNoZVtpZF0gPSBnZXRBY3R1YWxCb3VuZGluZ0NsaWVudFJlY3Qobm9kZSk7XG5cbiAgICAvLyBDbGVhciB0aGUgY2FjaGUgd2hlbiB0aGlzIHBvc2l0aW9uIGNhbGwgaXMgZG9uZVxuICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlbGV0ZSB6ZXJvUG9zQ2FjaGVbaWRdO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHplcm9Qb3NDYWNoZVtpZF07XG59O1xuXG5mdW5jdGlvbiByZW1vdmVVdGlsRWxlbWVudHMoKSB7XG4gIGlmICh6ZXJvRWxlbWVudCkge1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoemVyb0VsZW1lbnQpO1xuICB9XG4gIHplcm9FbGVtZW50ID0gbnVsbDtcbn07XG5cbmZ1bmN0aW9uIGdldEJvdW5kcyhlbCkge1xuICB2YXIgZG9jID0gdW5kZWZpbmVkO1xuICBpZiAoZWwgPT09IGRvY3VtZW50KSB7XG4gICAgZG9jID0gZG9jdW1lbnQ7XG4gICAgZWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgZG9jID0gZWwub3duZXJEb2N1bWVudDtcbiAgfVxuXG4gIHZhciBkb2NFbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgdmFyIGJveCA9IGdldEFjdHVhbEJvdW5kaW5nQ2xpZW50UmVjdChlbCk7XG5cbiAgdmFyIG9yaWdpbiA9IGdldE9yaWdpbigpO1xuXG4gIGJveC50b3AgLT0gb3JpZ2luLnRvcDtcbiAgYm94LmxlZnQgLT0gb3JpZ2luLmxlZnQ7XG5cbiAgaWYgKHR5cGVvZiBib3gud2lkdGggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYm94LndpZHRoID0gZG9jdW1lbnQuYm9keS5zY3JvbGxXaWR0aCAtIGJveC5sZWZ0IC0gYm94LnJpZ2h0O1xuICB9XG4gIGlmICh0eXBlb2YgYm94LmhlaWdodCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBib3guaGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQgLSBib3gudG9wIC0gYm94LmJvdHRvbTtcbiAgfVxuXG4gIGJveC50b3AgPSBib3gudG9wIC0gZG9jRWwuY2xpZW50VG9wO1xuICBib3gubGVmdCA9IGJveC5sZWZ0IC0gZG9jRWwuY2xpZW50TGVmdDtcbiAgYm94LnJpZ2h0ID0gZG9jLmJvZHkuY2xpZW50V2lkdGggLSBib3gud2lkdGggLSBib3gubGVmdDtcbiAgYm94LmJvdHRvbSA9IGRvYy5ib2R5LmNsaWVudEhlaWdodCAtIGJveC5oZWlnaHQgLSBib3gudG9wO1xuXG4gIHJldHVybiBib3g7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbCkge1xuICByZXR1cm4gZWwub2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxudmFyIF9zY3JvbGxCYXJTaXplID0gbnVsbDtcbmZ1bmN0aW9uIGdldFNjcm9sbEJhclNpemUoKSB7XG4gIGlmIChfc2Nyb2xsQmFyU2l6ZSkge1xuICAgIHJldHVybiBfc2Nyb2xsQmFyU2l6ZTtcbiAgfVxuICB2YXIgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgaW5uZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gIGlubmVyLnN0eWxlLmhlaWdodCA9ICcyMDBweCc7XG5cbiAgdmFyIG91dGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGV4dGVuZChvdXRlci5zdHlsZSwge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICB3aWR0aDogJzIwMHB4JyxcbiAgICBoZWlnaHQ6ICcxNTBweCcsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH0pO1xuXG4gIG91dGVyLmFwcGVuZENoaWxkKGlubmVyKTtcblxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG91dGVyKTtcblxuICB2YXIgd2lkdGhDb250YWluZWQgPSBpbm5lci5vZmZzZXRXaWR0aDtcbiAgb3V0ZXIuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgdmFyIHdpZHRoU2Nyb2xsID0gaW5uZXIub2Zmc2V0V2lkdGg7XG5cbiAgaWYgKHdpZHRoQ29udGFpbmVkID09PSB3aWR0aFNjcm9sbCkge1xuICAgIHdpZHRoU2Nyb2xsID0gb3V0ZXIuY2xpZW50V2lkdGg7XG4gIH1cblxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG91dGVyKTtcblxuICB2YXIgd2lkdGggPSB3aWR0aENvbnRhaW5lZCAtIHdpZHRoU2Nyb2xsO1xuXG4gIF9zY3JvbGxCYXJTaXplID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogd2lkdGggfTtcbiAgcmV0dXJuIF9zY3JvbGxCYXJTaXplO1xufVxuXG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gIHZhciBvdXQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblxuICB2YXIgYXJncyA9IFtdO1xuXG4gIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG5cbiAgYXJncy5zbGljZSgxKS5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAob2JqKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmICgoe30pLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgb3V0W2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBlbC5jbGFzc0xpc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbmFtZS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNscykge1xuICAgICAgaWYgKGNscy50cmltKCkpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJyhefCApJyArIG5hbWUuc3BsaXQoJyAnKS5qb2luKCd8JykgKyAnKCB8JCknLCAnZ2knKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gZ2V0Q2xhc3NOYW1lKGVsKS5yZXBsYWNlKHJlZ2V4LCAnICcpO1xuICAgIHNldENsYXNzTmFtZShlbCwgY2xhc3NOYW1lKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRDbGFzcyhlbCwgbmFtZSkge1xuICBpZiAodHlwZW9mIGVsLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBuYW1lLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7XG4gICAgICBpZiAoY2xzLnRyaW0oKSkge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmVtb3ZlQ2xhc3MoZWwsIG5hbWUpO1xuICAgIHZhciBjbHMgPSBnZXRDbGFzc05hbWUoZWwpICsgKCcgJyArIG5hbWUpO1xuICAgIHNldENsYXNzTmFtZShlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbCwgbmFtZSkge1xuICBpZiAodHlwZW9mIGVsLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpO1xuICB9XG4gIHZhciBjbGFzc05hbWUgPSBnZXRDbGFzc05hbWUoZWwpO1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnKF58ICknICsgbmFtZSArICcoIHwkKScsICdnaScpLnRlc3QoY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKGVsKSB7XG4gIC8vIENhbid0IHVzZSBqdXN0IFNWR0FuaW1hdGVkU3RyaW5nIGhlcmUgc2luY2Ugbm9kZXMgd2l0aGluIGEgRnJhbWUgaW4gSUUgaGF2ZVxuICAvLyBjb21wbGV0ZWx5IHNlcGFyYXRlbHkgU1ZHQW5pbWF0ZWRTdHJpbmcgYmFzZSBjbGFzc2VzXG4gIGlmIChlbC5jbGFzc05hbWUgaW5zdGFuY2VvZiBlbC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LlNWR0FuaW1hdGVkU3RyaW5nKSB7XG4gICAgcmV0dXJuIGVsLmNsYXNzTmFtZS5iYXNlVmFsO1xuICB9XG4gIHJldHVybiBlbC5jbGFzc05hbWU7XG59XG5cbmZ1bmN0aW9uIHNldENsYXNzTmFtZShlbCwgY2xhc3NOYW1lKSB7XG4gIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDbGFzc2VzKGVsLCBhZGQsIGFsbCkge1xuICAvLyBPZiB0aGUgc2V0IG9mICdhbGwnIGNsYXNzZXMsIHdlIG5lZWQgdGhlICdhZGQnIGNsYXNzZXMsIGFuZCBvbmx5IHRoZVxuICAvLyAnYWRkJyBjbGFzc2VzIHRvIGJlIHNldC5cbiAgYWxsLmZvckVhY2goZnVuY3Rpb24gKGNscykge1xuICAgIGlmIChhZGQuaW5kZXhPZihjbHMpID09PSAtMSAmJiBoYXNDbGFzcyhlbCwgY2xzKSkge1xuICAgICAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG4gICAgfVxuICB9KTtcblxuICBhZGQuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7XG4gICAgaWYgKCFoYXNDbGFzcyhlbCwgY2xzKSkge1xuICAgICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRlZmVycmVkID0gW107XG5cbnZhciBkZWZlciA9IGZ1bmN0aW9uIGRlZmVyKGZuKSB7XG4gIGRlZmVycmVkLnB1c2goZm4pO1xufTtcblxudmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gIHZhciBmbiA9IHVuZGVmaW5lZDtcbiAgd2hpbGUgKGZuID0gZGVmZXJyZWQucG9wKCkpIHtcbiAgICBmbigpO1xuICB9XG59O1xuXG52YXIgRXZlbnRlZCA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEV2ZW50ZWQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50ZWQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEV2ZW50ZWQsIFt7XG4gICAga2V5OiAnb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgaGFuZGxlciwgY3R4KSB7XG4gICAgICB2YXIgb25jZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMyB8fCBhcmd1bWVudHNbM10gPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogYXJndW1lbnRzWzNdO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuYmluZGluZ3MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ3MgPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kaW5nc1tldmVudF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ3NbZXZlbnRdID0gW107XG4gICAgICB9XG4gICAgICB0aGlzLmJpbmRpbmdzW2V2ZW50XS5wdXNoKHsgaGFuZGxlcjogaGFuZGxlciwgY3R4OiBjdHgsIG9uY2U6IG9uY2UgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb25jZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGhhbmRsZXIsIGN0eCkge1xuICAgICAgdGhpcy5vbihldmVudCwgaGFuZGxlciwgY3R4LCB0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvZmYnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvZmYoZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kaW5ncyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHRoaXMuYmluZGluZ3NbZXZlbnRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuYmluZGluZ3NbZXZlbnRdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMuYmluZGluZ3NbZXZlbnRdLmxlbmd0aCkge1xuICAgICAgICAgIGlmICh0aGlzLmJpbmRpbmdzW2V2ZW50XVtpXS5oYW5kbGVyID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdzW2V2ZW50XS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICsraTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0cmlnZ2VyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJpZ2dlcihldmVudCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRpbmdzICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmJpbmRpbmdzW2V2ZW50XSkge1xuICAgICAgICB2YXIgaSA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoaSA8IHRoaXMuYmluZGluZ3NbZXZlbnRdLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBfYmluZGluZ3MkZXZlbnQkaSA9IHRoaXMuYmluZGluZ3NbZXZlbnRdW2ldO1xuICAgICAgICAgIHZhciBoYW5kbGVyID0gX2JpbmRpbmdzJGV2ZW50JGkuaGFuZGxlcjtcbiAgICAgICAgICB2YXIgY3R4ID0gX2JpbmRpbmdzJGV2ZW50JGkuY3R4O1xuICAgICAgICAgIHZhciBvbmNlID0gX2JpbmRpbmdzJGV2ZW50JGkub25jZTtcblxuICAgICAgICAgIHZhciBjb250ZXh0ID0gY3R4O1xuICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGhhbmRsZXIuYXBwbHkoY29udGV4dCwgYXJncyk7XG5cbiAgICAgICAgICBpZiAob25jZSkge1xuICAgICAgICAgICAgdGhpcy5iaW5kaW5nc1tldmVudF0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICArK2k7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEV2ZW50ZWQ7XG59KSgpO1xuXG5UZXRoZXJCYXNlLlV0aWxzID0ge1xuICBnZXRBY3R1YWxCb3VuZGluZ0NsaWVudFJlY3Q6IGdldEFjdHVhbEJvdW5kaW5nQ2xpZW50UmVjdCxcbiAgZ2V0U2Nyb2xsUGFyZW50czogZ2V0U2Nyb2xsUGFyZW50cyxcbiAgZ2V0Qm91bmRzOiBnZXRCb3VuZHMsXG4gIGdldE9mZnNldFBhcmVudDogZ2V0T2Zmc2V0UGFyZW50LFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgYWRkQ2xhc3M6IGFkZENsYXNzLFxuICByZW1vdmVDbGFzczogcmVtb3ZlQ2xhc3MsXG4gIGhhc0NsYXNzOiBoYXNDbGFzcyxcbiAgdXBkYXRlQ2xhc3NlczogdXBkYXRlQ2xhc3NlcyxcbiAgZGVmZXI6IGRlZmVyLFxuICBmbHVzaDogZmx1c2gsXG4gIHVuaXF1ZUlkOiB1bmlxdWVJZCxcbiAgRXZlbnRlZDogRXZlbnRlZCxcbiAgZ2V0U2Nyb2xsQmFyU2l6ZTogZ2V0U2Nyb2xsQmFyU2l6ZSxcbiAgcmVtb3ZlVXRpbEVsZW1lbnRzOiByZW1vdmVVdGlsRWxlbWVudHNcbn07XG4vKiBnbG9iYWxzIFRldGhlckJhc2UsIHBlcmZvcm1hbmNlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5ID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbJ3JldHVybiddKSBfaVsncmV0dXJuJ10oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZScpOyB9IH07IH0pKCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94NiwgX3g3LCBfeDgpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3g2LCBwcm9wZXJ0eSA9IF94NywgcmVjZWl2ZXIgPSBfeDg7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3g2ID0gcGFyZW50OyBfeDcgPSBwcm9wZXJ0eTsgX3g4ID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmlmICh0eXBlb2YgVGV0aGVyQmFzZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBpbmNsdWRlIHRoZSB1dGlscy5qcyBmaWxlIGJlZm9yZSB0ZXRoZXIuanMnKTtcbn1cblxudmFyIF9UZXRoZXJCYXNlJFV0aWxzID0gVGV0aGVyQmFzZS5VdGlscztcbnZhciBnZXRTY3JvbGxQYXJlbnRzID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0U2Nyb2xsUGFyZW50cztcbnZhciBnZXRCb3VuZHMgPSBfVGV0aGVyQmFzZSRVdGlscy5nZXRCb3VuZHM7XG52YXIgZ2V0T2Zmc2V0UGFyZW50ID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0T2Zmc2V0UGFyZW50O1xudmFyIGV4dGVuZCA9IF9UZXRoZXJCYXNlJFV0aWxzLmV4dGVuZDtcbnZhciBhZGRDbGFzcyA9IF9UZXRoZXJCYXNlJFV0aWxzLmFkZENsYXNzO1xudmFyIHJlbW92ZUNsYXNzID0gX1RldGhlckJhc2UkVXRpbHMucmVtb3ZlQ2xhc3M7XG52YXIgdXBkYXRlQ2xhc3NlcyA9IF9UZXRoZXJCYXNlJFV0aWxzLnVwZGF0ZUNsYXNzZXM7XG52YXIgZGVmZXIgPSBfVGV0aGVyQmFzZSRVdGlscy5kZWZlcjtcbnZhciBmbHVzaCA9IF9UZXRoZXJCYXNlJFV0aWxzLmZsdXNoO1xudmFyIGdldFNjcm9sbEJhclNpemUgPSBfVGV0aGVyQmFzZSRVdGlscy5nZXRTY3JvbGxCYXJTaXplO1xudmFyIHJlbW92ZVV0aWxFbGVtZW50cyA9IF9UZXRoZXJCYXNlJFV0aWxzLnJlbW92ZVV0aWxFbGVtZW50cztcblxuZnVuY3Rpb24gd2l0aGluKGEsIGIpIHtcbiAgdmFyIGRpZmYgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyAxIDogYXJndW1lbnRzWzJdO1xuXG4gIHJldHVybiBhICsgZGlmZiA+PSBiICYmIGIgPj0gYSAtIGRpZmY7XG59XG5cbnZhciB0cmFuc2Zvcm1LZXkgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICB2YXIgdHJhbnNmb3JtcyA9IFsndHJhbnNmb3JtJywgJ1dlYmtpdFRyYW5zZm9ybScsICdPVHJhbnNmb3JtJywgJ01velRyYW5zZm9ybScsICdtc1RyYW5zZm9ybSddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zZm9ybXMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIga2V5ID0gdHJhbnNmb3Jtc1tpXTtcbiAgICBpZiAoZWwuc3R5bGVba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxufSkoKTtcblxudmFyIHRldGhlcnMgPSBbXTtcblxudmFyIHBvc2l0aW9uID0gZnVuY3Rpb24gcG9zaXRpb24oKSB7XG4gIHRldGhlcnMuZm9yRWFjaChmdW5jdGlvbiAodGV0aGVyKSB7XG4gICAgdGV0aGVyLnBvc2l0aW9uKGZhbHNlKTtcbiAgfSk7XG4gIGZsdXNoKCk7XG59O1xuXG5mdW5jdGlvbiBub3coKSB7XG4gIGlmICh0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuICB9XG4gIHJldHVybiArbmV3IERhdGUoKTtcbn1cblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxhc3RDYWxsID0gbnVsbDtcbiAgdmFyIGxhc3REdXJhdGlvbiA9IG51bGw7XG4gIHZhciBwZW5kaW5nVGltZW91dCA9IG51bGw7XG5cbiAgdmFyIHRpY2sgPSBmdW5jdGlvbiB0aWNrKCkge1xuICAgIGlmICh0eXBlb2YgbGFzdER1cmF0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBsYXN0RHVyYXRpb24gPiAxNikge1xuICAgICAgLy8gV2Ugdm9sdW50YXJpbHkgdGhyb3R0bGUgb3Vyc2VsdmVzIGlmIHdlIGNhbid0IG1hbmFnZSA2MGZwc1xuICAgICAgbGFzdER1cmF0aW9uID0gTWF0aC5taW4obGFzdER1cmF0aW9uIC0gMTYsIDI1MCk7XG5cbiAgICAgIC8vIEp1c3QgaW4gY2FzZSB0aGlzIGlzIHRoZSBsYXN0IGV2ZW50LCByZW1lbWJlciB0byBwb3NpdGlvbiBqdXN0IG9uY2UgbW9yZVxuICAgICAgcGVuZGluZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KHRpY2ssIDI1MCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBsYXN0Q2FsbCAhPT0gJ3VuZGVmaW5lZCcgJiYgbm93KCkgLSBsYXN0Q2FsbCA8IDEwKSB7XG4gICAgICAvLyBTb21lIGJyb3dzZXJzIGNhbGwgZXZlbnRzIGEgbGl0dGxlIHRvbyBmcmVxdWVudGx5LCByZWZ1c2UgdG8gcnVuIG1vcmUgdGhhbiBpcyByZWFzb25hYmxlXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHBlbmRpbmdUaW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dChwZW5kaW5nVGltZW91dCk7XG4gICAgICBwZW5kaW5nVGltZW91dCA9IG51bGw7XG4gICAgfVxuXG4gICAgbGFzdENhbGwgPSBub3coKTtcbiAgICBwb3NpdGlvbigpO1xuICAgIGxhc3REdXJhdGlvbiA9IG5vdygpIC0gbGFzdENhbGw7XG4gIH07XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBbJ3Jlc2l6ZScsICdzY3JvbGwnLCAndG91Y2htb3ZlJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCB0aWNrKTtcbiAgICB9KTtcbiAgfVxufSkoKTtcblxudmFyIE1JUlJPUl9MUiA9IHtcbiAgY2VudGVyOiAnY2VudGVyJyxcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0J1xufTtcblxudmFyIE1JUlJPUl9UQiA9IHtcbiAgbWlkZGxlOiAnbWlkZGxlJyxcbiAgdG9wOiAnYm90dG9tJyxcbiAgYm90dG9tOiAndG9wJ1xufTtcblxudmFyIE9GRlNFVF9NQVAgPSB7XG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgbWlkZGxlOiAnNTAlJyxcbiAgY2VudGVyOiAnNTAlJyxcbiAgYm90dG9tOiAnMTAwJScsXG4gIHJpZ2h0OiAnMTAwJSdcbn07XG5cbnZhciBhdXRvVG9GaXhlZEF0dGFjaG1lbnQgPSBmdW5jdGlvbiBhdXRvVG9GaXhlZEF0dGFjaG1lbnQoYXR0YWNobWVudCwgcmVsYXRpdmVUb0F0dGFjaG1lbnQpIHtcbiAgdmFyIGxlZnQgPSBhdHRhY2htZW50LmxlZnQ7XG4gIHZhciB0b3AgPSBhdHRhY2htZW50LnRvcDtcblxuICBpZiAobGVmdCA9PT0gJ2F1dG8nKSB7XG4gICAgbGVmdCA9IE1JUlJPUl9MUltyZWxhdGl2ZVRvQXR0YWNobWVudC5sZWZ0XTtcbiAgfVxuXG4gIGlmICh0b3AgPT09ICdhdXRvJykge1xuICAgIHRvcCA9IE1JUlJPUl9UQltyZWxhdGl2ZVRvQXR0YWNobWVudC50b3BdO1xuICB9XG5cbiAgcmV0dXJuIHsgbGVmdDogbGVmdCwgdG9wOiB0b3AgfTtcbn07XG5cbnZhciBhdHRhY2htZW50VG9PZmZzZXQgPSBmdW5jdGlvbiBhdHRhY2htZW50VG9PZmZzZXQoYXR0YWNobWVudCkge1xuICB2YXIgbGVmdCA9IGF0dGFjaG1lbnQubGVmdDtcbiAgdmFyIHRvcCA9IGF0dGFjaG1lbnQudG9wO1xuXG4gIGlmICh0eXBlb2YgT0ZGU0VUX01BUFthdHRhY2htZW50LmxlZnRdICE9PSAndW5kZWZpbmVkJykge1xuICAgIGxlZnQgPSBPRkZTRVRfTUFQW2F0dGFjaG1lbnQubGVmdF07XG4gIH1cblxuICBpZiAodHlwZW9mIE9GRlNFVF9NQVBbYXR0YWNobWVudC50b3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRvcCA9IE9GRlNFVF9NQVBbYXR0YWNobWVudC50b3BdO1xuICB9XG5cbiAgcmV0dXJuIHsgbGVmdDogbGVmdCwgdG9wOiB0b3AgfTtcbn07XG5cbmZ1bmN0aW9uIGFkZE9mZnNldCgpIHtcbiAgdmFyIG91dCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG9mZnNldHMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBvZmZzZXRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgb2Zmc2V0cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIHRvcCA9IF9yZWYudG9wO1xuICAgIHZhciBsZWZ0ID0gX3JlZi5sZWZ0O1xuXG4gICAgaWYgKHR5cGVvZiB0b3AgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0b3AgPSBwYXJzZUZsb2F0KHRvcCwgMTApO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGxlZnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZWZ0ID0gcGFyc2VGbG9hdChsZWZ0LCAxMCk7XG4gICAgfVxuXG4gICAgb3V0LnRvcCArPSB0b3A7XG4gICAgb3V0LmxlZnQgKz0gbGVmdDtcbiAgfSk7XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0VG9QeChvZmZzZXQsIHNpemUpIHtcbiAgaWYgKHR5cGVvZiBvZmZzZXQubGVmdCA9PT0gJ3N0cmluZycgJiYgb2Zmc2V0LmxlZnQuaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgIG9mZnNldC5sZWZ0ID0gcGFyc2VGbG9hdChvZmZzZXQubGVmdCwgMTApIC8gMTAwICogc2l6ZS53aWR0aDtcbiAgfVxuICBpZiAodHlwZW9mIG9mZnNldC50b3AgPT09ICdzdHJpbmcnICYmIG9mZnNldC50b3AuaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgIG9mZnNldC50b3AgPSBwYXJzZUZsb2F0KG9mZnNldC50b3AsIDEwKSAvIDEwMCAqIHNpemUuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxudmFyIHBhcnNlT2Zmc2V0ID0gZnVuY3Rpb24gcGFyc2VPZmZzZXQodmFsdWUpIHtcbiAgdmFyIF92YWx1ZSRzcGxpdCA9IHZhbHVlLnNwbGl0KCcgJyk7XG5cbiAgdmFyIF92YWx1ZSRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfdmFsdWUkc3BsaXQsIDIpO1xuXG4gIHZhciB0b3AgPSBfdmFsdWUkc3BsaXQyWzBdO1xuICB2YXIgbGVmdCA9IF92YWx1ZSRzcGxpdDJbMV07XG5cbiAgcmV0dXJuIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfTtcbn07XG52YXIgcGFyc2VBdHRhY2htZW50ID0gcGFyc2VPZmZzZXQ7XG5cbnZhciBUZXRoZXJDbGFzcyA9IChmdW5jdGlvbiAoX0V2ZW50ZWQpIHtcbiAgX2luaGVyaXRzKFRldGhlckNsYXNzLCBfRXZlbnRlZCk7XG5cbiAgZnVuY3Rpb24gVGV0aGVyQ2xhc3Mob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV0aGVyQ2xhc3MpO1xuXG4gICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGV0aGVyQ2xhc3MucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi5iaW5kKHRoaXMpO1xuXG4gICAgdGV0aGVycy5wdXNoKHRoaXMpO1xuXG4gICAgdGhpcy5oaXN0b3J5ID0gW107XG5cbiAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucywgZmFsc2UpO1xuXG4gICAgVGV0aGVyQmFzZS5tb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZSkge1xuICAgICAgaWYgKHR5cGVvZiBtb2R1bGUuaW5pdGlhbGl6ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbW9kdWxlLmluaXRpYWxpemUuY2FsbChfdGhpcyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnBvc2l0aW9uKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGV0aGVyQ2xhc3MsIFt7XG4gICAga2V5OiAnZ2V0Q2xhc3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDbGFzcygpIHtcbiAgICAgIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyAnJyA6IGFyZ3VtZW50c1swXTtcbiAgICAgIHZhciBjbGFzc2VzID0gdGhpcy5vcHRpb25zLmNsYXNzZXM7XG5cbiAgICAgIGlmICh0eXBlb2YgY2xhc3NlcyAhPT0gJ3VuZGVmaW5lZCcgJiYgY2xhc3Nlc1trZXldKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY2xhc3Nlc1trZXldO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuY2xhc3NQcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGFzc1ByZWZpeCArICctJyArIGtleTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0T3B0aW9ucycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBwb3MgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB0cnVlIDogYXJndW1lbnRzWzFdO1xuXG4gICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgIG9mZnNldDogJzAgMCcsXG4gICAgICAgIHRhcmdldE9mZnNldDogJzAgMCcsXG4gICAgICAgIHRhcmdldEF0dGFjaG1lbnQ6ICdhdXRvIGF1dG8nLFxuICAgICAgICBjbGFzc1ByZWZpeDogJ3RldGhlcidcbiAgICAgIH07XG5cbiAgICAgIHRoaXMub3B0aW9ucyA9IGV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAgIHZhciBfb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIHZhciBlbGVtZW50ID0gX29wdGlvbnMuZWxlbWVudDtcbiAgICAgIHZhciB0YXJnZXQgPSBfb3B0aW9ucy50YXJnZXQ7XG4gICAgICB2YXIgdGFyZ2V0TW9kaWZpZXIgPSBfb3B0aW9ucy50YXJnZXRNb2RpZmllcjtcblxuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgdGhpcy50YXJnZXRNb2RpZmllciA9IHRhcmdldE1vZGlmaWVyO1xuXG4gICAgICBpZiAodGhpcy50YXJnZXQgPT09ICd2aWV3cG9ydCcpIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICB0aGlzLnRhcmdldE1vZGlmaWVyID0gJ3Zpc2libGUnO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnRhcmdldCA9PT0gJ3Njcm9sbC1oYW5kbGUnKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgdGhpcy50YXJnZXRNb2RpZmllciA9ICdzY3JvbGwtaGFuZGxlJztcbiAgICAgIH1cblxuICAgICAgWydlbGVtZW50JywgJ3RhcmdldCddLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIF90aGlzMltrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGV0aGVyIEVycm9yOiBCb3RoIGVsZW1lbnQgYW5kIHRhcmdldCBtdXN0IGJlIGRlZmluZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgX3RoaXMyW2tleV0uanF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIF90aGlzMltrZXldID0gX3RoaXMyW2tleV1bMF07XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGlzMltrZXldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIF90aGlzMltrZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihfdGhpczJba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBhZGRDbGFzcyh0aGlzLmVsZW1lbnQsIHRoaXMuZ2V0Q2xhc3MoJ2VsZW1lbnQnKSk7XG4gICAgICBpZiAoISh0aGlzLm9wdGlvbnMuYWRkVGFyZ2V0Q2xhc3NlcyA9PT0gZmFsc2UpKSB7XG4gICAgICAgIGFkZENsYXNzKHRoaXMudGFyZ2V0LCB0aGlzLmdldENsYXNzKCd0YXJnZXQnKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmF0dGFjaG1lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXRoZXIgRXJyb3I6IFlvdSBtdXN0IHByb3ZpZGUgYW4gYXR0YWNobWVudCcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRhcmdldEF0dGFjaG1lbnQgPSBwYXJzZUF0dGFjaG1lbnQodGhpcy5vcHRpb25zLnRhcmdldEF0dGFjaG1lbnQpO1xuICAgICAgdGhpcy5hdHRhY2htZW50ID0gcGFyc2VBdHRhY2htZW50KHRoaXMub3B0aW9ucy5hdHRhY2htZW50KTtcbiAgICAgIHRoaXMub2Zmc2V0ID0gcGFyc2VPZmZzZXQodGhpcy5vcHRpb25zLm9mZnNldCk7XG4gICAgICB0aGlzLnRhcmdldE9mZnNldCA9IHBhcnNlT2Zmc2V0KHRoaXMub3B0aW9ucy50YXJnZXRPZmZzZXQpO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuc2Nyb2xsUGFyZW50cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnRhcmdldE1vZGlmaWVyID09PSAnc2Nyb2xsLWhhbmRsZScpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxQYXJlbnRzID0gW3RoaXMudGFyZ2V0XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsUGFyZW50cyA9IGdldFNjcm9sbFBhcmVudHModGhpcy50YXJnZXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoISh0aGlzLm9wdGlvbnMuZW5hYmxlZCA9PT0gZmFsc2UpKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlKHBvcyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VGFyZ2V0Qm91bmRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGFyZ2V0Qm91bmRzKCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhcmdldE1vZGlmaWVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodGhpcy50YXJnZXRNb2RpZmllciA9PT0gJ3Zpc2libGUnKSB7XG4gICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICByZXR1cm4geyB0b3A6IHBhZ2VZT2Zmc2V0LCBsZWZ0OiBwYWdlWE9mZnNldCwgaGVpZ2h0OiBpbm5lckhlaWdodCwgd2lkdGg6IGlubmVyV2lkdGggfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGJvdW5kcyA9IGdldEJvdW5kcyh0aGlzLnRhcmdldCk7XG5cbiAgICAgICAgICAgIHZhciBvdXQgPSB7XG4gICAgICAgICAgICAgIGhlaWdodDogYm91bmRzLmhlaWdodCxcbiAgICAgICAgICAgICAgd2lkdGg6IGJvdW5kcy53aWR0aCxcbiAgICAgICAgICAgICAgdG9wOiBib3VuZHMudG9wLFxuICAgICAgICAgICAgICBsZWZ0OiBib3VuZHMubGVmdFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgb3V0LmhlaWdodCA9IE1hdGgubWluKG91dC5oZWlnaHQsIGJvdW5kcy5oZWlnaHQgLSAocGFnZVlPZmZzZXQgLSBib3VuZHMudG9wKSk7XG4gICAgICAgICAgICBvdXQuaGVpZ2h0ID0gTWF0aC5taW4ob3V0LmhlaWdodCwgYm91bmRzLmhlaWdodCAtIChib3VuZHMudG9wICsgYm91bmRzLmhlaWdodCAtIChwYWdlWU9mZnNldCArIGlubmVySGVpZ2h0KSkpO1xuICAgICAgICAgICAgb3V0LmhlaWdodCA9IE1hdGgubWluKGlubmVySGVpZ2h0LCBvdXQuaGVpZ2h0KTtcbiAgICAgICAgICAgIG91dC5oZWlnaHQgLT0gMjtcblxuICAgICAgICAgICAgb3V0LndpZHRoID0gTWF0aC5taW4ob3V0LndpZHRoLCBib3VuZHMud2lkdGggLSAocGFnZVhPZmZzZXQgLSBib3VuZHMubGVmdCkpO1xuICAgICAgICAgICAgb3V0LndpZHRoID0gTWF0aC5taW4ob3V0LndpZHRoLCBib3VuZHMud2lkdGggLSAoYm91bmRzLmxlZnQgKyBib3VuZHMud2lkdGggLSAocGFnZVhPZmZzZXQgKyBpbm5lcldpZHRoKSkpO1xuICAgICAgICAgICAgb3V0LndpZHRoID0gTWF0aC5taW4oaW5uZXJXaWR0aCwgb3V0LndpZHRoKTtcbiAgICAgICAgICAgIG91dC53aWR0aCAtPSAyO1xuXG4gICAgICAgICAgICBpZiAob3V0LnRvcCA8IHBhZ2VZT2Zmc2V0KSB7XG4gICAgICAgICAgICAgIG91dC50b3AgPSBwYWdlWU9mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvdXQubGVmdCA8IHBhZ2VYT2Zmc2V0KSB7XG4gICAgICAgICAgICAgIG91dC5sZWZ0ID0gcGFnZVhPZmZzZXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGFyZ2V0TW9kaWZpZXIgPT09ICdzY3JvbGwtaGFuZGxlJykge1xuICAgICAgICAgIHZhciBib3VuZHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0O1xuICAgICAgICAgIGlmICh0YXJnZXQgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICAgICAgYm91bmRzID0ge1xuICAgICAgICAgICAgICBsZWZ0OiBwYWdlWE9mZnNldCxcbiAgICAgICAgICAgICAgdG9wOiBwYWdlWU9mZnNldCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBpbm5lckhlaWdodCxcbiAgICAgICAgICAgICAgd2lkdGg6IGlubmVyV2lkdGhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJvdW5kcyA9IGdldEJvdW5kcyh0YXJnZXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcblxuICAgICAgICAgIHZhciBoYXNCb3R0b21TY3JvbGwgPSB0YXJnZXQuc2Nyb2xsV2lkdGggPiB0YXJnZXQuY2xpZW50V2lkdGggfHwgW3N0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1hdLmluZGV4T2YoJ3Njcm9sbCcpID49IDAgfHwgdGhpcy50YXJnZXQgIT09IGRvY3VtZW50LmJvZHk7XG5cbiAgICAgICAgICB2YXIgc2Nyb2xsQm90dG9tID0gMDtcbiAgICAgICAgICBpZiAoaGFzQm90dG9tU2Nyb2xsKSB7XG4gICAgICAgICAgICBzY3JvbGxCb3R0b20gPSAxNTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgaGVpZ2h0ID0gYm91bmRzLmhlaWdodCAtIHBhcnNlRmxvYXQoc3R5bGUuYm9yZGVyVG9wV2lkdGgpIC0gcGFyc2VGbG9hdChzdHlsZS5ib3JkZXJCb3R0b21XaWR0aCkgLSBzY3JvbGxCb3R0b207XG5cbiAgICAgICAgICB2YXIgb3V0ID0ge1xuICAgICAgICAgICAgd2lkdGg6IDE1LFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKiAwLjk3NSAqIChoZWlnaHQgLyB0YXJnZXQuc2Nyb2xsSGVpZ2h0KSxcbiAgICAgICAgICAgIGxlZnQ6IGJvdW5kcy5sZWZ0ICsgYm91bmRzLndpZHRoIC0gcGFyc2VGbG9hdChzdHlsZS5ib3JkZXJMZWZ0V2lkdGgpIC0gMTVcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIGZpdEFkaiA9IDA7XG4gICAgICAgICAgaWYgKGhlaWdodCA8IDQwOCAmJiB0aGlzLnRhcmdldCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgZml0QWRqID0gLTAuMDAwMTEgKiBNYXRoLnBvdyhoZWlnaHQsIDIpIC0gMC4wMDcyNyAqIGhlaWdodCArIDIyLjU4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLnRhcmdldCAhPT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgb3V0LmhlaWdodCA9IE1hdGgubWF4KG91dC5oZWlnaHQsIDI0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc2Nyb2xsUGVyY2VudGFnZSA9IHRoaXMudGFyZ2V0LnNjcm9sbFRvcCAvICh0YXJnZXQuc2Nyb2xsSGVpZ2h0IC0gaGVpZ2h0KTtcbiAgICAgICAgICBvdXQudG9wID0gc2Nyb2xsUGVyY2VudGFnZSAqIChoZWlnaHQgLSBvdXQuaGVpZ2h0IC0gZml0QWRqKSArIGJvdW5kcy50b3AgKyBwYXJzZUZsb2F0KHN0eWxlLmJvcmRlclRvcFdpZHRoKTtcblxuICAgICAgICAgIGlmICh0aGlzLnRhcmdldCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgb3V0LmhlaWdodCA9IE1hdGgubWF4KG91dC5oZWlnaHQsIDI0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ2V0Qm91bmRzKHRoaXMudGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbGVhckNhY2hlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJDYWNoZSgpIHtcbiAgICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2FjaGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYWNoZShrLCBnZXR0ZXIpIHtcbiAgICAgIC8vIE1vcmUgdGhhbiBvbmUgbW9kdWxlIHdpbGwgb2Z0ZW4gbmVlZCB0aGUgc2FtZSBET00gaW5mbywgc29cbiAgICAgIC8vIHdlIGtlZXAgYSBjYWNoZSB3aGljaCBpcyBjbGVhcmVkIG9uIGVhY2ggcG9zaXRpb24gY2FsbFxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jYWNoZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jYWNoZVtrXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5fY2FjaGVba10gPSBnZXR0ZXIuY2FsbCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlW2tdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgcG9zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGFyZ3VtZW50c1swXTtcblxuICAgICAgaWYgKCEodGhpcy5vcHRpb25zLmFkZFRhcmdldENsYXNzZXMgPT09IGZhbHNlKSkge1xuICAgICAgICBhZGRDbGFzcyh0aGlzLnRhcmdldCwgdGhpcy5nZXRDbGFzcygnZW5hYmxlZCcpKTtcbiAgICAgIH1cbiAgICAgIGFkZENsYXNzKHRoaXMuZWxlbWVudCwgdGhpcy5nZXRDbGFzcygnZW5hYmxlZCcpKTtcbiAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgIHRoaXMuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudCAhPT0gX3RoaXMzLnRhcmdldC5vd25lckRvY3VtZW50KSB7XG4gICAgICAgICAgcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF90aGlzMy5wb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAocG9zKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNhYmxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICByZW1vdmVDbGFzcyh0aGlzLnRhcmdldCwgdGhpcy5nZXRDbGFzcygnZW5hYmxlZCcpKTtcbiAgICAgIHJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudCwgdGhpcy5nZXRDbGFzcygnZW5hYmxlZCcpKTtcbiAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuc2Nyb2xsUGFyZW50cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICAgIHBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBfdGhpczQucG9zaXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB0aGlzLmRpc2FibGUoKTtcblxuICAgICAgdGV0aGVycy5mb3JFYWNoKGZ1bmN0aW9uICh0ZXRoZXIsIGkpIHtcbiAgICAgICAgaWYgKHRldGhlciA9PT0gX3RoaXM1KSB7XG4gICAgICAgICAgdGV0aGVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZW1vdmUgYW55IGVsZW1lbnRzIHdlIHdlcmUgdXNpbmcgZm9yIGNvbnZlbmllbmNlIGZyb20gdGhlIERPTVxuICAgICAgaWYgKHRldGhlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJlbW92ZVV0aWxFbGVtZW50cygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZUF0dGFjaENsYXNzZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVBdHRhY2hDbGFzc2VzKGVsZW1lbnRBdHRhY2gsIHRhcmdldEF0dGFjaCkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIGVsZW1lbnRBdHRhY2ggPSBlbGVtZW50QXR0YWNoIHx8IHRoaXMuYXR0YWNobWVudDtcbiAgICAgIHRhcmdldEF0dGFjaCA9IHRhcmdldEF0dGFjaCB8fCB0aGlzLnRhcmdldEF0dGFjaG1lbnQ7XG4gICAgICB2YXIgc2lkZXMgPSBbJ2xlZnQnLCAndG9wJywgJ2JvdHRvbScsICdyaWdodCcsICdtaWRkbGUnLCAnY2VudGVyJ107XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fYWRkQXR0YWNoQ2xhc3NlcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5fYWRkQXR0YWNoQ2xhc3Nlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gdXBkYXRlQXR0YWNoQ2xhc3NlcyBjYW4gYmUgY2FsbGVkIG1vcmUgdGhhbiBvbmNlIGluIGEgcG9zaXRpb24gY2FsbCwgc29cbiAgICAgICAgLy8gd2UgbmVlZCB0byBjbGVhbiB1cCBhZnRlciBvdXJzZWx2ZXMgc3VjaCB0aGF0IHdoZW4gdGhlIGxhc3QgZGVmZXIgZ2V0c1xuICAgICAgICAvLyByYW4gaXQgZG9lc24ndCBhZGQgYW55IGV4dHJhIGNsYXNzZXMgZnJvbSBwcmV2aW91cyBjYWxscy5cbiAgICAgICAgdGhpcy5fYWRkQXR0YWNoQ2xhc3Nlcy5zcGxpY2UoMCwgdGhpcy5fYWRkQXR0YWNoQ2xhc3Nlcy5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuX2FkZEF0dGFjaENsYXNzZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuX2FkZEF0dGFjaENsYXNzZXMgPSBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhZGQgPSB0aGlzLl9hZGRBdHRhY2hDbGFzc2VzO1xuXG4gICAgICBpZiAoZWxlbWVudEF0dGFjaC50b3ApIHtcbiAgICAgICAgYWRkLnB1c2godGhpcy5nZXRDbGFzcygnZWxlbWVudC1hdHRhY2hlZCcpICsgJy0nICsgZWxlbWVudEF0dGFjaC50b3ApO1xuICAgICAgfVxuICAgICAgaWYgKGVsZW1lbnRBdHRhY2gubGVmdCkge1xuICAgICAgICBhZGQucHVzaCh0aGlzLmdldENsYXNzKCdlbGVtZW50LWF0dGFjaGVkJykgKyAnLScgKyBlbGVtZW50QXR0YWNoLmxlZnQpO1xuICAgICAgfVxuICAgICAgaWYgKHRhcmdldEF0dGFjaC50b3ApIHtcbiAgICAgICAgYWRkLnB1c2godGhpcy5nZXRDbGFzcygndGFyZ2V0LWF0dGFjaGVkJykgKyAnLScgKyB0YXJnZXRBdHRhY2gudG9wKTtcbiAgICAgIH1cbiAgICAgIGlmICh0YXJnZXRBdHRhY2gubGVmdCkge1xuICAgICAgICBhZGQucHVzaCh0aGlzLmdldENsYXNzKCd0YXJnZXQtYXR0YWNoZWQnKSArICctJyArIHRhcmdldEF0dGFjaC5sZWZ0KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFsbCA9IFtdO1xuICAgICAgc2lkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgICBhbGwucHVzaChfdGhpczYuZ2V0Q2xhc3MoJ2VsZW1lbnQtYXR0YWNoZWQnKSArICctJyArIHNpZGUpO1xuICAgICAgICBhbGwucHVzaChfdGhpczYuZ2V0Q2xhc3MoJ3RhcmdldC1hdHRhY2hlZCcpICsgJy0nICsgc2lkZSk7XG4gICAgICB9KTtcblxuICAgICAgZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoISh0eXBlb2YgX3RoaXM2Ll9hZGRBdHRhY2hDbGFzc2VzICE9PSAndW5kZWZpbmVkJykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVDbGFzc2VzKF90aGlzNi5lbGVtZW50LCBfdGhpczYuX2FkZEF0dGFjaENsYXNzZXMsIGFsbCk7XG4gICAgICAgIGlmICghKF90aGlzNi5vcHRpb25zLmFkZFRhcmdldENsYXNzZXMgPT09IGZhbHNlKSkge1xuICAgICAgICAgIHVwZGF0ZUNsYXNzZXMoX3RoaXM2LnRhcmdldCwgX3RoaXM2Ll9hZGRBdHRhY2hDbGFzc2VzLCBhbGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIF90aGlzNi5fYWRkQXR0YWNoQ2xhc3NlcztcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Bvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zaXRpb24oKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdmFyIGZsdXNoQ2hhbmdlcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhcmd1bWVudHNbMF07XG5cbiAgICAgIC8vIGZsdXNoQ2hhbmdlcyBjb21taXRzIHRoZSBjaGFuZ2VzIGltbWVkaWF0ZWx5LCBsZWF2ZSB0cnVlIHVubGVzcyB5b3UgYXJlIHBvc2l0aW9uaW5nIG11bHRpcGxlXG4gICAgICAvLyB0ZXRoZXJzIChpbiB3aGljaCBjYXNlIGNhbGwgVGV0aGVyLlV0aWxzLmZsdXNoIHlvdXJzZWxmIHdoZW4geW91J3JlIGRvbmUpXG5cbiAgICAgIGlmICghdGhpcy5lbmFibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jbGVhckNhY2hlKCk7XG5cbiAgICAgIC8vIFR1cm4gJ2F1dG8nIGF0dGFjaG1lbnRzIGludG8gdGhlIGFwcHJvcHJpYXRlIGNvcm5lciBvciBlZGdlXG4gICAgICB2YXIgdGFyZ2V0QXR0YWNobWVudCA9IGF1dG9Ub0ZpeGVkQXR0YWNobWVudCh0aGlzLnRhcmdldEF0dGFjaG1lbnQsIHRoaXMuYXR0YWNobWVudCk7XG5cbiAgICAgIHRoaXMudXBkYXRlQXR0YWNoQ2xhc3Nlcyh0aGlzLmF0dGFjaG1lbnQsIHRhcmdldEF0dGFjaG1lbnQpO1xuXG4gICAgICB2YXIgZWxlbWVudFBvcyA9IHRoaXMuY2FjaGUoJ2VsZW1lbnQtYm91bmRzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2V0Qm91bmRzKF90aGlzNy5lbGVtZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgd2lkdGggPSBlbGVtZW50UG9zLndpZHRoO1xuICAgICAgdmFyIGhlaWdodCA9IGVsZW1lbnRQb3MuaGVpZ2h0O1xuXG4gICAgICBpZiAod2lkdGggPT09IDAgJiYgaGVpZ2h0ID09PSAwICYmIHR5cGVvZiB0aGlzLmxhc3RTaXplICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgX2xhc3RTaXplID0gdGhpcy5sYXN0U2l6ZTtcblxuICAgICAgICAvLyBXZSBjYWNoZSB0aGUgaGVpZ2h0IGFuZCB3aWR0aCB0byBtYWtlIGl0IHBvc3NpYmxlIHRvIHBvc2l0aW9uIGVsZW1lbnRzIHRoYXQgYXJlXG4gICAgICAgIC8vIGdldHRpbmcgaGlkZGVuLlxuICAgICAgICB3aWR0aCA9IF9sYXN0U2l6ZS53aWR0aDtcbiAgICAgICAgaGVpZ2h0ID0gX2xhc3RTaXplLmhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGFzdFNpemUgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhcmdldFBvcyA9IHRoaXMuY2FjaGUoJ3RhcmdldC1ib3VuZHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczcuZ2V0VGFyZ2V0Qm91bmRzKCk7XG4gICAgICB9KTtcbiAgICAgIHZhciB0YXJnZXRTaXplID0gdGFyZ2V0UG9zO1xuXG4gICAgICAvLyBHZXQgYW4gYWN0dWFsIHB4IG9mZnNldCBmcm9tIHRoZSBhdHRhY2htZW50XG4gICAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0VG9QeChhdHRhY2htZW50VG9PZmZzZXQodGhpcy5hdHRhY2htZW50KSwgeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pO1xuICAgICAgdmFyIHRhcmdldE9mZnNldCA9IG9mZnNldFRvUHgoYXR0YWNobWVudFRvT2Zmc2V0KHRhcmdldEF0dGFjaG1lbnQpLCB0YXJnZXRTaXplKTtcblxuICAgICAgdmFyIG1hbnVhbE9mZnNldCA9IG9mZnNldFRvUHgodGhpcy5vZmZzZXQsIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9KTtcbiAgICAgIHZhciBtYW51YWxUYXJnZXRPZmZzZXQgPSBvZmZzZXRUb1B4KHRoaXMudGFyZ2V0T2Zmc2V0LCB0YXJnZXRTaXplKTtcblxuICAgICAgLy8gQWRkIHRoZSBtYW51YWxseSBwcm92aWRlZCBvZmZzZXRcbiAgICAgIG9mZnNldCA9IGFkZE9mZnNldChvZmZzZXQsIG1hbnVhbE9mZnNldCk7XG4gICAgICB0YXJnZXRPZmZzZXQgPSBhZGRPZmZzZXQodGFyZ2V0T2Zmc2V0LCBtYW51YWxUYXJnZXRPZmZzZXQpO1xuXG4gICAgICAvLyBJdCdzIG5vdyBvdXIgZ29hbCB0byBtYWtlIChlbGVtZW50IHBvc2l0aW9uICsgb2Zmc2V0KSA9PSAodGFyZ2V0IHBvc2l0aW9uICsgdGFyZ2V0IG9mZnNldClcbiAgICAgIHZhciBsZWZ0ID0gdGFyZ2V0UG9zLmxlZnQgKyB0YXJnZXRPZmZzZXQubGVmdCAtIG9mZnNldC5sZWZ0O1xuICAgICAgdmFyIHRvcCA9IHRhcmdldFBvcy50b3AgKyB0YXJnZXRPZmZzZXQudG9wIC0gb2Zmc2V0LnRvcDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBUZXRoZXJCYXNlLm1vZHVsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIF9tb2R1bGUyID0gVGV0aGVyQmFzZS5tb2R1bGVzW2ldO1xuICAgICAgICB2YXIgcmV0ID0gX21vZHVsZTIucG9zaXRpb24uY2FsbCh0aGlzLCB7XG4gICAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICB0YXJnZXRBdHRhY2htZW50OiB0YXJnZXRBdHRhY2htZW50LFxuICAgICAgICAgIHRhcmdldFBvczogdGFyZ2V0UG9zLFxuICAgICAgICAgIGVsZW1lbnRQb3M6IGVsZW1lbnRQb3MsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXQsXG4gICAgICAgICAgbWFudWFsT2Zmc2V0OiBtYW51YWxPZmZzZXQsXG4gICAgICAgICAgbWFudWFsVGFyZ2V0T2Zmc2V0OiBtYW51YWxUYXJnZXRPZmZzZXQsXG4gICAgICAgICAgc2Nyb2xsYmFyU2l6ZTogc2Nyb2xsYmFyU2l6ZSxcbiAgICAgICAgICBhdHRhY2htZW50OiB0aGlzLmF0dGFjaG1lbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJldCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHJldCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b3AgPSByZXQudG9wO1xuICAgICAgICAgIGxlZnQgPSByZXQubGVmdDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBXZSBkZXNjcmliZSB0aGUgcG9zaXRpb24gdGhyZWUgZGlmZmVyZW50IHdheXMgdG8gZ2l2ZSB0aGUgb3B0aW1pemVyXG4gICAgICAvLyBhIGNoYW5jZSB0byBkZWNpZGUgdGhlIGJlc3QgcG9zc2libGUgd2F5IHRvIHBvc2l0aW9uIHRoZSBlbGVtZW50XG4gICAgICAvLyB3aXRoIHRoZSBmZXdlc3QgcmVwYWludHMuXG4gICAgICB2YXIgbmV4dCA9IHtcbiAgICAgICAgLy8gSXQncyBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgcGFnZSAoYWJzb2x1dGUgcG9zaXRpb25pbmcgd2hlblxuICAgICAgICAvLyB0aGUgZWxlbWVudCBpcyBhIGNoaWxkIG9mIHRoZSBib2R5KVxuICAgICAgICBwYWdlOiB7XG4gICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgbGVmdDogbGVmdFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEl0J3MgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0IChmaXhlZCBwb3NpdGlvbmluZylcbiAgICAgICAgdmlld3BvcnQ6IHtcbiAgICAgICAgICB0b3A6IHRvcCAtIHBhZ2VZT2Zmc2V0LFxuICAgICAgICAgIGJvdHRvbTogcGFnZVlPZmZzZXQgLSB0b3AgLSBoZWlnaHQgKyBpbm5lckhlaWdodCxcbiAgICAgICAgICBsZWZ0OiBsZWZ0IC0gcGFnZVhPZmZzZXQsXG4gICAgICAgICAgcmlnaHQ6IHBhZ2VYT2Zmc2V0IC0gbGVmdCAtIHdpZHRoICsgaW5uZXJXaWR0aFxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgZG9jID0gdGhpcy50YXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgIHZhciB3aW4gPSBkb2MuZGVmYXVsdFZpZXc7XG5cbiAgICAgIHZhciBzY3JvbGxiYXJTaXplID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKHdpbi5pbm5lckhlaWdodCA+IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgIHNjcm9sbGJhclNpemUgPSB0aGlzLmNhY2hlKCdzY3JvbGxiYXItc2l6ZScsIGdldFNjcm9sbEJhclNpemUpO1xuICAgICAgICBuZXh0LnZpZXdwb3J0LmJvdHRvbSAtPSBzY3JvbGxiYXJTaXplLmhlaWdodDtcbiAgICAgIH1cblxuICAgICAgaWYgKHdpbi5pbm5lcldpZHRoID4gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCkge1xuICAgICAgICBzY3JvbGxiYXJTaXplID0gdGhpcy5jYWNoZSgnc2Nyb2xsYmFyLXNpemUnLCBnZXRTY3JvbGxCYXJTaXplKTtcbiAgICAgICAgbmV4dC52aWV3cG9ydC5yaWdodCAtPSBzY3JvbGxiYXJTaXplLndpZHRoO1xuICAgICAgfVxuXG4gICAgICBpZiAoWycnLCAnc3RhdGljJ10uaW5kZXhPZihkb2MuYm9keS5zdHlsZS5wb3NpdGlvbikgPT09IC0xIHx8IFsnJywgJ3N0YXRpYyddLmluZGV4T2YoZG9jLmJvZHkucGFyZW50RWxlbWVudC5zdHlsZS5wb3NpdGlvbikgPT09IC0xKSB7XG4gICAgICAgIC8vIEFic29sdXRlIHBvc2l0aW9uaW5nIGluIHRoZSBib2R5IHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhlIHBhZ2UsIG5vdCB0aGUgJ2luaXRpYWwgY29udGFpbmluZyBibG9jaydcbiAgICAgICAgbmV4dC5wYWdlLmJvdHRvbSA9IGRvYy5ib2R5LnNjcm9sbEhlaWdodCAtIHRvcCAtIGhlaWdodDtcbiAgICAgICAgbmV4dC5wYWdlLnJpZ2h0ID0gZG9jLmJvZHkuc2Nyb2xsV2lkdGggLSBsZWZ0IC0gd2lkdGg7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm9wdGltaXphdGlvbnMgIT09ICd1bmRlZmluZWQnICYmIHRoaXMub3B0aW9ucy5vcHRpbWl6YXRpb25zLm1vdmVFbGVtZW50ICE9PSBmYWxzZSAmJiAhKHR5cGVvZiB0aGlzLnRhcmdldE1vZGlmaWVyICE9PSAndW5kZWZpbmVkJykpIHtcbiAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgb2Zmc2V0UGFyZW50ID0gX3RoaXM3LmNhY2hlKCd0YXJnZXQtb2Zmc2V0cGFyZW50JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChfdGhpczcudGFyZ2V0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgb2Zmc2V0UG9zaXRpb24gPSBfdGhpczcuY2FjaGUoJ3RhcmdldC1vZmZzZXRwYXJlbnQtYm91bmRzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEJvdW5kcyhvZmZzZXRQYXJlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBvZmZzZXRQYXJlbnRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KTtcbiAgICAgICAgICB2YXIgb2Zmc2V0UGFyZW50U2l6ZSA9IG9mZnNldFBvc2l0aW9uO1xuXG4gICAgICAgICAgdmFyIG9mZnNldEJvcmRlciA9IHt9O1xuICAgICAgICAgIFsnVG9wJywgJ0xlZnQnLCAnQm90dG9tJywgJ1JpZ2h0J10uZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgICAgICAgb2Zmc2V0Qm9yZGVyW3NpZGUudG9Mb3dlckNhc2UoKV0gPSBwYXJzZUZsb2F0KG9mZnNldFBhcmVudFN0eWxlWydib3JkZXInICsgc2lkZSArICdXaWR0aCddKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIG9mZnNldFBvc2l0aW9uLnJpZ2h0ID0gZG9jLmJvZHkuc2Nyb2xsV2lkdGggLSBvZmZzZXRQb3NpdGlvbi5sZWZ0IC0gb2Zmc2V0UGFyZW50U2l6ZS53aWR0aCArIG9mZnNldEJvcmRlci5yaWdodDtcbiAgICAgICAgICBvZmZzZXRQb3NpdGlvbi5ib3R0b20gPSBkb2MuYm9keS5zY3JvbGxIZWlnaHQgLSBvZmZzZXRQb3NpdGlvbi50b3AgLSBvZmZzZXRQYXJlbnRTaXplLmhlaWdodCArIG9mZnNldEJvcmRlci5ib3R0b207XG5cbiAgICAgICAgICBpZiAobmV4dC5wYWdlLnRvcCA+PSBvZmZzZXRQb3NpdGlvbi50b3AgKyBvZmZzZXRCb3JkZXIudG9wICYmIG5leHQucGFnZS5ib3R0b20gPj0gb2Zmc2V0UG9zaXRpb24uYm90dG9tKSB7XG4gICAgICAgICAgICBpZiAobmV4dC5wYWdlLmxlZnQgPj0gb2Zmc2V0UG9zaXRpb24ubGVmdCArIG9mZnNldEJvcmRlci5sZWZ0ICYmIG5leHQucGFnZS5yaWdodCA+PSBvZmZzZXRQb3NpdGlvbi5yaWdodCkge1xuICAgICAgICAgICAgICAvLyBXZSdyZSB3aXRoaW4gdGhlIHZpc2libGUgcGFydCBvZiB0aGUgdGFyZ2V0J3Mgc2Nyb2xsIHBhcmVudFxuICAgICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gb2Zmc2V0UGFyZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgdmFyIHNjcm9sbExlZnQgPSBvZmZzZXRQYXJlbnQuc2Nyb2xsTGVmdDtcblxuICAgICAgICAgICAgICAvLyBJdCdzIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQncyBvZmZzZXQgcGFyZW50IChhYnNvbHV0ZSBwb3NpdGlvbmluZyB3aGVuXG4gICAgICAgICAgICAgIC8vIHRoZSBlbGVtZW50IGlzIG1vdmVkIHRvIGJlIGEgY2hpbGQgb2YgdGhlIHRhcmdldCdzIG9mZnNldCBwYXJlbnQpLlxuICAgICAgICAgICAgICBuZXh0Lm9mZnNldCA9IHtcbiAgICAgICAgICAgICAgICB0b3A6IG5leHQucGFnZS50b3AgLSBvZmZzZXRQb3NpdGlvbi50b3AgKyBzY3JvbGxUb3AgLSBvZmZzZXRCb3JkZXIudG9wLFxuICAgICAgICAgICAgICAgIGxlZnQ6IG5leHQucGFnZS5sZWZ0IC0gb2Zmc2V0UG9zaXRpb24ubGVmdCArIHNjcm9sbExlZnQgLSBvZmZzZXRCb3JkZXIubGVmdFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgY291bGQgYWxzbyB0cmF2ZWwgdXAgdGhlIERPTSBhbmQgdHJ5IGVhY2ggY29udGFpbmluZyBjb250ZXh0LCByYXRoZXIgdGhhbiBvbmx5XG4gICAgICAvLyBsb29raW5nIGF0IHRoZSBib2R5LCBidXQgd2UncmUgZ29ubmEgZ2V0IGRpbWluaXNoaW5nIHJldHVybnMuXG5cbiAgICAgIHRoaXMubW92ZShuZXh0KTtcblxuICAgICAgdGhpcy5oaXN0b3J5LnVuc2hpZnQobmV4dCk7XG5cbiAgICAgIGlmICh0aGlzLmhpc3RvcnkubGVuZ3RoID4gMykge1xuICAgICAgICB0aGlzLmhpc3RvcnkucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmbHVzaENoYW5nZXMpIHtcbiAgICAgICAgZmx1c2goKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gVEhFIElTU1VFXG4gIH0sIHtcbiAgICBrZXk6ICdtb3ZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZShwb3MpIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICBpZiAoISh0eXBlb2YgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUgIT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzYW1lID0ge307XG5cbiAgICAgIGZvciAodmFyIHR5cGUgaW4gcG9zKSB7XG4gICAgICAgIHNhbWVbdHlwZV0gPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcG9zW3R5cGVdKSB7XG4gICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaGlzdG9yeS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIHBvaW50ID0gdGhpcy5oaXN0b3J5W2ldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwb2ludFt0eXBlXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXdpdGhpbihwb2ludFt0eXBlXVtrZXldLCBwb3NbdHlwZV1ba2V5XSkpIHtcbiAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICBzYW1lW3R5cGVdW2tleV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY3NzID0geyB0b3A6ICcnLCBsZWZ0OiAnJywgcmlnaHQ6ICcnLCBib3R0b206ICcnIH07XG5cbiAgICAgIHZhciB0cmFuc2NyaWJlID0gZnVuY3Rpb24gdHJhbnNjcmliZShfc2FtZSwgX3Bvcykge1xuICAgICAgICB2YXIgaGFzT3B0aW1pemF0aW9ucyA9IHR5cGVvZiBfdGhpczgub3B0aW9ucy5vcHRpbWl6YXRpb25zICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgdmFyIGdwdSA9IGhhc09wdGltaXphdGlvbnMgPyBfdGhpczgub3B0aW9ucy5vcHRpbWl6YXRpb25zLmdwdSA6IG51bGw7XG4gICAgICAgIGlmIChncHUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgdmFyIHlQb3MgPSB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHhQb3MgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKF9zYW1lLnRvcCkge1xuICAgICAgICAgICAgY3NzLnRvcCA9IDA7XG4gICAgICAgICAgICB5UG9zID0gX3Bvcy50b3A7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcy5ib3R0b20gPSAwO1xuICAgICAgICAgICAgeVBvcyA9IC1fcG9zLmJvdHRvbTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoX3NhbWUubGVmdCkge1xuICAgICAgICAgICAgY3NzLmxlZnQgPSAwO1xuICAgICAgICAgICAgeFBvcyA9IF9wb3MubGVmdDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3NzLnJpZ2h0ID0gMDtcbiAgICAgICAgICAgIHhQb3MgPSAtX3Bvcy5yaWdodDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEpIHtcbiAgICAgICAgICAgIC8vIEh1YlNwb3QvdGV0aGVyIzIwN1xuICAgICAgICAgICAgdmFyIHJldGluYSA9IHdpbmRvdy5tYXRjaE1lZGlhKCdvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAxLjNkcHB4KScpLm1hdGNoZXMgfHwgd2luZG93Lm1hdGNoTWVkaWEoJ29ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAxLjMpJykubWF0Y2hlcztcbiAgICAgICAgICAgIGlmICghcmV0aW5hKSB7XG4gICAgICAgICAgICAgIHhQb3MgPSBNYXRoLnJvdW5kKHhQb3MpO1xuICAgICAgICAgICAgICB5UG9zID0gTWF0aC5yb3VuZCh5UG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjc3NbdHJhbnNmb3JtS2V5XSA9ICd0cmFuc2xhdGVYKCcgKyB4UG9zICsgJ3B4KSB0cmFuc2xhdGVZKCcgKyB5UG9zICsgJ3B4KSc7XG5cbiAgICAgICAgICBpZiAodHJhbnNmb3JtS2V5ICE9PSAnbXNUcmFuc2Zvcm0nKSB7XG4gICAgICAgICAgICAvLyBUaGUgWiB0cmFuc2Zvcm0gd2lsbCBrZWVwIHRoaXMgaW4gdGhlIEdQVSAoZmFzdGVyLCBhbmQgcHJldmVudHMgYXJ0aWZhY3RzKSxcbiAgICAgICAgICAgIC8vIGJ1dCBJRTkgZG9lc24ndCBzdXBwb3J0IDNkIHRyYW5zZm9ybXMgYW5kIHdpbGwgY2hva2UuXG4gICAgICAgICAgICBjc3NbdHJhbnNmb3JtS2V5XSArPSBcIiB0cmFuc2xhdGVaKDApXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChfc2FtZS50b3ApIHtcbiAgICAgICAgICAgIGNzcy50b3AgPSBfcG9zLnRvcCArICdweCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcy5ib3R0b20gPSBfcG9zLmJvdHRvbSArICdweCc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF9zYW1lLmxlZnQpIHtcbiAgICAgICAgICAgIGNzcy5sZWZ0ID0gX3Bvcy5sZWZ0ICsgJ3B4JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3NzLnJpZ2h0ID0gX3Bvcy5yaWdodCArICdweCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgbW92ZWQgPSBmYWxzZTtcbiAgICAgIGlmICgoc2FtZS5wYWdlLnRvcCB8fCBzYW1lLnBhZ2UuYm90dG9tKSAmJiAoc2FtZS5wYWdlLmxlZnQgfHwgc2FtZS5wYWdlLnJpZ2h0KSkge1xuICAgICAgICBjc3MucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICB0cmFuc2NyaWJlKHNhbWUucGFnZSwgcG9zLnBhZ2UpO1xuICAgICAgfSBlbHNlIGlmICgoc2FtZS52aWV3cG9ydC50b3AgfHwgc2FtZS52aWV3cG9ydC5ib3R0b20pICYmIChzYW1lLnZpZXdwb3J0LmxlZnQgfHwgc2FtZS52aWV3cG9ydC5yaWdodCkpIHtcbiAgICAgICAgY3NzLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgICAgdHJhbnNjcmliZShzYW1lLnZpZXdwb3J0LCBwb3Mudmlld3BvcnQpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2FtZS5vZmZzZXQgIT09ICd1bmRlZmluZWQnICYmIHNhbWUub2Zmc2V0LnRvcCAmJiBzYW1lLm9mZnNldC5sZWZ0KSB7XG4gICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY3NzLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICB2YXIgb2Zmc2V0UGFyZW50ID0gX3RoaXM4LmNhY2hlKCd0YXJnZXQtb2Zmc2V0cGFyZW50JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChfdGhpczgudGFyZ2V0KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChnZXRPZmZzZXRQYXJlbnQoX3RoaXM4LmVsZW1lbnQpICE9PSBvZmZzZXRQYXJlbnQpIHtcbiAgICAgICAgICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXM4LmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChfdGhpczguZWxlbWVudCk7XG4gICAgICAgICAgICAgIG9mZnNldFBhcmVudC5hcHBlbmRDaGlsZChfdGhpczguZWxlbWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0cmFuc2NyaWJlKHNhbWUub2Zmc2V0LCBwb3Mub2Zmc2V0KTtcbiAgICAgICAgICBtb3ZlZCA9IHRydWU7XG4gICAgICAgIH0pKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjc3MucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICB0cmFuc2NyaWJlKHsgdG9wOiB0cnVlLCBsZWZ0OiB0cnVlIH0sIHBvcy5wYWdlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtb3ZlZCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJvZHlFbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmJvZHlFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9mZnNldFBhcmVudElzQm9keSA9IHRydWU7XG4gICAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gdGhpcy5lbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgd2hpbGUgKGN1cnJlbnROb2RlICYmIGN1cnJlbnROb2RlLm5vZGVUeXBlID09PSAxICYmIGN1cnJlbnROb2RlLnRhZ05hbWUgIT09ICdCT0RZJykge1xuICAgICAgICAgICAgaWYgKGdldENvbXB1dGVkU3R5bGUoY3VycmVudE5vZGUpLnBvc2l0aW9uICE9PSAnc3RhdGljJykge1xuICAgICAgICAgICAgICBvZmZzZXRQYXJlbnRJc0JvZHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIW9mZnNldFBhcmVudElzQm9keSkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQW55IGNzcyBjaGFuZ2Ugd2lsbCB0cmlnZ2VyIGEgcmVwYWludCwgc28gbGV0J3MgYXZvaWQgb25lIGlmIG5vdGhpbmcgY2hhbmdlZFxuICAgICAgdmFyIHdyaXRlQ1NTID0ge307XG4gICAgICB2YXIgd3JpdGUgPSBmYWxzZTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBjc3MpIHtcbiAgICAgICAgdmFyIHZhbCA9IGNzc1trZXldO1xuICAgICAgICB2YXIgZWxWYWwgPSB0aGlzLmVsZW1lbnQuc3R5bGVba2V5XTtcblxuICAgICAgICBpZiAoZWxWYWwgIT09IHZhbCkge1xuICAgICAgICAgIHdyaXRlID0gdHJ1ZTtcbiAgICAgICAgICB3cml0ZUNTU1trZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh3cml0ZSkge1xuICAgICAgICBkZWZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZXh0ZW5kKF90aGlzOC5lbGVtZW50LnN0eWxlLCB3cml0ZUNTUyk7XG4gICAgICAgICAgX3RoaXM4LnRyaWdnZXIoJ3JlcG9zaXRpb25lZCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGV0aGVyQ2xhc3M7XG59KShFdmVudGVkKTtcblxuVGV0aGVyQ2xhc3MubW9kdWxlcyA9IFtdO1xuXG5UZXRoZXJCYXNlLnBvc2l0aW9uID0gcG9zaXRpb247XG5cbnZhciBUZXRoZXIgPSBleHRlbmQoVGV0aGVyQ2xhc3MsIFRldGhlckJhc2UpO1xuLyogZ2xvYmFscyBUZXRoZXJCYXNlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5ID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbJ3JldHVybiddKSBfaVsncmV0dXJuJ10oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZScpOyB9IH07IH0pKCk7XG5cbnZhciBfVGV0aGVyQmFzZSRVdGlscyA9IFRldGhlckJhc2UuVXRpbHM7XG52YXIgZ2V0Qm91bmRzID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0Qm91bmRzO1xudmFyIGV4dGVuZCA9IF9UZXRoZXJCYXNlJFV0aWxzLmV4dGVuZDtcbnZhciB1cGRhdGVDbGFzc2VzID0gX1RldGhlckJhc2UkVXRpbHMudXBkYXRlQ2xhc3NlcztcbnZhciBkZWZlciA9IF9UZXRoZXJCYXNlJFV0aWxzLmRlZmVyO1xuXG52YXIgQk9VTkRTX0ZPUk1BVCA9IFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ107XG5cbmZ1bmN0aW9uIGdldEJvdW5kaW5nUmVjdCh0ZXRoZXIsIHRvKSB7XG4gIGlmICh0byA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICB0byA9IHRldGhlci5zY3JvbGxQYXJlbnRzWzBdO1xuICB9IGVsc2UgaWYgKHRvID09PSAnd2luZG93Jykge1xuICAgIHRvID0gW3BhZ2VYT2Zmc2V0LCBwYWdlWU9mZnNldCwgaW5uZXJXaWR0aCArIHBhZ2VYT2Zmc2V0LCBpbm5lckhlaWdodCArIHBhZ2VZT2Zmc2V0XTtcbiAgfVxuXG4gIGlmICh0byA9PT0gZG9jdW1lbnQpIHtcbiAgICB0byA9IHRvLmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdG8ubm9kZVR5cGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBub2RlID0gdG87XG4gICAgICB2YXIgc2l6ZSA9IGdldEJvdW5kcyh0byk7XG4gICAgICB2YXIgcG9zID0gc2l6ZTtcbiAgICAgIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUodG8pO1xuXG4gICAgICB0byA9IFtwb3MubGVmdCwgcG9zLnRvcCwgc2l6ZS53aWR0aCArIHBvcy5sZWZ0LCBzaXplLmhlaWdodCArIHBvcy50b3BdO1xuXG4gICAgICAvLyBBY2NvdW50IGFueSBwYXJlbnQgRnJhbWVzIHNjcm9sbCBvZmZzZXRcbiAgICAgIGlmIChub2RlLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50KSB7XG4gICAgICAgIHZhciB3aW4gPSBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgICAgIHRvWzBdICs9IHdpbi5wYWdlWE9mZnNldDtcbiAgICAgICAgdG9bMV0gKz0gd2luLnBhZ2VZT2Zmc2V0O1xuICAgICAgICB0b1syXSArPSB3aW4ucGFnZVhPZmZzZXQ7XG4gICAgICAgIHRvWzNdICs9IHdpbi5wYWdlWU9mZnNldDtcbiAgICAgIH1cblxuICAgICAgQk9VTkRTX0ZPUk1BVC5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlLCBpKSB7XG4gICAgICAgIHNpZGUgPSBzaWRlWzBdLnRvVXBwZXJDYXNlKCkgKyBzaWRlLnN1YnN0cigxKTtcbiAgICAgICAgaWYgKHNpZGUgPT09ICdUb3AnIHx8IHNpZGUgPT09ICdMZWZ0Jykge1xuICAgICAgICAgIHRvW2ldICs9IHBhcnNlRmxvYXQoc3R5bGVbJ2JvcmRlcicgKyBzaWRlICsgJ1dpZHRoJ10pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvW2ldIC09IHBhcnNlRmxvYXQoc3R5bGVbJ2JvcmRlcicgKyBzaWRlICsgJ1dpZHRoJ10pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG5UZXRoZXJCYXNlLm1vZHVsZXMucHVzaCh7XG4gIHBvc2l0aW9uOiBmdW5jdGlvbiBwb3NpdGlvbihfcmVmKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciB0b3AgPSBfcmVmLnRvcDtcbiAgICB2YXIgbGVmdCA9IF9yZWYubGVmdDtcbiAgICB2YXIgdGFyZ2V0QXR0YWNobWVudCA9IF9yZWYudGFyZ2V0QXR0YWNobWVudDtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLmNvbnN0cmFpbnRzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgX2NhY2hlID0gdGhpcy5jYWNoZSgnZWxlbWVudC1ib3VuZHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2V0Qm91bmRzKF90aGlzLmVsZW1lbnQpO1xuICAgIH0pO1xuXG4gICAgdmFyIGhlaWdodCA9IF9jYWNoZS5oZWlnaHQ7XG4gICAgdmFyIHdpZHRoID0gX2NhY2hlLndpZHRoO1xuXG4gICAgaWYgKHdpZHRoID09PSAwICYmIGhlaWdodCA9PT0gMCAmJiB0eXBlb2YgdGhpcy5sYXN0U2l6ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBfbGFzdFNpemUgPSB0aGlzLmxhc3RTaXplO1xuXG4gICAgICAvLyBIYW5kbGUgdGhlIGl0ZW0gZ2V0dGluZyBoaWRkZW4gYXMgYSByZXN1bHQgb2Ygb3VyIHBvc2l0aW9uaW5nIHdpdGhvdXQgZ2xpdGNoaW5nXG4gICAgICAvLyB0aGUgY2xhc3NlcyBpbiBhbmQgb3V0XG4gICAgICB3aWR0aCA9IF9sYXN0U2l6ZS53aWR0aDtcbiAgICAgIGhlaWdodCA9IF9sYXN0U2l6ZS5oZWlnaHQ7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFNpemUgPSB0aGlzLmNhY2hlKCd0YXJnZXQtYm91bmRzJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmdldFRhcmdldEJvdW5kcygpO1xuICAgIH0pO1xuXG4gICAgdmFyIHRhcmdldEhlaWdodCA9IHRhcmdldFNpemUuaGVpZ2h0O1xuICAgIHZhciB0YXJnZXRXaWR0aCA9IHRhcmdldFNpemUud2lkdGg7XG5cbiAgICB2YXIgYWxsQ2xhc3NlcyA9IFt0aGlzLmdldENsYXNzKCdwaW5uZWQnKSwgdGhpcy5nZXRDbGFzcygnb3V0LW9mLWJvdW5kcycpXTtcblxuICAgIHRoaXMub3B0aW9ucy5jb25zdHJhaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICB2YXIgb3V0T2ZCb3VuZHNDbGFzcyA9IGNvbnN0cmFpbnQub3V0T2ZCb3VuZHNDbGFzcztcbiAgICAgIHZhciBwaW5uZWRDbGFzcyA9IGNvbnN0cmFpbnQucGlubmVkQ2xhc3M7XG5cbiAgICAgIGlmIChvdXRPZkJvdW5kc0NsYXNzKSB7XG4gICAgICAgIGFsbENsYXNzZXMucHVzaChvdXRPZkJvdW5kc0NsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwaW5uZWRDbGFzcykge1xuICAgICAgICBhbGxDbGFzc2VzLnB1c2gocGlubmVkQ2xhc3MpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWxsQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHtcbiAgICAgIFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ10uZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgICBhbGxDbGFzc2VzLnB1c2goY2xzICsgJy0nICsgc2lkZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBhZGRDbGFzc2VzID0gW107XG5cbiAgICB2YXIgdEF0dGFjaG1lbnQgPSBleHRlbmQoe30sIHRhcmdldEF0dGFjaG1lbnQpO1xuICAgIHZhciBlQXR0YWNobWVudCA9IGV4dGVuZCh7fSwgdGhpcy5hdHRhY2htZW50KTtcblxuICAgIHRoaXMub3B0aW9ucy5jb25zdHJhaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICB2YXIgdG8gPSBjb25zdHJhaW50LnRvO1xuICAgICAgdmFyIGF0dGFjaG1lbnQgPSBjb25zdHJhaW50LmF0dGFjaG1lbnQ7XG4gICAgICB2YXIgcGluID0gY29uc3RyYWludC5waW47XG5cbiAgICAgIGlmICh0eXBlb2YgYXR0YWNobWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYXR0YWNobWVudCA9ICcnO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hhbmdlQXR0YWNoWCA9IHVuZGVmaW5lZCxcbiAgICAgICAgICBjaGFuZ2VBdHRhY2hZID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKGF0dGFjaG1lbnQuaW5kZXhPZignICcpID49IDApIHtcbiAgICAgICAgdmFyIF9hdHRhY2htZW50JHNwbGl0ID0gYXR0YWNobWVudC5zcGxpdCgnICcpO1xuXG4gICAgICAgIHZhciBfYXR0YWNobWVudCRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfYXR0YWNobWVudCRzcGxpdCwgMik7XG5cbiAgICAgICAgY2hhbmdlQXR0YWNoWSA9IF9hdHRhY2htZW50JHNwbGl0MlswXTtcbiAgICAgICAgY2hhbmdlQXR0YWNoWCA9IF9hdHRhY2htZW50JHNwbGl0MlsxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYW5nZUF0dGFjaFggPSBjaGFuZ2VBdHRhY2hZID0gYXR0YWNobWVudDtcbiAgICAgIH1cblxuICAgICAgdmFyIGJvdW5kcyA9IGdldEJvdW5kaW5nUmVjdChfdGhpcywgdG8pO1xuXG4gICAgICBpZiAoY2hhbmdlQXR0YWNoWSA9PT0gJ3RhcmdldCcgfHwgY2hhbmdlQXR0YWNoWSA9PT0gJ2JvdGgnKSB7XG4gICAgICAgIGlmICh0b3AgPCBib3VuZHNbMV0gJiYgdEF0dGFjaG1lbnQudG9wID09PSAndG9wJykge1xuICAgICAgICAgIHRvcCArPSB0YXJnZXRIZWlnaHQ7XG4gICAgICAgICAgdEF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodG9wICsgaGVpZ2h0ID4gYm91bmRzWzNdICYmIHRBdHRhY2htZW50LnRvcCA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICB0b3AgLT0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgIHRBdHRhY2htZW50LnRvcCA9ICd0b3AnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VBdHRhY2hZID09PSAndG9nZXRoZXInKSB7XG4gICAgICAgIGlmICh0QXR0YWNobWVudC50b3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgaWYgKGVBdHRhY2htZW50LnRvcCA9PT0gJ2JvdHRvbScgJiYgdG9wIDwgYm91bmRzWzFdKSB7XG4gICAgICAgICAgICB0b3AgKz0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgICAgdEF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG5cbiAgICAgICAgICAgIHRvcCArPSBoZWlnaHQ7XG4gICAgICAgICAgICBlQXR0YWNobWVudC50b3AgPSAndG9wJztcbiAgICAgICAgICB9IGVsc2UgaWYgKGVBdHRhY2htZW50LnRvcCA9PT0gJ3RvcCcgJiYgdG9wICsgaGVpZ2h0ID4gYm91bmRzWzNdICYmIHRvcCAtIChoZWlnaHQgLSB0YXJnZXRIZWlnaHQpID49IGJvdW5kc1sxXSkge1xuICAgICAgICAgICAgdG9wIC09IGhlaWdodCAtIHRhcmdldEhlaWdodDtcbiAgICAgICAgICAgIHRBdHRhY2htZW50LnRvcCA9ICdib3R0b20nO1xuXG4gICAgICAgICAgICBlQXR0YWNobWVudC50b3AgPSAnYm90dG9tJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodEF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJykge1xuICAgICAgICAgIGlmIChlQXR0YWNobWVudC50b3AgPT09ICd0b3AnICYmIHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSkge1xuICAgICAgICAgICAgdG9wIC09IHRhcmdldEhlaWdodDtcbiAgICAgICAgICAgIHRBdHRhY2htZW50LnRvcCA9ICd0b3AnO1xuXG4gICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG4gICAgICAgICAgfSBlbHNlIGlmIChlQXR0YWNobWVudC50b3AgPT09ICdib3R0b20nICYmIHRvcCA8IGJvdW5kc1sxXSAmJiB0b3AgKyAoaGVpZ2h0ICogMiAtIHRhcmdldEhlaWdodCkgPD0gYm91bmRzWzNdKSB7XG4gICAgICAgICAgICB0b3AgKz0gaGVpZ2h0IC0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgICAgdEF0dGFjaG1lbnQudG9wID0gJ3RvcCc7XG5cbiAgICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICd0b3AnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0QXR0YWNobWVudC50b3AgPT09ICdtaWRkbGUnKSB7XG4gICAgICAgICAgaWYgKHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSAmJiBlQXR0YWNobWVudC50b3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG4gICAgICAgICAgfSBlbHNlIGlmICh0b3AgPCBib3VuZHNbMV0gJiYgZUF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgdG9wICs9IGhlaWdodDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICd0b3AnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2hhbmdlQXR0YWNoWCA9PT0gJ3RhcmdldCcgfHwgY2hhbmdlQXR0YWNoWCA9PT0gJ2JvdGgnKSB7XG4gICAgICAgIGlmIChsZWZ0IDwgYm91bmRzWzBdICYmIHRBdHRhY2htZW50LmxlZnQgPT09ICdsZWZ0Jykge1xuICAgICAgICAgIGxlZnQgKz0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgdEF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGVmdCArIHdpZHRoID4gYm91bmRzWzJdICYmIHRBdHRhY2htZW50LmxlZnQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICBsZWZ0IC09IHRhcmdldFdpZHRoO1xuICAgICAgICAgIHRBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZUF0dGFjaFggPT09ICd0b2dldGhlcicpIHtcbiAgICAgICAgaWYgKGxlZnQgPCBib3VuZHNbMF0gJiYgdEF0dGFjaG1lbnQubGVmdCA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIGxlZnQgKz0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgICB0QXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0JztcblxuICAgICAgICAgICAgbGVmdCArPSB3aWR0aDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG4gICAgICAgICAgfSBlbHNlIGlmIChlQXR0YWNobWVudC5sZWZ0ID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIGxlZnQgKz0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgICB0QXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0JztcblxuICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAncmlnaHQnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChsZWZ0ICsgd2lkdGggPiBib3VuZHNbMl0gJiYgdEF0dGFjaG1lbnQubGVmdCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIGlmIChlQXR0YWNobWVudC5sZWZ0ID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIGxlZnQgLT0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgICB0QXR0YWNobWVudC5sZWZ0ID0gJ2xlZnQnO1xuXG4gICAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG4gICAgICAgICAgfSBlbHNlIGlmIChlQXR0YWNobWVudC5sZWZ0ID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBsZWZ0IC09IHRhcmdldFdpZHRoO1xuICAgICAgICAgICAgdEF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0JztcblxuICAgICAgICAgICAgbGVmdCArPSB3aWR0aDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRBdHRhY2htZW50LmxlZnQgPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgaWYgKGxlZnQgKyB3aWR0aCA+IGJvdW5kc1syXSAmJiBlQXR0YWNobWVudC5sZWZ0ID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0JztcbiAgICAgICAgICB9IGVsc2UgaWYgKGxlZnQgPCBib3VuZHNbMF0gJiYgZUF0dGFjaG1lbnQubGVmdCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgbGVmdCArPSB3aWR0aDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VBdHRhY2hZID09PSAnZWxlbWVudCcgfHwgY2hhbmdlQXR0YWNoWSA9PT0gJ2JvdGgnKSB7XG4gICAgICAgIGlmICh0b3AgPCBib3VuZHNbMV0gJiYgZUF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJykge1xuICAgICAgICAgIHRvcCArPSBoZWlnaHQ7XG4gICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ3RvcCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodG9wICsgaGVpZ2h0ID4gYm91bmRzWzNdICYmIGVBdHRhY2htZW50LnRvcCA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICdib3R0b20nO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VBdHRhY2hYID09PSAnZWxlbWVudCcgfHwgY2hhbmdlQXR0YWNoWCA9PT0gJ2JvdGgnKSB7XG4gICAgICAgIGlmIChsZWZ0IDwgYm91bmRzWzBdKSB7XG4gICAgICAgICAgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIGxlZnQgKz0gd2lkdGg7XG4gICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ2xlZnQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIGxlZnQgKz0gd2lkdGggLyAyO1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGVmdCArIHdpZHRoID4gYm91bmRzWzJdKSB7XG4gICAgICAgICAgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAncmlnaHQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIGxlZnQgLT0gd2lkdGggLyAyO1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcGluID09PSAnc3RyaW5nJykge1xuICAgICAgICBwaW4gPSBwaW4uc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICByZXR1cm4gcC50cmltKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChwaW4gPT09IHRydWUpIHtcbiAgICAgICAgcGluID0gWyd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nXTtcbiAgICAgIH1cblxuICAgICAgcGluID0gcGluIHx8IFtdO1xuXG4gICAgICB2YXIgcGlubmVkID0gW107XG4gICAgICB2YXIgb29iID0gW107XG5cbiAgICAgIGlmICh0b3AgPCBib3VuZHNbMV0pIHtcbiAgICAgICAgaWYgKHBpbi5pbmRleE9mKCd0b3AnKSA+PSAwKSB7XG4gICAgICAgICAgdG9wID0gYm91bmRzWzFdO1xuICAgICAgICAgIHBpbm5lZC5wdXNoKCd0b3AnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvb2IucHVzaCgndG9wJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSkge1xuICAgICAgICBpZiAocGluLmluZGV4T2YoJ2JvdHRvbScpID49IDApIHtcbiAgICAgICAgICB0b3AgPSBib3VuZHNbM10gLSBoZWlnaHQ7XG4gICAgICAgICAgcGlubmVkLnB1c2goJ2JvdHRvbScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9vYi5wdXNoKCdib3R0b20nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobGVmdCA8IGJvdW5kc1swXSkge1xuICAgICAgICBpZiAocGluLmluZGV4T2YoJ2xlZnQnKSA+PSAwKSB7XG4gICAgICAgICAgbGVmdCA9IGJvdW5kc1swXTtcbiAgICAgICAgICBwaW5uZWQucHVzaCgnbGVmdCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9vYi5wdXNoKCdsZWZ0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGxlZnQgKyB3aWR0aCA+IGJvdW5kc1syXSkge1xuICAgICAgICBpZiAocGluLmluZGV4T2YoJ3JpZ2h0JykgPj0gMCkge1xuICAgICAgICAgIGxlZnQgPSBib3VuZHNbMl0gLSB3aWR0aDtcbiAgICAgICAgICBwaW5uZWQucHVzaCgncmlnaHQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvb2IucHVzaCgncmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGlubmVkLmxlbmd0aCkge1xuICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBwaW5uZWRDbGFzcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLm9wdGlvbnMucGlubmVkQ2xhc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwaW5uZWRDbGFzcyA9IF90aGlzLm9wdGlvbnMucGlubmVkQ2xhc3M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBpbm5lZENsYXNzID0gX3RoaXMuZ2V0Q2xhc3MoJ3Bpbm5lZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFkZENsYXNzZXMucHVzaChwaW5uZWRDbGFzcyk7XG4gICAgICAgICAgcGlubmVkLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcbiAgICAgICAgICAgIGFkZENsYXNzZXMucHVzaChwaW5uZWRDbGFzcyArICctJyArIHNpZGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAob29iLmxlbmd0aCkge1xuICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBvb2JDbGFzcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLm9wdGlvbnMub3V0T2ZCb3VuZHNDbGFzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG9vYkNsYXNzID0gX3RoaXMub3B0aW9ucy5vdXRPZkJvdW5kc0NsYXNzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvb2JDbGFzcyA9IF90aGlzLmdldENsYXNzKCdvdXQtb2YtYm91bmRzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYWRkQ2xhc3Nlcy5wdXNoKG9vYkNsYXNzKTtcbiAgICAgICAgICBvb2IuZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgICAgICAgYWRkQ2xhc3Nlcy5wdXNoKG9vYkNsYXNzICsgJy0nICsgc2lkZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwaW5uZWQuaW5kZXhPZignbGVmdCcpID49IDAgfHwgcGlubmVkLmluZGV4T2YoJ3JpZ2h0JykgPj0gMCkge1xuICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gdEF0dGFjaG1lbnQubGVmdCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHBpbm5lZC5pbmRleE9mKCd0b3AnKSA+PSAwIHx8IHBpbm5lZC5pbmRleE9mKCdib3R0b20nKSA+PSAwKSB7XG4gICAgICAgIGVBdHRhY2htZW50LnRvcCA9IHRBdHRhY2htZW50LnRvcCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodEF0dGFjaG1lbnQudG9wICE9PSB0YXJnZXRBdHRhY2htZW50LnRvcCB8fCB0QXR0YWNobWVudC5sZWZ0ICE9PSB0YXJnZXRBdHRhY2htZW50LmxlZnQgfHwgZUF0dGFjaG1lbnQudG9wICE9PSBfdGhpcy5hdHRhY2htZW50LnRvcCB8fCBlQXR0YWNobWVudC5sZWZ0ICE9PSBfdGhpcy5hdHRhY2htZW50LmxlZnQpIHtcbiAgICAgICAgX3RoaXMudXBkYXRlQXR0YWNoQ2xhc3NlcyhlQXR0YWNobWVudCwgdEF0dGFjaG1lbnQpO1xuICAgICAgICBfdGhpcy50cmlnZ2VyKCd1cGRhdGUnLCB7XG4gICAgICAgICAgYXR0YWNobWVudDogZUF0dGFjaG1lbnQsXG4gICAgICAgICAgdGFyZ2V0QXR0YWNobWVudDogdEF0dGFjaG1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZlcihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIShfdGhpcy5vcHRpb25zLmFkZFRhcmdldENsYXNzZXMgPT09IGZhbHNlKSkge1xuICAgICAgICB1cGRhdGVDbGFzc2VzKF90aGlzLnRhcmdldCwgYWRkQ2xhc3NlcywgYWxsQ2xhc3Nlcyk7XG4gICAgICB9XG4gICAgICB1cGRhdGVDbGFzc2VzKF90aGlzLmVsZW1lbnQsIGFkZENsYXNzZXMsIGFsbENsYXNzZXMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfTtcbiAgfVxufSk7XG4vKiBnbG9iYWxzIFRldGhlckJhc2UgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX1RldGhlckJhc2UkVXRpbHMgPSBUZXRoZXJCYXNlLlV0aWxzO1xudmFyIGdldEJvdW5kcyA9IF9UZXRoZXJCYXNlJFV0aWxzLmdldEJvdW5kcztcbnZhciB1cGRhdGVDbGFzc2VzID0gX1RldGhlckJhc2UkVXRpbHMudXBkYXRlQ2xhc3NlcztcbnZhciBkZWZlciA9IF9UZXRoZXJCYXNlJFV0aWxzLmRlZmVyO1xuXG5UZXRoZXJCYXNlLm1vZHVsZXMucHVzaCh7XG4gIHBvc2l0aW9uOiBmdW5jdGlvbiBwb3NpdGlvbihfcmVmKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciB0b3AgPSBfcmVmLnRvcDtcbiAgICB2YXIgbGVmdCA9IF9yZWYubGVmdDtcblxuICAgIHZhciBfY2FjaGUgPSB0aGlzLmNhY2hlKCdlbGVtZW50LWJvdW5kcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXRCb3VuZHMoX3RoaXMuZWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICB2YXIgaGVpZ2h0ID0gX2NhY2hlLmhlaWdodDtcbiAgICB2YXIgd2lkdGggPSBfY2FjaGUud2lkdGg7XG5cbiAgICB2YXIgdGFyZ2V0UG9zID0gdGhpcy5nZXRUYXJnZXRCb3VuZHMoKTtcblxuICAgIHZhciBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gICAgdmFyIHJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuXG4gICAgdmFyIGFidXR0ZWQgPSBbXTtcbiAgICBpZiAodG9wIDw9IHRhcmdldFBvcy5ib3R0b20gJiYgYm90dG9tID49IHRhcmdldFBvcy50b3ApIHtcbiAgICAgIFsnbGVmdCcsICdyaWdodCddLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcbiAgICAgICAgdmFyIHRhcmdldFBvc1NpZGUgPSB0YXJnZXRQb3Nbc2lkZV07XG4gICAgICAgIGlmICh0YXJnZXRQb3NTaWRlID09PSBsZWZ0IHx8IHRhcmdldFBvc1NpZGUgPT09IHJpZ2h0KSB7XG4gICAgICAgICAgYWJ1dHRlZC5wdXNoKHNpZGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobGVmdCA8PSB0YXJnZXRQb3MucmlnaHQgJiYgcmlnaHQgPj0gdGFyZ2V0UG9zLmxlZnQpIHtcbiAgICAgIFsndG9wJywgJ2JvdHRvbSddLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcbiAgICAgICAgdmFyIHRhcmdldFBvc1NpZGUgPSB0YXJnZXRQb3Nbc2lkZV07XG4gICAgICAgIGlmICh0YXJnZXRQb3NTaWRlID09PSB0b3AgfHwgdGFyZ2V0UG9zU2lkZSA9PT0gYm90dG9tKSB7XG4gICAgICAgICAgYWJ1dHRlZC5wdXNoKHNpZGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgYWxsQ2xhc3NlcyA9IFtdO1xuICAgIHZhciBhZGRDbGFzc2VzID0gW107XG5cbiAgICB2YXIgc2lkZXMgPSBbJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbSddO1xuICAgIGFsbENsYXNzZXMucHVzaCh0aGlzLmdldENsYXNzKCdhYnV0dGVkJykpO1xuICAgIHNpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcbiAgICAgIGFsbENsYXNzZXMucHVzaChfdGhpcy5nZXRDbGFzcygnYWJ1dHRlZCcpICsgJy0nICsgc2lkZSk7XG4gICAgfSk7XG5cbiAgICBpZiAoYWJ1dHRlZC5sZW5ndGgpIHtcbiAgICAgIGFkZENsYXNzZXMucHVzaCh0aGlzLmdldENsYXNzKCdhYnV0dGVkJykpO1xuICAgIH1cblxuICAgIGFidXR0ZWQuZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgYWRkQ2xhc3Nlcy5wdXNoKF90aGlzLmdldENsYXNzKCdhYnV0dGVkJykgKyAnLScgKyBzaWRlKTtcbiAgICB9KTtcblxuICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghKF90aGlzLm9wdGlvbnMuYWRkVGFyZ2V0Q2xhc3NlcyA9PT0gZmFsc2UpKSB7XG4gICAgICAgIHVwZGF0ZUNsYXNzZXMoX3RoaXMudGFyZ2V0LCBhZGRDbGFzc2VzLCBhbGxDbGFzc2VzKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZUNsYXNzZXMoX3RoaXMuZWxlbWVudCwgYWRkQ2xhc3NlcywgYWxsQ2xhc3Nlcyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG4vKiBnbG9iYWxzIFRldGhlckJhc2UgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsncmV0dXJuJ10pIF9pWydyZXR1cm4nXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlJyk7IH0gfTsgfSkoKTtcblxuVGV0aGVyQmFzZS5tb2R1bGVzLnB1c2goe1xuICBwb3NpdGlvbjogZnVuY3Rpb24gcG9zaXRpb24oX3JlZikge1xuICAgIHZhciB0b3AgPSBfcmVmLnRvcDtcbiAgICB2YXIgbGVmdCA9IF9yZWYubGVmdDtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLnNoaWZ0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNoaWZ0ID0gdGhpcy5vcHRpb25zLnNoaWZ0O1xuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnNoaWZ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzaGlmdCA9IHRoaXMub3B0aW9ucy5zaGlmdC5jYWxsKHRoaXMsIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfSk7XG4gICAgfVxuXG4gICAgdmFyIHNoaWZ0VG9wID0gdW5kZWZpbmVkLFxuICAgICAgICBzaGlmdExlZnQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBzaGlmdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHNoaWZ0ID0gc2hpZnQuc3BsaXQoJyAnKTtcbiAgICAgIHNoaWZ0WzFdID0gc2hpZnRbMV0gfHwgc2hpZnRbMF07XG5cbiAgICAgIHZhciBfc2hpZnQgPSBzaGlmdDtcblxuICAgICAgdmFyIF9zaGlmdDIgPSBfc2xpY2VkVG9BcnJheShfc2hpZnQsIDIpO1xuXG4gICAgICBzaGlmdFRvcCA9IF9zaGlmdDJbMF07XG4gICAgICBzaGlmdExlZnQgPSBfc2hpZnQyWzFdO1xuXG4gICAgICBzaGlmdFRvcCA9IHBhcnNlRmxvYXQoc2hpZnRUb3AsIDEwKTtcbiAgICAgIHNoaWZ0TGVmdCA9IHBhcnNlRmxvYXQoc2hpZnRMZWZ0LCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNoaWZ0VG9wID0gc2hpZnQudG9wO1xuICAgICAgc2hpZnRMZWZ0ID0gc2hpZnQubGVmdDtcbiAgICB9XG5cbiAgICB0b3AgKz0gc2hpZnRUb3A7XG4gICAgbGVmdCArPSBzaGlmdExlZnQ7XG5cbiAgICByZXR1cm4geyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9O1xuICB9XG59KTtcbnJldHVybiBUZXRoZXI7XG5cbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi90ZXRoZXIvZGlzdC9qcy90ZXRoZXIuanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiLyohXG4gKiBCb290c3RyYXAgdjQuMC4wLWJldGEgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbSlcbiAqIENvcHlyaWdodCAyMDExLTIwMTcgVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKi9cblxuaWYgKHR5cGVvZiBqUXVlcnkgPT09ICd1bmRlZmluZWQnKSB7XG4gIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeS4galF1ZXJ5IG11c3QgYmUgaW5jbHVkZWQgYmVmb3JlIEJvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdC4nKVxufVxuXG4oZnVuY3Rpb24gKCQpIHtcbiAgdmFyIHZlcnNpb24gPSAkLmZuLmpxdWVyeS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJylcbiAgaWYgKCh2ZXJzaW9uWzBdIDwgMiAmJiB2ZXJzaW9uWzFdIDwgOSkgfHwgKHZlcnNpb25bMF0gPT0gMSAmJiB2ZXJzaW9uWzFdID09IDkgJiYgdmVyc2lvblsyXSA8IDEpIHx8ICh2ZXJzaW9uWzBdID49IDQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IHYxLjkuMSBidXQgbGVzcyB0aGFuIHY0LjAuMCcpXG4gIH1cbn0pKGpRdWVyeSk7XG5cbihmdW5jdGlvbiAoKSB7XG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjAtYmV0YSk6IHV0aWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBVdGlsID0gZnVuY3Rpb24gKCQpIHtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIFByaXZhdGUgVHJhbnNpdGlvbkVuZCBIZWxwZXJzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgdHJhbnNpdGlvbiA9IGZhbHNlO1xuXG4gIHZhciBNQVhfVUlEID0gMTAwMDAwMDtcblxuICB2YXIgVHJhbnNpdGlvbkVuZEV2ZW50ID0ge1xuICAgIFdlYmtpdFRyYW5zaXRpb246ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgT1RyYW5zaXRpb246ICdvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCcsXG4gICAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnXG5cbiAgICAvLyBzaG91dG91dCBBbmd1c0Nyb2xsIChodHRwczovL2dvby5nbC9weHdRR3ApXG4gIH07ZnVuY3Rpb24gdG9UeXBlKG9iaikge1xuICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16QS1aXSspLylbMV0udG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRWxlbWVudChvYmopIHtcbiAgICByZXR1cm4gKG9ialswXSB8fCBvYmopLm5vZGVUeXBlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmluZFR5cGU6IHRyYW5zaXRpb24uZW5kLFxuICAgICAgZGVsZWdhdGVUeXBlOiB0cmFuc2l0aW9uLmVuZCxcbiAgICAgIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7XG4gICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuaXModGhpcykpIHtcbiAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kVGVzdCgpIHtcbiAgICBpZiAod2luZG93LlFVbml0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYm9vdHN0cmFwJyk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIFRyYW5zaXRpb25FbmRFdmVudCkge1xuICAgICAgaWYgKGVsLnN0eWxlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlbmQ6IFRyYW5zaXRpb25FbmRFdmVudFtuYW1lXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmRFbXVsYXRvcihkdXJhdGlvbikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG5cbiAgICAkKHRoaXMpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICBVdGlsLnRyaWdnZXJUcmFuc2l0aW9uRW5kKF90aGlzKTtcbiAgICAgIH1cbiAgICB9LCBkdXJhdGlvbik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KCkge1xuICAgIHRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRW5kVGVzdCgpO1xuXG4gICAgJC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmRFbXVsYXRvcjtcblxuICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKSB7XG4gICAgICAkLmV2ZW50LnNwZWNpYWxbVXRpbC5UUkFOU0lUSU9OX0VORF0gPSBnZXRTcGVjaWFsVHJhbnNpdGlvbkVuZEV2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIFB1YmxpYyBVdGlsIEFwaVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgVXRpbCA9IHtcblxuICAgIFRSQU5TSVRJT05fRU5EOiAnYnNUcmFuc2l0aW9uRW5kJyxcblxuICAgIGdldFVJRDogZnVuY3Rpb24gZ2V0VUlEKHByZWZpeCkge1xuICAgICAgZG8ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpOyAvLyBcIn5+XCIgYWN0cyBsaWtlIGEgZmFzdGVyIE1hdGguZmxvb3IoKSBoZXJlXG4gICAgICB9IHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKTtcbiAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgfSxcbiAgICBnZXRTZWxlY3RvckZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRhcmdldCcpO1xuICAgICAgaWYgKCFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gJyMnKSB7XG4gICAgICAgIHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSB8fCAnJztcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyICRzZWxlY3RvciA9ICQoc2VsZWN0b3IpO1xuICAgICAgICByZXR1cm4gJHNlbGVjdG9yLmxlbmd0aCA+IDAgPyBzZWxlY3RvciA6IG51bGw7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlZmxvdzogZnVuY3Rpb24gcmVmbG93KGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICB9LFxuICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmlnZ2VyVHJhbnNpdGlvbkVuZChlbGVtZW50KSB7XG4gICAgICAkKGVsZW1lbnQpLnRyaWdnZXIodHJhbnNpdGlvbi5lbmQpO1xuICAgIH0sXG4gICAgc3VwcG9ydHNUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBzdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbih0cmFuc2l0aW9uKTtcbiAgICB9LFxuICAgIHR5cGVDaGVja0NvbmZpZzogZnVuY3Rpb24gdHlwZUNoZWNrQ29uZmlnKGNvbXBvbmVudE5hbWUsIGNvbmZpZywgY29uZmlnVHlwZXMpIHtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGNvbmZpZ1R5cGVzKSB7XG4gICAgICAgIGlmIChjb25maWdUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICB2YXIgZXhwZWN0ZWRUeXBlcyA9IGNvbmZpZ1R5cGVzW3Byb3BlcnR5XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjb25maWdbcHJvcGVydHldO1xuICAgICAgICAgIHZhciB2YWx1ZVR5cGUgPSB2YWx1ZSAmJiBpc0VsZW1lbnQodmFsdWUpID8gJ2VsZW1lbnQnIDogdG9UeXBlKHZhbHVlKTtcblxuICAgICAgICAgIGlmICghbmV3IFJlZ0V4cChleHBlY3RlZFR5cGVzKS50ZXN0KHZhbHVlVHlwZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjb21wb25lbnROYW1lLnRvVXBwZXJDYXNlKCkgKyAnOiAnICsgKCdPcHRpb24gXCInICsgcHJvcGVydHkgKyAnXCIgcHJvdmlkZWQgdHlwZSBcIicgKyB2YWx1ZVR5cGUgKyAnXCIgJykgKyAoJ2J1dCBleHBlY3RlZCB0eXBlIFwiJyArIGV4cGVjdGVkVHlwZXMgKyAnXCIuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpO1xuXG4gIHJldHVybiBVdGlsO1xufShqUXVlcnkpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1iZXRhKTogYWxlcnQuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBBbGVydCA9IGZ1bmN0aW9uICgkKSB7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ2FsZXJ0JztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYmV0YSc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5hbGVydCc7XG4gIHZhciBFVkVOVF9LRVkgPSAnLicgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTA7XG5cbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIERJU01JU1M6ICdbZGF0YS1kaXNtaXNzPVwiYWxlcnRcIl0nXG4gIH07XG5cbiAgdmFyIEV2ZW50ID0ge1xuICAgIENMT1NFOiAnY2xvc2UnICsgRVZFTlRfS0VZLFxuICAgIENMT1NFRDogJ2Nsb3NlZCcgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6ICdjbGljaycgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcblxuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIEFMRVJUOiAnYWxlcnQnLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcblxuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuICB2YXIgQWxlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQWxlcnQoZWxlbWVudCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFsZXJ0KTtcblxuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gZ2V0dGVyc1xuXG4gICAgLy8gcHVibGljXG5cbiAgICBBbGVydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiBjbG9zZShlbGVtZW50KSB7XG4gICAgICBlbGVtZW50ID0gZWxlbWVudCB8fCB0aGlzLl9lbGVtZW50O1xuXG4gICAgICB2YXIgcm9vdEVsZW1lbnQgPSB0aGlzLl9nZXRSb290RWxlbWVudChlbGVtZW50KTtcbiAgICAgIHZhciBjdXN0b21FdmVudCA9IHRoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KHJvb3RFbGVtZW50KTtcblxuICAgICAgaWYgKGN1c3RvbUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVtb3ZlRWxlbWVudChyb290RWxlbWVudCk7XG4gICAgfTtcblxuICAgIEFsZXJ0LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gcHJpdmF0ZVxuXG4gICAgQWxlcnQucHJvdG90eXBlLl9nZXRSb290RWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRSb290RWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB2YXIgcGFyZW50ID0gZmFsc2U7XG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBwYXJlbnQgPSAkKHNlbGVjdG9yKVswXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50ID0gJChlbGVtZW50KS5jbG9zZXN0KCcuJyArIENsYXNzTmFtZS5BTEVSVClbMF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfTtcblxuICAgIEFsZXJ0LnByb3RvdHlwZS5fdHJpZ2dlckNsb3NlRXZlbnQgPSBmdW5jdGlvbiBfdHJpZ2dlckNsb3NlRXZlbnQoZWxlbWVudCkge1xuICAgICAgdmFyIGNsb3NlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkNMT1NFKTtcblxuICAgICAgJChlbGVtZW50KS50cmlnZ2VyKGNsb3NlRXZlbnQpO1xuICAgICAgcmV0dXJuIGNsb3NlRXZlbnQ7XG4gICAgfTtcblxuICAgIEFsZXJ0LnByb3RvdHlwZS5fcmVtb3ZlRWxlbWVudCA9IGZ1bmN0aW9uIF9yZW1vdmVFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgaWYgKCFVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpIHx8ICEkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkKGVsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCwgZXZlbnQpO1xuICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgfTtcblxuICAgIEFsZXJ0LnByb3RvdHlwZS5fZGVzdHJveUVsZW1lbnQgPSBmdW5jdGlvbiBfZGVzdHJveUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgJChlbGVtZW50KS5kZXRhY2goKS50cmlnZ2VyKEV2ZW50LkNMT1NFRCkucmVtb3ZlKCk7XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgQWxlcnQuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkZWxlbWVudC5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IEFsZXJ0KHRoaXMpO1xuICAgICAgICAgICRlbGVtZW50LmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZyA9PT0gJ2Nsb3NlJykge1xuICAgICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIEFsZXJ0Ll9oYW5kbGVEaXNtaXNzID0gZnVuY3Rpb24gX2hhbmRsZURpc21pc3MoYWxlcnRJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYWxlcnRJbnN0YW5jZS5jbG9zZSh0aGlzKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhBbGVydCwgbnVsbCwgW3tcbiAgICAgIGtleTogJ1ZFUlNJT04nLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBbGVydDtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5ESVNNSVNTLCBBbGVydC5faGFuZGxlRGlzbWlzcyhuZXcgQWxlcnQoKSkpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gQWxlcnQuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IEFsZXJ0O1xuICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gQWxlcnQuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gQWxlcnQ7XG59KGpRdWVyeSk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wLWJldGEpOiBidXR0b24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBCdXR0b24gPSBmdW5jdGlvbiAoJCkge1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdidXR0b24nO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1iZXRhJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmJ1dHRvbic7XG4gIHZhciBFVkVOVF9LRVkgPSAnLicgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcblxuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgQlVUVE9OOiAnYnRuJyxcbiAgICBGT0NVUzogJ2ZvY3VzJ1xuICB9O1xuXG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBEQVRBX1RPR0dMRV9DQVJST1Q6ICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nLFxuICAgIElOUFVUOiAnaW5wdXQnLFxuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIEJVVFRPTjogJy5idG4nXG4gIH07XG5cbiAgdmFyIEV2ZW50ID0ge1xuICAgIENMSUNLX0RBVEFfQVBJOiAnY2xpY2snICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgIEZPQ1VTX0JMVVJfREFUQV9BUEk6ICdmb2N1cycgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVkgKyAnICcgKyAoJ2JsdXInICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZKVxuXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG4gIHZhciBCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnV0dG9uKGVsZW1lbnQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdXR0b24pO1xuXG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9XG5cbiAgICAvLyBnZXR0ZXJzXG5cbiAgICAvLyBwdWJsaWNcblxuICAgIEJ1dHRvbi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgdmFyIHRyaWdnZXJDaGFuZ2VFdmVudCA9IHRydWU7XG4gICAgICB2YXIgYWRkQXJpYVByZXNzZWQgPSB0cnVlO1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gJCh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KFNlbGVjdG9yLkRBVEFfVE9HR0xFKVswXTtcblxuICAgICAgaWYgKHJvb3RFbGVtZW50KSB7XG4gICAgICAgIHZhciBpbnB1dCA9ICQodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5JTlBVVClbMF07XG5cbiAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGVja2VkICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkpIHtcbiAgICAgICAgICAgICAgdHJpZ2dlckNoYW5nZUV2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9ICQocm9vdEVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFKVswXTtcblxuICAgICAgICAgICAgICBpZiAoYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICQoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IHJvb3RFbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCBpbnB1dC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykgfHwgcm9vdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSAhJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgICAgICQoaW5wdXQpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgYWRkQXJpYVByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRkQXJpYVByZXNzZWQpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsICEkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBCdXR0b24ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBzdGF0aWNcblxuICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBCdXR0b24odGhpcyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uLCBudWxsLCBbe1xuICAgICAga2V5OiAnVkVSU0lPTicsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvbjtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRV9DQVJST1QsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB2YXIgYnV0dG9uID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgaWYgKCEkKGJ1dHRvbikuaGFzQ2xhc3MoQ2xhc3NOYW1lLkJVVFRPTikpIHtcbiAgICAgIGJ1dHRvbiA9ICQoYnV0dG9uKS5jbG9zZXN0KFNlbGVjdG9yLkJVVFRPTik7XG4gICAgfVxuXG4gICAgQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKGJ1dHRvbiksICd0b2dnbGUnKTtcbiAgfSkub24oRXZlbnQuRk9DVVNfQkxVUl9EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEVfQ0FSUk9ULCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgYnV0dG9uID0gJChldmVudC50YXJnZXQpLmNsb3Nlc3QoU2VsZWN0b3IuQlVUVE9OKVswXTtcbiAgICAkKGJ1dHRvbikudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkZPQ1VTLCAvXmZvY3VzKGluKT8kLy50ZXN0KGV2ZW50LnR5cGUpKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBCdXR0b24uX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IEJ1dHRvbjtcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBCdXR0b247XG59KGpRdWVyeSk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wLWJldGEpOiBjYXJvdXNlbC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIENhcm91c2VsID0gZnVuY3Rpb24gKCQpIHtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUgPSAnY2Fyb3VzZWwnO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1iZXRhJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmNhcm91c2VsJztcbiAgdmFyIEVWRU5UX0tFWSA9ICcuJyArIERBVEFfS0VZO1xuICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdO1xuICB2YXIgVFJBTlNJVElPTl9EVVJBVElPTiA9IDYwMDtcbiAgdmFyIEFSUk9XX0xFRlRfS0VZQ09ERSA9IDM3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBsZWZ0IGFycm93IGtleVxuICB2YXIgQVJST1dfUklHSFRfS0VZQ09ERSA9IDM5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciByaWdodCBhcnJvdyBrZXlcbiAgdmFyIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgPSA1MDA7IC8vIFRpbWUgZm9yIG1vdXNlIGNvbXBhdCBldmVudHMgdG8gZmlyZSBhZnRlciB0b3VjaFxuXG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIGludGVydmFsOiA1MDAwLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIHNsaWRlOiBmYWxzZSxcbiAgICBwYXVzZTogJ2hvdmVyJyxcbiAgICB3cmFwOiB0cnVlXG4gIH07XG5cbiAgdmFyIERlZmF1bHRUeXBlID0ge1xuICAgIGludGVydmFsOiAnKG51bWJlcnxib29sZWFuKScsXG4gICAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgICBzbGlkZTogJyhib29sZWFufHN0cmluZyknLFxuICAgIHBhdXNlOiAnKHN0cmluZ3xib29sZWFuKScsXG4gICAgd3JhcDogJ2Jvb2xlYW4nXG4gIH07XG5cbiAgdmFyIERpcmVjdGlvbiA9IHtcbiAgICBORVhUOiAnbmV4dCcsXG4gICAgUFJFVjogJ3ByZXYnLFxuICAgIExFRlQ6ICdsZWZ0JyxcbiAgICBSSUdIVDogJ3JpZ2h0J1xuICB9O1xuXG4gIHZhciBFdmVudCA9IHtcbiAgICBTTElERTogJ3NsaWRlJyArIEVWRU5UX0tFWSxcbiAgICBTTElEOiAnc2xpZCcgKyBFVkVOVF9LRVksXG4gICAgS0VZRE9XTjogJ2tleWRvd24nICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFRU5URVI6ICdtb3VzZWVudGVyJyArIEVWRU5UX0tFWSxcbiAgICBNT1VTRUxFQVZFOiAnbW91c2VsZWF2ZScgKyBFVkVOVF9LRVksXG4gICAgVE9VQ0hFTkQ6ICd0b3VjaGVuZCcgKyBFVkVOVF9LRVksXG4gICAgTE9BRF9EQVRBX0FQSTogJ2xvYWQnICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgIENMSUNLX0RBVEFfQVBJOiAnY2xpY2snICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG5cbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBDQVJPVVNFTDogJ2Nhcm91c2VsJyxcbiAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgIFNMSURFOiAnc2xpZGUnLFxuICAgIFJJR0hUOiAnY2Fyb3VzZWwtaXRlbS1yaWdodCcsXG4gICAgTEVGVDogJ2Nhcm91c2VsLWl0ZW0tbGVmdCcsXG4gICAgTkVYVDogJ2Nhcm91c2VsLWl0ZW0tbmV4dCcsXG4gICAgUFJFVjogJ2Nhcm91c2VsLWl0ZW0tcHJldicsXG4gICAgSVRFTTogJ2Nhcm91c2VsLWl0ZW0nXG4gIH07XG5cbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIEFDVElWRV9JVEVNOiAnLmFjdGl2ZS5jYXJvdXNlbC1pdGVtJyxcbiAgICBJVEVNOiAnLmNhcm91c2VsLWl0ZW0nLFxuICAgIE5FWFRfUFJFVjogJy5jYXJvdXNlbC1pdGVtLW5leHQsIC5jYXJvdXNlbC1pdGVtLXByZXYnLFxuICAgIElORElDQVRPUlM6ICcuY2Fyb3VzZWwtaW5kaWNhdG9ycycsXG4gICAgREFUQV9TTElERTogJ1tkYXRhLXNsaWRlXSwgW2RhdGEtc2xpZGUtdG9dJyxcbiAgICBEQVRBX1JJREU6ICdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nXG5cbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcbiAgdmFyIENhcm91c2VsID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhcm91c2VsKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhcm91c2VsKTtcblxuICAgICAgdGhpcy5faXRlbXMgPSBudWxsO1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG5cbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcblxuICAgICAgdGhpcy50b3VjaFRpbWVvdXQgPSBudWxsO1xuXG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSAkKGVsZW1lbnQpWzBdO1xuICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuSU5ESUNBVE9SUylbMF07XG5cbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgLy8gZ2V0dGVyc1xuXG4gICAgLy8gcHVibGljXG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICBpZiAoIXRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICB0aGlzLl9zbGlkZShEaXJlY3Rpb24uTkVYVCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS5uZXh0V2hlblZpc2libGUgPSBmdW5jdGlvbiBuZXh0V2hlblZpc2libGUoKSB7XG4gICAgICAvLyBEb24ndCBjYWxsIG5leHQgd2hlbiB0aGUgcGFnZSBpc24ndCB2aXNpYmxlXG4gICAgICBpZiAoIWRvY3VtZW50LmhpZGRlbikge1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiBwcmV2KCkge1xuICAgICAgaWYgKCF0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgICAgdGhpcy5fc2xpZGUoRGlyZWN0aW9uLlBSRVYpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShldmVudCkge1xuICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuTkVYVF9QUkVWKVswXSAmJiBVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKSB7XG4gICAgICAgIFV0aWwudHJpZ2dlclRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgIHRoaXMuY3ljbGUodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUuY3ljbGUgPSBmdW5jdGlvbiBjeWNsZShldmVudCkge1xuICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faW50ZXJ2YWwpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5pbnRlcnZhbCAmJiAhdGhpcy5faXNQYXVzZWQpIHtcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID8gdGhpcy5uZXh0V2hlblZpc2libGUgOiB0aGlzLm5leHQpLmJpbmQodGhpcyksIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIHRvKGluZGV4KSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9ICQodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkVfSVRFTSlbMF07XG5cbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KTtcblxuICAgICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub25lKEV2ZW50LlNMSUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLnRvKGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZUluZGV4ID09PSBpbmRleCkge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgIHRoaXMuY3ljbGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlyZWN0aW9uID0gaW5kZXggPiBhY3RpdmVJbmRleCA/IERpcmVjdGlvbi5ORVhUIDogRGlyZWN0aW9uLlBSRVY7XG5cbiAgICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbiwgdGhpcy5faXRlbXNbaW5kZXhdKTtcbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRVZFTlRfS0VZKTtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG5cbiAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gcHJpdmF0ZVxuXG4gICAgQ2Fyb3VzZWwucHJvdG90eXBlLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gJC5leHRlbmQoe30sIERlZmF1bHQsIGNvbmZpZyk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS5fYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LktFWURPV04sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczQuX2tleWRvd24oZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50Lk1PVVNFRU5URVIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczQucGF1c2UoZXZlbnQpO1xuICAgICAgICB9KS5vbihFdmVudC5NT1VTRUxFQVZFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM0LmN5Y2xlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBpZiBpdCdzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2UsIG1vdXNlZW50ZXIvbGVhdmUgYXJlIGZpcmVkIGFzXG4gICAgICAgICAgLy8gcGFydCBvZiB0aGUgbW91c2UgY29tcGF0aWJpbGl0eSBldmVudHMgb24gZmlyc3QgdGFwIC0gdGhlIGNhcm91c2VsXG4gICAgICAgICAgLy8gd291bGQgc3RvcCBjeWNsaW5nIHVudGlsIHVzZXIgdGFwcGVkIG91dCBvZiBpdDtcbiAgICAgICAgICAvLyBoZXJlLCB3ZSBsaXN0ZW4gZm9yIHRvdWNoZW5kLCBleHBsaWNpdGx5IHBhdXNlIHRoZSBjYXJvdXNlbFxuICAgICAgICAgIC8vIChhcyBpZiBpdCdzIHRoZSBzZWNvbmQgdGltZSB3ZSB0YXAgb24gaXQsIG1vdXNlZW50ZXIgY29tcGF0IGV2ZW50XG4gICAgICAgICAgLy8gaXMgTk9UIGZpcmVkKSBhbmQgYWZ0ZXIgYSB0aW1lb3V0ICh0byBhbGxvdyBmb3IgbW91c2UgY29tcGF0aWJpbGl0eVxuICAgICAgICAgIC8vIGV2ZW50cyB0byBmaXJlKSB3ZSBleHBsaWNpdGx5IHJlc3RhcnQgY3ljbGluZ1xuICAgICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuVE9VQ0hFTkQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzNC5wYXVzZSgpO1xuICAgICAgICAgICAgaWYgKF90aGlzNC50b3VjaFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzNC50b3VjaFRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXM0LnRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczQuY3ljbGUoZXZlbnQpO1xuICAgICAgICAgICAgfSwgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCArIF90aGlzNC5fY29uZmlnLmludGVydmFsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUuX2tleWRvd24gPSBmdW5jdGlvbiBfa2V5ZG93bihldmVudCkge1xuICAgICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChldmVudC53aGljaCkge1xuICAgICAgICBjYXNlIEFSUk9XX0xFRlRfS0VZQ09ERTpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMucHJldigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFSUk9XX1JJR0hUX0tFWUNPREU6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS5fZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gX2dldEl0ZW1JbmRleChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9pdGVtcyA9ICQubWFrZUFycmF5KCQoZWxlbWVudCkucGFyZW50KCkuZmluZChTZWxlY3Rvci5JVEVNKSk7XG4gICAgICByZXR1cm4gdGhpcy5faXRlbXMuaW5kZXhPZihlbGVtZW50KTtcbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwucHJvdG90eXBlLl9nZXRJdGVtQnlEaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0SXRlbUJ5RGlyZWN0aW9uKGRpcmVjdGlvbiwgYWN0aXZlRWxlbWVudCkge1xuICAgICAgdmFyIGlzTmV4dERpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLk5FWFQ7XG4gICAgICB2YXIgaXNQcmV2RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUFJFVjtcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcbiAgICAgIHZhciBsYXN0SXRlbUluZGV4ID0gdGhpcy5faXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpc0dvaW5nVG9XcmFwID0gaXNQcmV2RGlyZWN0aW9uICYmIGFjdGl2ZUluZGV4ID09PSAwIHx8IGlzTmV4dERpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gbGFzdEl0ZW1JbmRleDtcblxuICAgICAgaWYgKGlzR29pbmdUb1dyYXAgJiYgIXRoaXMuX2NvbmZpZy53cmFwKSB7XG4gICAgICAgIHJldHVybiBhY3RpdmVFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVsdGEgPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5QUkVWID8gLTEgOiAxO1xuICAgICAgdmFyIGl0ZW1JbmRleCA9IChhY3RpdmVJbmRleCArIGRlbHRhKSAlIHRoaXMuX2l0ZW1zLmxlbmd0aDtcblxuICAgICAgcmV0dXJuIGl0ZW1JbmRleCA9PT0gLTEgPyB0aGlzLl9pdGVtc1t0aGlzLl9pdGVtcy5sZW5ndGggLSAxXSA6IHRoaXMuX2l0ZW1zW2l0ZW1JbmRleF07XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS5fdHJpZ2dlclNsaWRlRXZlbnQgPSBmdW5jdGlvbiBfdHJpZ2dlclNsaWRlRXZlbnQocmVsYXRlZFRhcmdldCwgZXZlbnREaXJlY3Rpb25OYW1lKSB7XG4gICAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgocmVsYXRlZFRhcmdldCk7XG4gICAgICB2YXIgZnJvbUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KCQodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkVfSVRFTSlbMF0pO1xuICAgICAgdmFyIHNsaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNMSURFLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsXG4gICAgICAgIGRpcmVjdGlvbjogZXZlbnREaXJlY3Rpb25OYW1lLFxuICAgICAgICBmcm9tOiBmcm9tSW5kZXgsXG4gICAgICAgIHRvOiB0YXJnZXRJbmRleFxuICAgICAgfSk7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkZUV2ZW50KTtcblxuICAgICAgcmV0dXJuIHNsaWRlRXZlbnQ7XG4gICAgfTtcblxuICAgIENhcm91c2VsLnByb3RvdHlwZS5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCA9IGZ1bmN0aW9uIF9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIGlmICh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkge1xuICAgICAgICAkKHRoaXMuX2luZGljYXRvcnNFbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG5cbiAgICAgICAgdmFyIG5leHRJbmRpY2F0b3IgPSB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5jaGlsZHJlblt0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudCldO1xuXG4gICAgICAgIGlmIChuZXh0SW5kaWNhdG9yKSB7XG4gICAgICAgICAgJChuZXh0SW5kaWNhdG9yKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBDYXJvdXNlbC5wcm90b3R5cGUuX3NsaWRlID0gZnVuY3Rpb24gX3NsaWRlKGRpcmVjdGlvbiwgZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gJCh0aGlzLl9lbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRV9JVEVNKVswXTtcbiAgICAgIHZhciBhY3RpdmVFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XG4gICAgICB2YXIgbmV4dEVsZW1lbnQgPSBlbGVtZW50IHx8IGFjdGl2ZUVsZW1lbnQgJiYgdGhpcy5fZ2V0SXRlbUJ5RGlyZWN0aW9uKGRpcmVjdGlvbiwgYWN0aXZlRWxlbWVudCk7XG4gICAgICB2YXIgbmV4dEVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChuZXh0RWxlbWVudCk7XG4gICAgICB2YXIgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbCk7XG5cbiAgICAgIHZhciBkaXJlY3Rpb25hbENsYXNzTmFtZSA9IHZvaWQgMDtcbiAgICAgIHZhciBvcmRlckNsYXNzTmFtZSA9IHZvaWQgMDtcbiAgICAgIHZhciBldmVudERpcmVjdGlvbk5hbWUgPSB2b2lkIDA7XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUKSB7XG4gICAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLkxFRlQ7XG4gICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLk5FWFQ7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5MRUZUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUuUklHSFQ7XG4gICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlBSRVY7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5SSUdIVDtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRFbGVtZW50ICYmICQobmV4dEVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpKSB7XG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSk7XG4gICAgICBpZiAoc2xpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcbiAgICAgICAgLy8gc29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNTbGlkaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobmV4dEVsZW1lbnQpO1xuXG4gICAgICB2YXIgc2xpZEV2ZW50ID0gJC5FdmVudChFdmVudC5TTElELCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IG5leHRFbGVtZW50LFxuICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgICAgZnJvbTogYWN0aXZlRWxlbWVudEluZGV4LFxuICAgICAgICB0bzogbmV4dEVsZW1lbnRJbmRleFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNMSURFKSkge1xuXG4gICAgICAgICQobmV4dEVsZW1lbnQpLmFkZENsYXNzKG9yZGVyQ2xhc3NOYW1lKTtcblxuICAgICAgICBVdGlsLnJlZmxvdyhuZXh0RWxlbWVudCk7XG5cbiAgICAgICAgJChhY3RpdmVFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgICQobmV4dEVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcblxuICAgICAgICAkKGFjdGl2ZUVsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJChuZXh0RWxlbWVudCkucmVtb3ZlQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUgKyAnICcgKyBvcmRlckNsYXNzTmFtZSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG5cbiAgICAgICAgICAkKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUgKyAnICcgKyBvcmRlckNsYXNzTmFtZSArICcgJyArIGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcblxuICAgICAgICAgIF90aGlzNS5faXNTbGlkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAkKF90aGlzNS5fZWxlbWVudCkudHJpZ2dlcihzbGlkRXZlbnQpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICQobmV4dEVsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuXG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuICAgICAgICB2YXIgX2NvbmZpZyA9ICQuZXh0ZW5kKHt9LCBEZWZhdWx0LCAkKHRoaXMpLmRhdGEoKSk7XG5cbiAgICAgICAgaWYgKCh0eXBlb2YgY29uZmlnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb25maWcpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAkLmV4dGVuZChfY29uZmlnLCBjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGlvbiA9IHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnID8gY29uZmlnIDogX2NvbmZpZy5zbGlkZTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IENhcm91c2VsKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBkYXRhLnRvKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoZGF0YVthY3Rpb25dID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJyArIGFjdGlvbiArICdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhW2FjdGlvbl0oKTtcbiAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLmludGVydmFsKSB7XG4gICAgICAgICAgZGF0YS5wYXVzZSgpO1xuICAgICAgICAgIGRhdGEuY3ljbGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlDbGlja0hhbmRsZXIoZXZlbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcblxuICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0YXJnZXQgPSAkKHNlbGVjdG9yKVswXTtcblxuICAgICAgaWYgKCF0YXJnZXQgfHwgISQodGFyZ2V0KS5oYXNDbGFzcyhDbGFzc05hbWUuQ0FST1VTRUwpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbmZpZyA9ICQuZXh0ZW5kKHt9LCAkKHRhcmdldCkuZGF0YSgpLCAkKHRoaXMpLmRhdGEoKSk7XG4gICAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlLXRvJyk7XG5cbiAgICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICAgIGNvbmZpZy5pbnRlcnZhbCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0YXJnZXQpLCBjb25maWcpO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICAkKHRhcmdldCkuZGF0YShEQVRBX0tFWSkudG8oc2xpZGVJbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhDYXJvdXNlbCwgbnVsbCwgW3tcbiAgICAgIGtleTogJ1ZFUlNJT04nLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0RlZmF1bHQnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDYXJvdXNlbDtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1NMSURFLCBDYXJvdXNlbC5fZGF0YUFwaUNsaWNrSGFuZGxlcik7XG5cbiAgJCh3aW5kb3cpLm9uKEV2ZW50LkxPQURfREFUQV9BUEksIGZ1bmN0aW9uICgpIHtcbiAgICAkKFNlbGVjdG9yLkRBVEFfUklERSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJGNhcm91c2VsID0gJCh0aGlzKTtcbiAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpO1xuICAgIH0pO1xuICB9KTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBDYXJvdXNlbDtcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIENhcm91c2VsO1xufShqUXVlcnkpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1iZXRhKTogY29sbGFwc2UuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBDb2xsYXBzZSA9IGZ1bmN0aW9uICgkKSB7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ2NvbGxhcHNlJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYmV0YSc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5jb2xsYXBzZSc7XG4gIHZhciBFVkVOVF9LRVkgPSAnLicgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSA2MDA7XG5cbiAgdmFyIERlZmF1bHQgPSB7XG4gICAgdG9nZ2xlOiB0cnVlLFxuICAgIHBhcmVudDogJydcbiAgfTtcblxuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgdG9nZ2xlOiAnYm9vbGVhbicsXG4gICAgcGFyZW50OiAnc3RyaW5nJ1xuICB9O1xuXG4gIHZhciBFdmVudCA9IHtcbiAgICBTSE9XOiAnc2hvdycgKyBFVkVOVF9LRVksXG4gICAgU0hPV046ICdzaG93bicgKyBFVkVOVF9LRVksXG4gICAgSElERTogJ2hpZGUnICsgRVZFTlRfS0VZLFxuICAgIEhJRERFTjogJ2hpZGRlbicgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6ICdjbGljaycgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcblxuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIFNIT1c6ICdzaG93JyxcbiAgICBDT0xMQVBTRTogJ2NvbGxhcHNlJyxcbiAgICBDT0xMQVBTSU5HOiAnY29sbGFwc2luZycsXG4gICAgQ09MTEFQU0VEOiAnY29sbGFwc2VkJ1xuICB9O1xuXG4gIHZhciBEaW1lbnNpb24gPSB7XG4gICAgV0lEVEg6ICd3aWR0aCcsXG4gICAgSEVJR0hUOiAnaGVpZ2h0J1xuICB9O1xuXG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBBQ1RJVkVTOiAnLnNob3csIC5jb2xsYXBzaW5nJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJ1xuXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG4gIHZhciBDb2xsYXBzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb2xsYXBzZShlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xsYXBzZSk7XG5cbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9ICQubWFrZUFycmF5KCQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJyArIGVsZW1lbnQuaWQgKyAnXCJdLCcgKyAoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXScpKSk7XG4gICAgICB2YXIgdGFiVG9nZ2xlcyA9ICQoU2VsZWN0b3IuREFUQV9UT0dHTEUpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWJUb2dnbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbGVtID0gdGFiVG9nZ2xlc1tpXTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pO1xuICAgICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwgJiYgJChzZWxlY3RvcikuZmlsdGVyKGVsZW1lbnQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChlbGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9wYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50ID8gdGhpcy5fZ2V0UGFyZW50KCkgOiBudWxsO1xuXG4gICAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcudG9nZ2xlKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZ2V0dGVyc1xuXG4gICAgLy8gcHVibGljXG5cbiAgICBDb2xsYXBzZS5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgaWYgKCQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbGxhcHNlLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjdGl2ZXMgPSB2b2lkIDA7XG4gICAgICB2YXIgYWN0aXZlc0RhdGEgPSB2b2lkIDA7XG5cbiAgICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcbiAgICAgICAgYWN0aXZlcyA9ICQubWFrZUFycmF5KCQodGhpcy5fcGFyZW50KS5jaGlsZHJlbigpLmNoaWxkcmVuKFNlbGVjdG9yLkFDVElWRVMpKTtcbiAgICAgICAgaWYgKCFhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgICAgIGFjdGl2ZXMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmVzKSB7XG4gICAgICAgIGFjdGl2ZXNEYXRhID0gJChhY3RpdmVzKS5kYXRhKERBVEFfS0VZKTtcbiAgICAgICAgaWYgKGFjdGl2ZXNEYXRhICYmIGFjdGl2ZXNEYXRhLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1cpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZlcykge1xuICAgICAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJChhY3RpdmVzKSwgJ2hpZGUnKTtcbiAgICAgICAgaWYgKCFhY3RpdmVzRGF0YSkge1xuICAgICAgICAgICQoYWN0aXZlcykuZGF0YShEQVRBX0tFWSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAwO1xuXG4gICAgICBpZiAodGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgICAkKHRoaXMuX3RyaWdnZXJBcnJheSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCkuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAkKF90aGlzNi5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAgIF90aGlzNi5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XG5cbiAgICAgICAgX3RoaXM2LnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuXG4gICAgICAgICQoX3RoaXM2Ll9lbGVtZW50KS50cmlnZ2VyKEV2ZW50LlNIT1dOKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICghVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSkge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjYXBpdGFsaXplZERpbWVuc2lvbiA9IGRpbWVuc2lvblswXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKDEpO1xuICAgICAgdmFyIHNjcm9sbFNpemUgPSAnc2Nyb2xsJyArIGNhcGl0YWxpemVkRGltZW5zaW9uO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IHRoaXMuX2VsZW1lbnRbc2Nyb2xsU2l6ZV0gKyAncHgnO1xuICAgIH07XG5cbiAgICBDb2xsYXBzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAhJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc3RhcnRFdmVudCk7XG4gICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtkaW1lbnNpb25dICsgJ3B4JztcblxuICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudCk7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICBpZiAodGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciB0cmlnZ2VyID0gdGhpcy5fdHJpZ2dlckFycmF5W2ldO1xuICAgICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0cmlnZ2VyKTtcbiAgICAgICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciAkZWxlbSA9ICQoc2VsZWN0b3IpO1xuICAgICAgICAgICAgaWYgKCEkZWxlbS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICAgICAgJCh0cmlnZ2VyKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBfdGhpczcuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XG4gICAgICAgICQoX3RoaXM3Ll9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS50cmlnZ2VyKEV2ZW50LkhJRERFTik7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJztcblxuICAgICAgaWYgKCFVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgIH07XG5cbiAgICBDb2xsYXBzZS5wcm90b3R5cGUuc2V0VHJhbnNpdGlvbmluZyA9IGZ1bmN0aW9uIHNldFRyYW5zaXRpb25pbmcoaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBpc1RyYW5zaXRpb25pbmc7XG4gICAgfTtcblxuICAgIENvbGxhcHNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG5cbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBudWxsO1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gcHJpdmF0ZVxuXG4gICAgQ29sbGFwc2UucHJvdG90eXBlLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gJC5leHRlbmQoe30sIERlZmF1bHQsIGNvbmZpZyk7XG4gICAgICBjb25maWcudG9nZ2xlID0gQm9vbGVhbihjb25maWcudG9nZ2xlKTsgLy8gY29lcmNlIHN0cmluZyB2YWx1ZXNcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgQ29sbGFwc2UucHJvdG90eXBlLl9nZXREaW1lbnNpb24gPSBmdW5jdGlvbiBfZ2V0RGltZW5zaW9uKCkge1xuICAgICAgdmFyIGhhc1dpZHRoID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhEaW1lbnNpb24uV0lEVEgpO1xuICAgICAgcmV0dXJuIGhhc1dpZHRoID8gRGltZW5zaW9uLldJRFRIIDogRGltZW5zaW9uLkhFSUdIVDtcbiAgICB9O1xuXG4gICAgQ29sbGFwc2UucHJvdG90eXBlLl9nZXRQYXJlbnQgPSBmdW5jdGlvbiBfZ2V0UGFyZW50KCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHZhciBwYXJlbnQgPSAkKHRoaXMuX2NvbmZpZy5wYXJlbnQpWzBdO1xuICAgICAgdmFyIHNlbGVjdG9yID0gJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtcGFyZW50PVwiJyArIHRoaXMuX2NvbmZpZy5wYXJlbnQgKyAnXCJdJztcblxuICAgICAgJChwYXJlbnQpLmZpbmQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcbiAgICAgICAgX3RoaXM4Ll9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpLCBbZWxlbWVudF0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfTtcblxuICAgIENvbGxhcHNlLnByb3RvdHlwZS5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzID0gZnVuY3Rpb24gX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhlbGVtZW50LCB0cmlnZ2VyQXJyYXkpIHtcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBpc09wZW4gPSAkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgICBpZiAodHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICQodHJpZ2dlckFycmF5KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VELCAhaXNPcGVuKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBzdGF0aWNcblxuICAgIENvbGxhcHNlLl9nZXRUYXJnZXRGcm9tRWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICByZXR1cm4gc2VsZWN0b3IgPyAkKHNlbGVjdG9yKVswXSA6IG51bGw7XG4gICAgfTtcblxuICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YShEQVRBX0tFWSk7XG4gICAgICAgIHZhciBfY29uZmlnID0gJC5leHRlbmQoe30sIERlZmF1bHQsICR0aGlzLmRhdGEoKSwgKHR5cGVvZiBjb25maWcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNvbmZpZykpID09PSAnb2JqZWN0JyAmJiBjb25maWcpO1xuXG4gICAgICAgIGlmICghZGF0YSAmJiBfY29uZmlnLnRvZ2dsZSAmJiAvc2hvd3xoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkdGhpcy5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInICsgY29uZmlnICsgJ1wiJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKENvbGxhcHNlLCBudWxsLCBbe1xuICAgICAga2V5OiAnVkVSU0lPTicsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnRGVmYXVsdCcsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENvbGxhcHNlO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoIS9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciAkdHJpZ2dlciA9ICQodGhpcyk7XG4gICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuICAgICQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0YXJnZXQgPSAkKHRoaXMpO1xuICAgICAgdmFyIGRhdGEgPSAkdGFyZ2V0LmRhdGEoREFUQV9LRVkpO1xuICAgICAgdmFyIGNvbmZpZyA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0cmlnZ2VyLmRhdGEoKTtcbiAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkdGFyZ2V0LCBjb25maWcpO1xuICAgIH0pO1xuICB9KTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBDb2xsYXBzZTtcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIENvbGxhcHNlO1xufShqUXVlcnkpO1xuXG4vKiBnbG9iYWwgUG9wcGVyICovXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wLWJldGEpOiBkcm9wZG93bi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKCQpIHtcblxuICAvKipcbiAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XG4gICAqIFBvcHBlciAtIGh0dHBzOi8vcG9wcGVyLmpzLm9yZ1xuICAgKi9cbiAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXAgZHJvcGRvd24gcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZyknKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdkcm9wZG93bic7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wLWJldGEnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuZHJvcGRvd24nO1xuICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBFU0NBUEVfS0VZQ09ERSA9IDI3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBFc2NhcGUgKEVzYykga2V5XG4gIHZhciBTUEFDRV9LRVlDT0RFID0gMzI7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHNwYWNlIGtleVxuICB2YXIgVEFCX0tFWUNPREUgPSA5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB0YWIga2V5XG4gIHZhciBBUlJPV19VUF9LRVlDT0RFID0gMzg7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHVwIGFycm93IGtleVxuICB2YXIgQVJST1dfRE9XTl9LRVlDT0RFID0gNDA7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGRvd24gYXJyb3cga2V5XG4gIHZhciBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggPSAzOyAvLyBNb3VzZUV2ZW50LndoaWNoIHZhbHVlIGZvciB0aGUgcmlnaHQgYnV0dG9uIChhc3N1bWluZyBhIHJpZ2h0LWhhbmRlZCBtb3VzZSlcbiAgdmFyIFJFR0VYUF9LRVlET1dOID0gbmV3IFJlZ0V4cChBUlJPV19VUF9LRVlDT0RFICsgJ3wnICsgQVJST1dfRE9XTl9LRVlDT0RFICsgJ3wnICsgRVNDQVBFX0tFWUNPREUpO1xuXG4gIHZhciBFdmVudCA9IHtcbiAgICBISURFOiAnaGlkZScgKyBFVkVOVF9LRVksXG4gICAgSElEREVOOiAnaGlkZGVuJyArIEVWRU5UX0tFWSxcbiAgICBTSE9XOiAnc2hvdycgKyBFVkVOVF9LRVksXG4gICAgU0hPV046ICdzaG93bicgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0s6ICdjbGljaycgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6ICdjbGljaycgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVksXG4gICAgS0VZRE9XTl9EQVRBX0FQSTogJ2tleWRvd24nICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgIEtFWVVQX0RBVEFfQVBJOiAna2V5dXAnICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG5cbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBESVNBQkxFRDogJ2Rpc2FibGVkJyxcbiAgICBTSE9XOiAnc2hvdycsXG4gICAgRFJPUFVQOiAnZHJvcHVwJyxcbiAgICBNRU5VUklHSFQ6ICdkcm9wZG93bi1tZW51LXJpZ2h0JyxcbiAgICBNRU5VTEVGVDogJ2Ryb3Bkb3duLW1lbnUtbGVmdCdcbiAgfTtcblxuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXScsXG4gICAgRk9STV9DSElMRDogJy5kcm9wZG93biBmb3JtJyxcbiAgICBNRU5VOiAnLmRyb3Bkb3duLW1lbnUnLFxuICAgIE5BVkJBUl9OQVY6ICcubmF2YmFyLW5hdicsXG4gICAgVklTSUJMRV9JVEVNUzogJy5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpJ1xuICB9O1xuXG4gIHZhciBBdHRhY2htZW50TWFwID0ge1xuICAgIFRPUDogJ3RvcC1zdGFydCcsXG4gICAgVE9QRU5EOiAndG9wLWVuZCcsXG4gICAgQk9UVE9NOiAnYm90dG9tLXN0YXJ0JyxcbiAgICBCT1RUT01FTkQ6ICdib3R0b20tZW5kJ1xuICB9O1xuXG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIHBsYWNlbWVudDogQXR0YWNobWVudE1hcC5CT1RUT00sXG4gICAgb2Zmc2V0OiAwLFxuICAgIGZsaXA6IHRydWVcbiAgfTtcblxuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgcGxhY2VtZW50OiAnc3RyaW5nJyxcbiAgICBvZmZzZXQ6ICcobnVtYmVyfHN0cmluZyknLFxuICAgIGZsaXA6ICdib29sZWFuJ1xuXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG4gIHZhciBEcm9wZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEcm9wZG93bihlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcm9wZG93bik7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fbWVudSA9IHRoaXMuX2dldE1lbnVFbGVtZW50KCk7XG4gICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpO1xuXG4gICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIC8vIGdldHRlcnNcblxuICAgIC8vIHB1YmxpY1xuXG4gICAgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICh0aGlzLl9lbGVtZW50LmRpc2FibGVkIHx8ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICB2YXIgaXNBY3RpdmUgPSAkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgRHJvcGRvd24uX2NsZWFyTWVudXMoKTtcblxuICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH07XG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XLCByZWxhdGVkVGFyZ2V0KTtcblxuICAgICAgJChwYXJlbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcblxuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcbiAgICAgIC8vIGZvciBkcm9wdXAgd2l0aCBhbGlnbm1lbnQgd2UgdXNlIHRoZSBwYXJlbnQgYXMgcG9wcGVyIGNvbnRhaW5lclxuICAgICAgaWYgKCQocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUFVQKSkge1xuICAgICAgICBpZiAoJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuTUVOVUxFRlQpIHx8ICQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gcGFyZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9wb3BwZXIgPSBuZXcgUG9wcGVyKGVsZW1lbnQsIHRoaXMuX21lbnUsIHRoaXMuX2dldFBvcHBlckNvbmZpZygpKTtcblxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgISQocGFyZW50KS5jbG9zZXN0KFNlbGVjdG9yLk5BVkJBUl9OQVYpLmxlbmd0aCkge1xuICAgICAgICAkKCdib2R5JykuY2hpbGRyZW4oKS5vbignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcblxuICAgICAgJCh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG4gICAgICAkKHBhcmVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpLnRyaWdnZXIoJC5FdmVudChFdmVudC5TSE9XTiwgcmVsYXRlZFRhcmdldCkpO1xuICAgIH07XG5cbiAgICBEcm9wZG93bi5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRVZFTlRfS0VZKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fbWVudSA9IG51bGw7XG4gICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgIH07XG5cbiAgICBEcm9wZG93bi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIHByaXZhdGVcblxuICAgIERyb3Bkb3duLnByb3RvdHlwZS5fYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDSywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBfdGhpczkudG9nZ2xlKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24ucHJvdG90eXBlLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgdmFyIGVsZW1lbnREYXRhID0gJCh0aGlzLl9lbGVtZW50KS5kYXRhKCk7XG4gICAgICBpZiAoZWxlbWVudERhdGEucGxhY2VtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZWxlbWVudERhdGEucGxhY2VtZW50ID0gQXR0YWNobWVudE1hcFtlbGVtZW50RGF0YS5wbGFjZW1lbnQudG9VcHBlckNhc2UoKV07XG4gICAgICB9XG5cbiAgICAgIGNvbmZpZyA9ICQuZXh0ZW5kKHt9LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsICQodGhpcy5fZWxlbWVudCkuZGF0YSgpLCBjb25maWcpO1xuXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpO1xuXG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBEcm9wZG93bi5wcm90b3R5cGUuX2dldE1lbnVFbGVtZW50ID0gZnVuY3Rpb24gX2dldE1lbnVFbGVtZW50KCkge1xuICAgICAgaWYgKCF0aGlzLl9tZW51KSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgIHRoaXMuX21lbnUgPSAkKHBhcmVudCkuZmluZChTZWxlY3Rvci5NRU5VKVswXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9tZW51O1xuICAgIH07XG5cbiAgICBEcm9wZG93bi5wcm90b3R5cGUuX2dldFBsYWNlbWVudCA9IGZ1bmN0aW9uIF9nZXRQbGFjZW1lbnQoKSB7XG4gICAgICB2YXIgJHBhcmVudERyb3Bkb3duID0gJCh0aGlzLl9lbGVtZW50KS5wYXJlbnQoKTtcbiAgICAgIHZhciBwbGFjZW1lbnQgPSB0aGlzLl9jb25maWcucGxhY2VtZW50O1xuXG4gICAgICAvLyBIYW5kbGUgZHJvcHVwXG4gICAgICBpZiAoJHBhcmVudERyb3Bkb3duLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QVVApIHx8IHRoaXMuX2NvbmZpZy5wbGFjZW1lbnQgPT09IEF0dGFjaG1lbnRNYXAuVE9QKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QO1xuICAgICAgICBpZiAoJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuTUVOVVJJR0hUKSkge1xuICAgICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QRU5EO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5CT1RUT01FTkQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGxhY2VtZW50O1xuICAgIH07XG5cbiAgICBEcm9wZG93bi5wcm90b3R5cGUuX2RldGVjdE5hdmJhciA9IGZ1bmN0aW9uIF9kZXRlY3ROYXZiYXIoKSB7XG4gICAgICByZXR1cm4gJCh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KCcubmF2YmFyJykubGVuZ3RoID4gMDtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24ucHJvdG90eXBlLl9nZXRQb3BwZXJDb25maWcgPSBmdW5jdGlvbiBfZ2V0UG9wcGVyQ29uZmlnKCkge1xuICAgICAgdmFyIHBvcHBlckNvbmZpZyA9IHtcbiAgICAgICAgcGxhY2VtZW50OiB0aGlzLl9nZXRQbGFjZW1lbnQoKSxcbiAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgb2Zmc2V0OiB7XG4gICAgICAgICAgICBvZmZzZXQ6IHRoaXMuX2NvbmZpZy5vZmZzZXRcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZsaXA6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRoaXMuX2NvbmZpZy5mbGlwXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGlzYWJsZSBQb3BwZXIuanMgZm9yIERyb3Bkb3duIGluIE5hdmJhclxuICAgICAgfTtpZiAodGhpcy5faW5OYXZiYXIpIHtcbiAgICAgICAgcG9wcGVyQ29uZmlnLm1vZGlmaWVycy5hcHBseVN0eWxlID0ge1xuICAgICAgICAgIGVuYWJsZWQ6ICF0aGlzLl9pbk5hdmJhclxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBvcHBlckNvbmZpZztcbiAgICB9O1xuXG4gICAgLy8gc3RhdGljXG5cbiAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSk7XG4gICAgICAgIHZhciBfY29uZmlnID0gKHR5cGVvZiBjb25maWcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNvbmZpZykpID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBjb25maWcgKyAnXCInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBEcm9wZG93bi5fY2xlYXJNZW51cyA9IGZ1bmN0aW9uIF9jbGVhck1lbnVzKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LndoaWNoID09PSBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCAhPT0gVEFCX0tFWUNPREUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRvZ2dsZXMgPSAkLm1ha2VBcnJheSgkKFNlbGVjdG9yLkRBVEFfVE9HR0xFKSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvZ2dsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0b2dnbGVzW2ldKTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSAkKHRvZ2dsZXNbaV0pLmRhdGEoREFUQV9LRVkpO1xuICAgICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0b2dnbGVzW2ldXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHJvcGRvd25NZW51ID0gY29udGV4dC5fbWVudTtcbiAgICAgICAgaWYgKCEkKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCA9PT0gVEFCX0tFWUNPREUpICYmICQuY29udGFpbnMocGFyZW50LCBldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudC5ISURFLCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgJChwYXJlbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcbiAgICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICQoJ2JvZHknKS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZXNbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgJChkcm9wZG93bk1lbnUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcbiAgICAgICAgJChwYXJlbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRQYXJlbnRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgcGFyZW50ID0gdm9pZCAwO1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcGFyZW50ID0gJChzZWxlY3RvcilbMF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJlbnQgfHwgZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIH07XG5cbiAgICBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlLZXlkb3duSGFuZGxlcihldmVudCkge1xuICAgICAgaWYgKCFSRUdFWFBfS0VZRE9XTi50ZXN0KGV2ZW50LndoaWNoKSB8fCAvYnV0dG9uL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgJiYgZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUgfHwgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICQodGhpcykuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyk7XG4gICAgICB2YXIgaXNBY3RpdmUgPSAkKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICBpZiAoIWlzQWN0aXZlICYmIChldmVudC53aGljaCAhPT0gRVNDQVBFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggIT09IFNQQUNFX0tFWUNPREUpIHx8IGlzQWN0aXZlICYmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUpKSB7XG5cbiAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSkge1xuICAgICAgICAgIHZhciB0b2dnbGUgPSAkKHBhcmVudCkuZmluZChTZWxlY3Rvci5EQVRBX1RPR0dMRSlbMF07XG4gICAgICAgICAgJCh0b2dnbGUpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMpLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGl0ZW1zID0gJChwYXJlbnQpLmZpbmQoU2VsZWN0b3IuVklTSUJMRV9JVEVNUykuZ2V0KCk7XG5cbiAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gaXRlbXMuaW5kZXhPZihldmVudC50YXJnZXQpO1xuXG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX1VQX0tFWUNPREUgJiYgaW5kZXggPiAwKSB7XG4gICAgICAgIC8vIHVwXG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfRE9XTl9LRVlDT0RFICYmIGluZGV4IDwgaXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAvLyBkb3duXG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICBpdGVtc1tpbmRleF0uZm9jdXMoKTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKERyb3Bkb3duLCBudWxsLCBbe1xuICAgICAga2V5OiAnVkVSU0lPTicsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnRGVmYXVsdCcsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnRGVmYXVsdFR5cGUnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRHJvcGRvd247XG4gIH0oKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRXZlbnQuS0VZRE9XTl9EQVRBX0FQSSwgU2VsZWN0b3IuTUVOVSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEkgKyAnICcgKyBFdmVudC5LRVlVUF9EQVRBX0FQSSwgRHJvcGRvd24uX2NsZWFyTWVudXMpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0aGlzKSwgJ3RvZ2dsZScpO1xuICB9KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuRk9STV9DSElMRCwgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9KTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBEcm9wZG93bjtcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIERyb3Bkb3duO1xufShqUXVlcnkpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1iZXRhKTogbW9kYWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBNb2RhbCA9IGZ1bmN0aW9uICgkKSB7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ21vZGFsJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYmV0YSc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5tb2RhbCc7XG4gIHZhciBFVkVOVF9LRVkgPSAnLicgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSAzMDA7XG4gIHZhciBCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuICB2YXIgRVNDQVBFX0tFWUNPREUgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleVxuXG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIGZvY3VzOiB0cnVlLFxuICAgIHNob3c6IHRydWVcbiAgfTtcblxuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgYmFja2Ryb3A6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICAgIGZvY3VzOiAnYm9vbGVhbicsXG4gICAgc2hvdzogJ2Jvb2xlYW4nXG4gIH07XG5cbiAgdmFyIEV2ZW50ID0ge1xuICAgIEhJREU6ICdoaWRlJyArIEVWRU5UX0tFWSxcbiAgICBISURERU46ICdoaWRkZW4nICsgRVZFTlRfS0VZLFxuICAgIFNIT1c6ICdzaG93JyArIEVWRU5UX0tFWSxcbiAgICBTSE9XTjogJ3Nob3duJyArIEVWRU5UX0tFWSxcbiAgICBGT0NVU0lOOiAnZm9jdXNpbicgKyBFVkVOVF9LRVksXG4gICAgUkVTSVpFOiAncmVzaXplJyArIEVWRU5UX0tFWSxcbiAgICBDTElDS19ESVNNSVNTOiAnY2xpY2suZGlzbWlzcycgKyBFVkVOVF9LRVksXG4gICAgS0VZRE9XTl9ESVNNSVNTOiAna2V5ZG93bi5kaXNtaXNzJyArIEVWRU5UX0tFWSxcbiAgICBNT1VTRVVQX0RJU01JU1M6ICdtb3VzZXVwLmRpc21pc3MnICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFRE9XTl9ESVNNSVNTOiAnbW91c2Vkb3duLmRpc21pc3MnICsgRVZFTlRfS0VZLFxuICAgIENMSUNLX0RBVEFfQVBJOiAnY2xpY2snICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG5cbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBTQ1JPTExCQVJfTUVBU1VSRVI6ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZScsXG4gICAgQkFDS0RST1A6ICdtb2RhbC1iYWNrZHJvcCcsXG4gICAgT1BFTjogJ21vZGFsLW9wZW4nLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcblxuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgRElBTE9HOiAnLm1vZGFsLWRpYWxvZycsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsXG4gICAgREFUQV9ESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxcbiAgICBGSVhFRF9DT05URU5UOiAnLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcCcsXG4gICAgTkFWQkFSX1RPR0dMRVI6ICcubmF2YmFyLXRvZ2dsZXInXG5cbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1vZGFsKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsKTtcblxuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX2RpYWxvZyA9ICQoZWxlbWVudCkuZmluZChTZWxlY3Rvci5ESUFMT0cpWzBdO1xuICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZTtcbiAgICAgIHRoaXMuX29yaWdpbmFsQm9keVBhZGRpbmcgPSAwO1xuICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSAwO1xuICAgIH1cblxuICAgIC8vIGdldHRlcnNcblxuICAgIC8vIHB1YmxpY1xuXG4gICAgTW9kYWwucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5faXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KHJlbGF0ZWRUYXJnZXQpO1xuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0XG4gICAgICB9KTtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2hvd24gPSB0cnVlO1xuXG4gICAgICB0aGlzLl9jaGVja1Njcm9sbGJhcigpO1xuICAgICAgdGhpcy5fc2V0U2Nyb2xsYmFyKCk7XG5cbiAgICAgICQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLk9QRU4pO1xuXG4gICAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpO1xuICAgICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKTtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDS19ESVNNSVNTLCBTZWxlY3Rvci5EQVRBX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMxMC5oaWRlKGV2ZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICAkKHRoaXMuX2RpYWxvZykub24oRXZlbnQuTU9VU0VET1dOX0RJU01JU1MsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJChfdGhpczEwLl9lbGVtZW50KS5vbmUoRXZlbnQuTU9VU0VVUF9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKF90aGlzMTAuX2VsZW1lbnQpKSB7XG4gICAgICAgICAgICBfdGhpczEwLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczEwLl9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIGhpZGUoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpczExID0gdGhpcztcblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgIXRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHJhbnNpdGlvbiA9IFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSk7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUpO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgaWYgKCF0aGlzLl9pc1Nob3duIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcblxuICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcbiAgICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICAgICQoZG9jdW1lbnQpLm9mZihFdmVudC5GT0NVU0lOKTtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50LkNMSUNLX0RJU01JU1MpO1xuICAgICAgJCh0aGlzLl9kaWFsb2cpLm9mZihFdmVudC5NT1VTRURPV05fRElTTUlTUyk7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG5cbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTEuX2hpZGVNb2RhbChldmVudCk7XG4gICAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faGlkZU1vZGFsKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG5cbiAgICAgICQod2luZG93LCBkb2N1bWVudCwgdGhpcy5fZWxlbWVudCwgdGhpcy5fYmFja2Ryb3ApLm9mZihFVkVOVF9LRVkpO1xuXG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9kaWFsb2cgPSBudWxsO1xuICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgdGhpcy5faXNTaG93biA9IG51bGw7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IG51bGw7XG4gICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gbnVsbDtcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gbnVsbDtcbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLmhhbmRsZVVwZGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX2FkanVzdERpYWxvZygpO1xuICAgIH07XG5cbiAgICAvLyBwcml2YXRlXG5cbiAgICBNb2RhbC5wcm90b3R5cGUuX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgRGVmYXVsdCwgY29uZmlnKTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9zaG93RWxlbWVudCA9IGZ1bmN0aW9uIF9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7XG5cbiAgICAgIHZhciB0cmFuc2l0aW9uID0gVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKTtcblxuICAgICAgaWYgKCF0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgfHwgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAvLyBkb24ndCBtb3ZlIG1vZGFscyBkb20gcG9zaXRpb25cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICAgICAgdGhpcy5fZWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgdGhpcy5fZW5mb3JjZUZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaG93bkV2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XTiwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0XG4gICAgICB9KTtcblxuICAgICAgdmFyIHRyYW5zaXRpb25Db21wbGV0ZSA9IGZ1bmN0aW9uIHRyYW5zaXRpb25Db21wbGV0ZSgpIHtcbiAgICAgICAgaWYgKF90aGlzMTIuX2NvbmZpZy5mb2N1cykge1xuICAgICAgICAgIF90aGlzMTIuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczEyLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgICAgJChfdGhpczEyLl9lbGVtZW50KS50cmlnZ2VyKHNob3duRXZlbnQpO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgJCh0aGlzLl9kaWFsb2cpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCB0cmFuc2l0aW9uQ29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNpdGlvbkNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gX2VuZm9yY2VGb2N1cygpIHtcbiAgICAgIHZhciBfdGhpczEzID0gdGhpcztcblxuICAgICAgJChkb2N1bWVudCkub2ZmKEV2ZW50LkZPQ1VTSU4pIC8vIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgLm9uKEV2ZW50LkZPQ1VTSU4sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZG9jdW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJiBfdGhpczEzLl9lbGVtZW50ICE9PSBldmVudC50YXJnZXQgJiYgISQoX3RoaXMxMy5fZWxlbWVudCkuaGFzKGV2ZW50LnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgX3RoaXMxMy5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9zZXRFc2NhcGVFdmVudCA9IGZ1bmN0aW9uIF9zZXRFc2NhcGVFdmVudCgpIHtcbiAgICAgIHZhciBfdGhpczE0ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuS0VZRE9XTl9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgX3RoaXMxNC5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQuS0VZRE9XTl9ESVNNSVNTKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9zZXRSZXNpemVFdmVudCA9IGZ1bmN0aW9uIF9zZXRSZXNpemVFdmVudCgpIHtcbiAgICAgIHZhciBfdGhpczE1ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgJCh3aW5kb3cpLm9uKEV2ZW50LlJFU0laRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTUuaGFuZGxlVXBkYXRlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKHdpbmRvdykub2ZmKEV2ZW50LlJFU0laRSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5faGlkZU1vZGFsID0gZnVuY3Rpb24gX2hpZGVNb2RhbCgpIHtcbiAgICAgIHZhciBfdGhpczE2ID0gdGhpcztcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLk9QRU4pO1xuICAgICAgICBfdGhpczE2Ll9yZXNldEFkanVzdG1lbnRzKCk7XG4gICAgICAgIF90aGlzMTYuX3Jlc2V0U2Nyb2xsYmFyKCk7XG4gICAgICAgICQoX3RoaXMxNi5fZWxlbWVudCkudHJpZ2dlcihFdmVudC5ISURERU4pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fcmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiBfcmVtb3ZlQmFja2Ryb3AoKSB7XG4gICAgICBpZiAodGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9zaG93QmFja2Ryb3AgPSBmdW5jdGlvbiBfc2hvd0JhY2tkcm9wKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMxNyA9IHRoaXM7XG5cbiAgICAgIHZhciBhbmltYXRlID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkgPyBDbGFzc05hbWUuRkFERSA6ICcnO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biAmJiB0aGlzLl9jb25maWcuYmFja2Ryb3ApIHtcbiAgICAgICAgdmFyIGRvQW5pbWF0ZSA9IFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgYW5pbWF0ZTtcblxuICAgICAgICB0aGlzLl9iYWNrZHJvcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc05hbWUgPSBDbGFzc05hbWUuQkFDS0RST1A7XG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhhbmltYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpO1xuXG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0tfRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKF90aGlzMTcuX2lnbm9yZUJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgICAgIF90aGlzMTcuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXMxNy5fY29uZmlnLmJhY2tkcm9wID09PSAnc3RhdGljJykge1xuICAgICAgICAgICAgX3RoaXMxNy5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczE3LmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChkb0FuaW1hdGUpIHtcbiAgICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9iYWNrZHJvcCk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZG9BbmltYXRlKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2spLmVtdWxhdGVUcmFuc2l0aW9uRW5kKEJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93biAmJiB0aGlzLl9iYWNrZHJvcCkge1xuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gY2FsbGJhY2tSZW1vdmUoKSB7XG4gICAgICAgICAgX3RoaXMxNy5fcmVtb3ZlQmFja2Ryb3AoKTtcbiAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrUmVtb3ZlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFja1JlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyB0aGUgZm9sbG93aW5nIG1ldGhvZHMgYXJlIHVzZWQgdG8gaGFuZGxlIG92ZXJmbG93aW5nIG1vZGFsc1xuICAgIC8vIHRvZG8gKGZhdCk6IHRoZXNlIHNob3VsZCBwcm9iYWJseSBiZSByZWZhY3RvcmVkIG91dCBvZiBtb2RhbC5qc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIE1vZGFsLnByb3RvdHlwZS5fYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gX2FkanVzdERpYWxvZygpIHtcbiAgICAgIHZhciBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgIGlmICghdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSB0aGlzLl9zY3JvbGxiYXJXaWR0aCArICdweCc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAmJiAhaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyAncHgnO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBNb2RhbC5wcm90b3R5cGUuX3Jlc2V0QWRqdXN0bWVudHMgPSBmdW5jdGlvbiBfcmVzZXRBZGp1c3RtZW50cygpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSAnJztcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJyc7XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fY2hlY2tTY3JvbGxiYXIgPSBmdW5jdGlvbiBfY2hlY2tTY3JvbGxiYXIoKSB7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPCB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gdGhpcy5fZ2V0U2Nyb2xsYmFyV2lkdGgoKTtcbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9zZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiBfc2V0U2Nyb2xsYmFyKCkge1xuICAgICAgdmFyIF90aGlzMTggPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgLy8gTm90ZTogRE9NTm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlIG9yICcnIGlmIG5vdCBzZXRcbiAgICAgICAgLy8gICB3aGlsZSAkKERPTU5vZGUpLmNzcygncGFkZGluZy1yaWdodCcpIHJldHVybnMgdGhlIGNhbGN1bGF0ZWQgdmFsdWUgb3IgMCBpZiBub3Qgc2V0XG5cbiAgICAgICAgLy8gQWRqdXN0IGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuICAgICAgICAkKFNlbGVjdG9yLkZJWEVEX0NPTlRFTlQpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGFjdHVhbFBhZGRpbmcgPSAkKGVsZW1lbnQpWzBdLnN0eWxlLnBhZGRpbmdSaWdodDtcbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkKGVsZW1lbnQpLmNzcygncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAgICQoZWxlbWVudCkuZGF0YSgncGFkZGluZy1yaWdodCcsIGFjdHVhbFBhZGRpbmcpLmNzcygncGFkZGluZy1yaWdodCcsIHBhcnNlRmxvYXQoY2FsY3VsYXRlZFBhZGRpbmcpICsgX3RoaXMxOC5fc2Nyb2xsYmFyV2lkdGggKyAncHgnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWRqdXN0IG5hdmJhci10b2dnbGVyIG1hcmdpblxuICAgICAgICAkKFNlbGVjdG9yLk5BVkJBUl9UT0dHTEVSKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgIHZhciBhY3R1YWxNYXJnaW4gPSAkKGVsZW1lbnQpWzBdLnN0eWxlLm1hcmdpblJpZ2h0O1xuICAgICAgICAgIHZhciBjYWxjdWxhdGVkTWFyZ2luID0gJChlbGVtZW50KS5jc3MoJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICAgICQoZWxlbWVudCkuZGF0YSgnbWFyZ2luLXJpZ2h0JywgYWN0dWFsTWFyZ2luKS5jc3MoJ21hcmdpbi1yaWdodCcsIHBhcnNlRmxvYXQoY2FsY3VsYXRlZE1hcmdpbikgKyBfdGhpczE4Ll9zY3JvbGxiYXJXaWR0aCArICdweCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBZGp1c3QgYm9keSBwYWRkaW5nXG4gICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gICAgICAgIHZhciBjYWxjdWxhdGVkUGFkZGluZyA9ICQoJ2JvZHknKS5jc3MoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgJCgnYm9keScpLmRhdGEoJ3BhZGRpbmctcmlnaHQnLCBhY3R1YWxQYWRkaW5nKS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIHRoaXMuX3Njcm9sbGJhcldpZHRoICsgJ3B4Jyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIE1vZGFsLnByb3RvdHlwZS5fcmVzZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiBfcmVzZXRTY3JvbGxiYXIoKSB7XG4gICAgICAvLyBSZXN0b3JlIGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuICAgICAgJChTZWxlY3Rvci5GSVhFRF9DT05URU5UKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICB2YXIgcGFkZGluZyA9ICQoZWxlbWVudCkuZGF0YSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgICBpZiAodHlwZW9mIHBhZGRpbmcgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgJChlbGVtZW50KS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYWRkaW5nKS5yZW1vdmVEYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZXN0b3JlIG5hdmJhci10b2dnbGVyIG1hcmdpblxuICAgICAgJChTZWxlY3Rvci5OQVZCQVJfVE9HR0xFUikuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIG1hcmdpbiA9ICQoZWxlbWVudCkuZGF0YSgnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgIGlmICh0eXBlb2YgbWFyZ2luICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICQoZWxlbWVudCkuY3NzKCdtYXJnaW4tcmlnaHQnLCBtYXJnaW4pLnJlbW92ZURhdGEoJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gUmVzdG9yZSBib2R5IHBhZGRpbmdcbiAgICAgIHZhciBwYWRkaW5nID0gJCgnYm9keScpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgIGlmICh0eXBlb2YgcGFkZGluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgJCgnYm9keScpLmNzcygncGFkZGluZy1yaWdodCcsIHBhZGRpbmcpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTW9kYWwucHJvdG90eXBlLl9nZXRTY3JvbGxiYXJXaWR0aCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxiYXJXaWR0aCgpIHtcbiAgICAgIC8vIHRoeCBkLndhbHNoXG4gICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gQ2xhc3NOYW1lLlNDUk9MTEJBUl9NRUFTVVJFUjtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aDtcbiAgICB9O1xuXG4gICAgLy8gc3RhdGljXG5cbiAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcsIHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSk7XG4gICAgICAgIHZhciBfY29uZmlnID0gJC5leHRlbmQoe30sIE1vZGFsLkRlZmF1bHQsICQodGhpcykuZGF0YSgpLCAodHlwZW9mIGNvbmZpZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29uZmlnKSkgPT09ICdvYmplY3QnICYmIGNvbmZpZyk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBjb25maWcgKyAnXCInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YVtjb25maWddKHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICB9IGVsc2UgaWYgKF9jb25maWcuc2hvdykge1xuICAgICAgICAgIGRhdGEuc2hvdyhyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhNb2RhbCwgbnVsbCwgW3tcbiAgICAgIGtleTogJ1ZFUlNJT04nLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0RlZmF1bHQnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNb2RhbDtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIF90aGlzMTkgPSB0aGlzO1xuXG4gICAgdmFyIHRhcmdldCA9IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIHRhcmdldCA9ICQoc2VsZWN0b3IpWzBdO1xuICAgIH1cblxuICAgIHZhciBjb25maWcgPSAkKHRhcmdldCkuZGF0YShEQVRBX0tFWSkgPyAndG9nZ2xlJyA6ICQuZXh0ZW5kKHt9LCAkKHRhcmdldCkuZGF0YSgpLCAkKHRoaXMpLmRhdGEoKSk7XG5cbiAgICBpZiAodGhpcy50YWdOYW1lID09PSAnQScgfHwgdGhpcy50YWdOYW1lID09PSAnQVJFQScpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgdmFyICR0YXJnZXQgPSAkKHRhcmdldCkub25lKEV2ZW50LlNIT1csIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgLy8gb25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICR0YXJnZXQub25lKEV2ZW50LkhJRERFTiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJChfdGhpczE5KS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgIF90aGlzMTkuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0YXJnZXQpLCBjb25maWcsIHRoaXMpO1xuICB9KTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IE1vZGFsLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBNb2RhbDtcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsO1xufShqUXVlcnkpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1iZXRhKTogc2Nyb2xsc3B5LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgU2Nyb2xsU3B5ID0gZnVuY3Rpb24gKCQpIHtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUgPSAnc2Nyb2xsc3B5JztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYmV0YSc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5zY3JvbGxzcHknO1xuICB2YXIgRVZFTlRfS0VZID0gJy4nICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG5cbiAgdmFyIERlZmF1bHQgPSB7XG4gICAgb2Zmc2V0OiAxMCxcbiAgICBtZXRob2Q6ICdhdXRvJyxcbiAgICB0YXJnZXQ6ICcnXG4gIH07XG5cbiAgdmFyIERlZmF1bHRUeXBlID0ge1xuICAgIG9mZnNldDogJ251bWJlcicsXG4gICAgbWV0aG9kOiAnc3RyaW5nJyxcbiAgICB0YXJnZXQ6ICcoc3RyaW5nfGVsZW1lbnQpJ1xuICB9O1xuXG4gIHZhciBFdmVudCA9IHtcbiAgICBBQ1RJVkFURTogJ2FjdGl2YXRlJyArIEVWRU5UX0tFWSxcbiAgICBTQ1JPTEw6ICdzY3JvbGwnICsgRVZFTlRfS0VZLFxuICAgIExPQURfREFUQV9BUEk6ICdsb2FkJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuXG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgRFJPUERPV05fSVRFTTogJ2Ryb3Bkb3duLWl0ZW0nLFxuICAgIERST1BET1dOX01FTlU6ICdkcm9wZG93bi1tZW51JyxcbiAgICBBQ1RJVkU6ICdhY3RpdmUnXG4gIH07XG5cbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIERBVEFfU1BZOiAnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJyxcbiAgICBBQ1RJVkU6ICcuYWN0aXZlJyxcbiAgICBOQVZfTElTVF9HUk9VUDogJy5uYXYsIC5saXN0LWdyb3VwJyxcbiAgICBOQVZfTElOS1M6ICcubmF2LWxpbmsnLFxuICAgIExJU1RfSVRFTVM6ICcubGlzdC1ncm91cC1pdGVtJyxcbiAgICBEUk9QRE9XTjogJy5kcm9wZG93bicsXG4gICAgRFJPUERPV05fSVRFTVM6ICcuZHJvcGRvd24taXRlbScsXG4gICAgRFJPUERPV05fVE9HR0xFOiAnLmRyb3Bkb3duLXRvZ2dsZSdcbiAgfTtcblxuICB2YXIgT2Zmc2V0TWV0aG9kID0ge1xuICAgIE9GRlNFVDogJ29mZnNldCcsXG4gICAgUE9TSVRJT046ICdwb3NpdGlvbidcblxuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuICB2YXIgU2Nyb2xsU3B5ID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHZhciBfdGhpczIwID0gdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbFNweSk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IGVsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknID8gd2luZG93IDogZWxlbWVudDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fc2VsZWN0b3IgPSB0aGlzLl9jb25maWcudGFyZ2V0ICsgJyAnICsgU2VsZWN0b3IuTkFWX0xJTktTICsgJywnICsgKHRoaXMuX2NvbmZpZy50YXJnZXQgKyAnICcgKyBTZWxlY3Rvci5MSVNUX0lURU1TICsgJywnKSArICh0aGlzLl9jb25maWcudGFyZ2V0ICsgJyAnICsgU2VsZWN0b3IuRFJPUERPV05fSVRFTVMpO1xuICAgICAgdGhpcy5fb2Zmc2V0cyA9IFtdO1xuICAgICAgdGhpcy5fdGFyZ2V0cyA9IFtdO1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIHRoaXMuX3Njcm9sbEhlaWdodCA9IDA7XG5cbiAgICAgICQodGhpcy5fc2Nyb2xsRWxlbWVudCkub24oRXZlbnQuU0NST0xMLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMjAuX3Byb2Nlc3MoZXZlbnQpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgdGhpcy5fcHJvY2VzcygpO1xuICAgIH1cblxuICAgIC8vIGdldHRlcnNcblxuICAgIC8vIHB1YmxpY1xuXG4gICAgU2Nyb2xsU3B5LnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgIHZhciBfdGhpczIxID0gdGhpcztcblxuICAgICAgdmFyIGF1dG9NZXRob2QgPSB0aGlzLl9zY3JvbGxFbGVtZW50ICE9PSB0aGlzLl9zY3JvbGxFbGVtZW50LndpbmRvdyA/IE9mZnNldE1ldGhvZC5QT1NJVElPTiA6IE9mZnNldE1ldGhvZC5PRkZTRVQ7XG5cbiAgICAgIHZhciBvZmZzZXRNZXRob2QgPSB0aGlzLl9jb25maWcubWV0aG9kID09PSAnYXV0bycgPyBhdXRvTWV0aG9kIDogdGhpcy5fY29uZmlnLm1ldGhvZDtcblxuICAgICAgdmFyIG9mZnNldEJhc2UgPSBvZmZzZXRNZXRob2QgPT09IE9mZnNldE1ldGhvZC5QT1NJVElPTiA/IHRoaXMuX2dldFNjcm9sbFRvcCgpIDogMDtcblxuICAgICAgdGhpcy5fb2Zmc2V0cyA9IFtdO1xuICAgICAgdGhpcy5fdGFyZ2V0cyA9IFtdO1xuXG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcblxuICAgICAgdmFyIHRhcmdldHMgPSAkLm1ha2VBcnJheSgkKHRoaXMuX3NlbGVjdG9yKSk7XG5cbiAgICAgIHRhcmdldHMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB2b2lkIDA7XG4gICAgICAgIHZhciB0YXJnZXRTZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICBpZiAodGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgICAgICB0YXJnZXQgPSAkKHRhcmdldFNlbGVjdG9yKVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICB2YXIgdGFyZ2V0QkNSID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIGlmICh0YXJnZXRCQ1Iud2lkdGggfHwgdGFyZ2V0QkNSLmhlaWdodCkge1xuICAgICAgICAgICAgLy8gdG9kbyAoZmF0KTogcmVtb3ZlIHNrZXRjaCByZWxpYW5jZSBvbiBqUXVlcnkgcG9zaXRpb24vb2Zmc2V0XG4gICAgICAgICAgICByZXR1cm4gWyQodGFyZ2V0KVtvZmZzZXRNZXRob2RdKCkudG9wICsgb2Zmc2V0QmFzZSwgdGFyZ2V0U2VsZWN0b3JdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGFbMF0gLSBiWzBdO1xuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBfdGhpczIxLl9vZmZzZXRzLnB1c2goaXRlbVswXSk7XG4gICAgICAgIF90aGlzMjEuX3RhcmdldHMucHVzaChpdGVtWzFdKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTY3JvbGxTcHkucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgICQodGhpcy5fc2Nyb2xsRWxlbWVudCkub2ZmKEVWRU5UX0tFWSk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fc2VsZWN0b3IgPSBudWxsO1xuICAgICAgdGhpcy5fb2Zmc2V0cyA9IG51bGw7XG4gICAgICB0aGlzLl90YXJnZXRzID0gbnVsbDtcbiAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBwcml2YXRlXG5cbiAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gJC5leHRlbmQoe30sIERlZmF1bHQsIGNvbmZpZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLnRhcmdldCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGlkID0gJChjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcpO1xuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgaWQgPSBVdGlsLmdldFVJRChOQU1FKTtcbiAgICAgICAgICAkKGNvbmZpZy50YXJnZXQpLmF0dHIoJ2lkJywgaWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy50YXJnZXQgPSAnIycgKyBpZDtcbiAgICAgIH1cblxuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XG5cbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIFNjcm9sbFNweS5wcm90b3R5cGUuX2dldFNjcm9sbFRvcCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxUb3AoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gdGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIH07XG5cbiAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsSGVpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KTtcbiAgICB9O1xuXG4gICAgU2Nyb2xsU3B5LnByb3RvdHlwZS5fZ2V0T2Zmc2V0SGVpZ2h0ID0gZnVuY3Rpb24gX2dldE9mZnNldEhlaWdodCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB3aW5kb3cgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICB9O1xuXG4gICAgU2Nyb2xsU3B5LnByb3RvdHlwZS5fcHJvY2VzcyA9IGZ1bmN0aW9uIF9wcm9jZXNzKCkge1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuX2dldFNjcm9sbFRvcCgpICsgdGhpcy5fY29uZmlnLm9mZnNldDtcbiAgICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICAgIHZhciBtYXhTY3JvbGwgPSB0aGlzLl9jb25maWcub2Zmc2V0ICsgc2Nyb2xsSGVpZ2h0IC0gdGhpcy5fZ2V0T2Zmc2V0SGVpZ2h0KCk7XG5cbiAgICAgIGlmICh0aGlzLl9zY3JvbGxIZWlnaHQgIT09IHNjcm9sbEhlaWdodCkge1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjcm9sbFRvcCA+PSBtYXhTY3JvbGwpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzWzBdICYmIHRoaXMuX29mZnNldHNbMF0gPiAwKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NsZWFyKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX29mZnNldHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgIHZhciBpc0FjdGl2ZVRhcmdldCA9IHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGhpcy5fdGFyZ2V0c1tpXSAmJiBzY3JvbGxUb3AgPj0gdGhpcy5fb2Zmc2V0c1tpXSAmJiAodGhpcy5fb2Zmc2V0c1tpICsgMV0gPT09IHVuZGVmaW5lZCB8fCBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzW2kgKyAxXSk7XG5cbiAgICAgICAgaWYgKGlzQWN0aXZlVGFyZ2V0KSB7XG4gICAgICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fdGFyZ2V0c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgU2Nyb2xsU3B5LnByb3RvdHlwZS5fYWN0aXZhdGUgPSBmdW5jdGlvbiBfYWN0aXZhdGUodGFyZ2V0KSB7XG4gICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSB0YXJnZXQ7XG5cbiAgICAgIHRoaXMuX2NsZWFyKCk7XG5cbiAgICAgIHZhciBxdWVyaWVzID0gdGhpcy5fc2VsZWN0b3Iuc3BsaXQoJywnKTtcbiAgICAgIHF1ZXJpZXMgPSBxdWVyaWVzLm1hcChmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yICsgJ1tkYXRhLXRhcmdldD1cIicgKyB0YXJnZXQgKyAnXCJdLCcgKyAoc2VsZWN0b3IgKyAnW2hyZWY9XCInICsgdGFyZ2V0ICsgJ1wiXScpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciAkbGluayA9ICQocXVlcmllcy5qb2luKCcsJykpO1xuXG4gICAgICBpZiAoJGxpbmsuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BET1dOX0lURU0pKSB7XG4gICAgICAgICRsaW5rLmNsb3Nlc3QoU2VsZWN0b3IuRFJPUERPV04pLmZpbmQoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgJGxpbmsuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZXQgdHJpZ2dlcmVkIGxpbmsgYXMgYWN0aXZlXG4gICAgICAgICRsaW5rLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAvLyBTZXQgdHJpZ2dlcmVkIGxpbmtzIHBhcmVudHMgYXMgYWN0aXZlXG4gICAgICAgIC8vIFdpdGggYm90aCA8dWw+IGFuZCA8bmF2PiBtYXJrdXAgYSBwYXJlbnQgaXMgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YgYW55IG5hdiBhbmNlc3RvclxuICAgICAgICAkbGluay5wYXJlbnRzKFNlbGVjdG9yLk5BVl9MSVNUX0dST1VQKS5wcmV2KFNlbGVjdG9yLk5BVl9MSU5LUyArICcsICcgKyBTZWxlY3Rvci5MSVNUX0lURU1TKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgIH1cblxuICAgICAgJCh0aGlzLl9zY3JvbGxFbGVtZW50KS50cmlnZ2VyKEV2ZW50LkFDVElWQVRFLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRhcmdldFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNjcm9sbFNweS5wcm90b3R5cGUuX2NsZWFyID0gZnVuY3Rpb24gX2NsZWFyKCkge1xuICAgICAgJCh0aGlzLl9zZWxlY3RvcikuZmlsdGVyKFNlbGVjdG9yLkFDVElWRSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgfTtcblxuICAgIC8vIHN0YXRpY1xuXG4gICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKTtcbiAgICAgICAgdmFyIF9jb25maWcgPSAodHlwZW9mIGNvbmZpZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29uZmlnKSkgPT09ICdvYmplY3QnICYmIGNvbmZpZztcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBjb25maWcgKyAnXCInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoU2Nyb2xsU3B5LCBudWxsLCBbe1xuICAgICAga2V5OiAnVkVSU0lPTicsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnRGVmYXVsdCcsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFNjcm9sbFNweTtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQod2luZG93KS5vbihFdmVudC5MT0FEX0RBVEFfQVBJLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFNweXMgPSAkLm1ha2VBcnJheSgkKFNlbGVjdG9yLkRBVEFfU1BZKSk7XG5cbiAgICBmb3IgKHZhciBpID0gc2Nyb2xsU3B5cy5sZW5ndGg7IGktLTspIHtcbiAgICAgIHZhciAkc3B5ID0gJChzY3JvbGxTcHlzW2ldKTtcbiAgICAgIFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJHNweSwgJHNweS5kYXRhKCkpO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFNjcm9sbFNweTtcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBTY3JvbGxTcHk7XG59KGpRdWVyeSk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wLWJldGEpOiB0YWIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBUYWIgPSBmdW5jdGlvbiAoJCkge1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICd0YWInO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1iZXRhJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLnRhYic7XG4gIHZhciBFVkVOVF9LRVkgPSAnLicgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTA7XG5cbiAgdmFyIEV2ZW50ID0ge1xuICAgIEhJREU6ICdoaWRlJyArIEVWRU5UX0tFWSxcbiAgICBISURERU46ICdoaWRkZW4nICsgRVZFTlRfS0VZLFxuICAgIFNIT1c6ICdzaG93JyArIEVWRU5UX0tFWSxcbiAgICBTSE9XTjogJ3Nob3duJyArIEVWRU5UX0tFWSxcbiAgICBDTElDS19EQVRBX0FQSTogJ2NsaWNrJyArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuXG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgRFJPUERPV05fTUVOVTogJ2Ryb3Bkb3duLW1lbnUnLFxuICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgRElTQUJMRUQ6ICdkaXNhYmxlZCcsXG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIFNIT1c6ICdzaG93J1xuICB9O1xuXG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBEUk9QRE9XTjogJy5kcm9wZG93bicsXG4gICAgTkFWX0xJU1RfR1JPVVA6ICcubmF2LCAubGlzdC1ncm91cCcsXG4gICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLXRvZ2dsZT1cImxpc3RcIl0nLFxuICAgIERST1BET1dOX1RPR0dMRTogJy5kcm9wZG93bi10b2dnbGUnLFxuICAgIERST1BET1dOX0FDVElWRV9DSElMRDogJz4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZSdcblxuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuICB2YXIgVGFiID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRhYihlbGVtZW50KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFiKTtcblxuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gZ2V0dGVyc1xuXG4gICAgLy8gcHVibGljXG5cbiAgICBUYWIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgdmFyIF90aGlzMjIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKSB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFyZ2V0ID0gdm9pZCAwO1xuICAgICAgdmFyIHByZXZpb3VzID0gdm9pZCAwO1xuICAgICAgdmFyIGxpc3RFbGVtZW50ID0gJCh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KFNlbGVjdG9yLk5BVl9MSVNUX0dST1VQKVswXTtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgaWYgKGxpc3RFbGVtZW50KSB7XG4gICAgICAgIHByZXZpb3VzID0gJC5tYWtlQXJyYXkoJChsaXN0RWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkUpKTtcbiAgICAgICAgcHJldmlvdXMgPSBwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9KTtcblxuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICAkKHByZXZpb3VzKS50cmlnZ2VyKGhpZGVFdmVudCk7XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICB0YXJnZXQgPSAkKHNlbGVjdG9yKVswXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fZWxlbWVudCwgbGlzdEVsZW1lbnQpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgdmFyIGhpZGRlbkV2ZW50ID0gJC5FdmVudChFdmVudC5ISURERU4sIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBfdGhpczIyLl9lbGVtZW50XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBzaG93bkV2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XTiwge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQocHJldmlvdXMpLnRyaWdnZXIoaGlkZGVuRXZlbnQpO1xuICAgICAgICAkKF90aGlzMjIuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd25FdmVudCk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCwgdGFyZ2V0LnBhcmVudE5vZGUsIGNvbXBsZXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFRhYi5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIHByaXZhdGVcblxuICAgIFRhYi5wcm90b3R5cGUuX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIzID0gdGhpcztcblxuICAgICAgdmFyIGFjdGl2ZSA9ICQoY29udGFpbmVyKS5maW5kKFNlbGVjdG9yLkFDVElWRSlbMF07XG4gICAgICB2YXIgaXNUcmFuc2l0aW9uaW5nID0gY2FsbGJhY2sgJiYgVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiBhY3RpdmUgJiYgJChhY3RpdmUpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIzLl90cmFuc2l0aW9uQ29tcGxldGUoZWxlbWVudCwgYWN0aXZlLCBpc1RyYW5zaXRpb25pbmcsIGNhbGxiYWNrKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChhY3RpdmUgJiYgaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICQoYWN0aXZlKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAkKGFjdGl2ZSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBUYWIucHJvdG90eXBlLl90cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiBfdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgaXNUcmFuc2l0aW9uaW5nLCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAkKGFjdGl2ZSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG5cbiAgICAgICAgdmFyIGRyb3Bkb3duQ2hpbGQgPSAkKGFjdGl2ZS5wYXJlbnROb2RlKS5maW5kKFNlbGVjdG9yLkRST1BET1dOX0FDVElWRV9DSElMRClbMF07XG5cbiAgICAgICAgaWYgKGRyb3Bkb3duQ2hpbGQpIHtcbiAgICAgICAgICAkKGRyb3Bkb3duQ2hpbGQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYWN0aXZlLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgJChlbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICAgIGlmIChpc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgVXRpbC5yZWZsb3coZWxlbWVudCk7XG4gICAgICAgICQoZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuRkFERSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUgJiYgJChlbGVtZW50LnBhcmVudE5vZGUpLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QRE9XTl9NRU5VKSkge1xuXG4gICAgICAgIHZhciBkcm9wZG93bkVsZW1lbnQgPSAkKGVsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuRFJPUERPV04pWzBdO1xuICAgICAgICBpZiAoZHJvcGRvd25FbGVtZW50KSB7XG4gICAgICAgICAgJChkcm9wZG93bkVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBzdGF0aWNcblxuICAgIFRhYi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgVGFiKHRoaXMpO1xuICAgICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicgKyBjb25maWcgKyAnXCInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGFiLCBudWxsLCBbe1xuICAgICAga2V5OiAnVkVSU0lPTicsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRhYjtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBUYWIuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGhpcyksICdzaG93Jyk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gVGFiLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBUYWI7XG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gVGFiO1xufShqUXVlcnkpO1xuXG4vKiBnbG9iYWwgUG9wcGVyICovXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wLWJldGEpOiB0b29sdGlwLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgVG9vbHRpcCA9IGZ1bmN0aW9uICgkKSB7XG5cbiAgLyoqXG4gICAqIENoZWNrIGZvciBQb3BwZXIgZGVwZW5kZW5jeVxuICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICovXG4gIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwIHRvb2x0aXBzIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcpJyk7XG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUgPSAndG9vbHRpcCc7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wLWJldGEnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMudG9vbHRpcCc7XG4gIHZhciBFVkVOVF9LRVkgPSAnLicgKyBEQVRBX0tFWTtcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuICB2YXIgQ0xBU1NfUFJFRklYID0gJ2JzLXRvb2x0aXAnO1xuICB2YXIgQlNDTFNfUFJFRklYX1JFR0VYID0gbmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIENMQVNTX1BSRUZJWCArICdcXFxcUysnLCAnZycpO1xuXG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgICB0ZW1wbGF0ZTogJ3N0cmluZycsXG4gICAgdGl0bGU6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgICB0cmlnZ2VyOiAnc3RyaW5nJyxcbiAgICBkZWxheTogJyhudW1iZXJ8b2JqZWN0KScsXG4gICAgaHRtbDogJ2Jvb2xlYW4nLFxuICAgIHNlbGVjdG9yOiAnKHN0cmluZ3xib29sZWFuKScsXG4gICAgcGxhY2VtZW50OiAnKHN0cmluZ3xmdW5jdGlvbiknLFxuICAgIG9mZnNldDogJyhudW1iZXJ8c3RyaW5nKScsXG4gICAgY29udGFpbmVyOiAnKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pJyxcbiAgICBmYWxsYmFja1BsYWNlbWVudDogJyhzdHJpbmd8YXJyYXkpJ1xuICB9O1xuXG4gIHZhciBBdHRhY2htZW50TWFwID0ge1xuICAgIEFVVE86ICdhdXRvJyxcbiAgICBUT1A6ICd0b3AnLFxuICAgIFJJR0hUOiAncmlnaHQnLFxuICAgIEJPVFRPTTogJ2JvdHRvbScsXG4gICAgTEVGVDogJ2xlZnQnXG4gIH07XG5cbiAgdmFyIERlZmF1bHQgPSB7XG4gICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPicgKyAnPGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+JyArICc8ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsXG4gICAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgICB0aXRsZTogJycsXG4gICAgZGVsYXk6IDAsXG4gICAgaHRtbDogZmFsc2UsXG4gICAgc2VsZWN0b3I6IGZhbHNlLFxuICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgb2Zmc2V0OiAwLFxuICAgIGNvbnRhaW5lcjogZmFsc2UsXG4gICAgZmFsbGJhY2tQbGFjZW1lbnQ6ICdmbGlwJ1xuICB9O1xuXG4gIHZhciBIb3ZlclN0YXRlID0ge1xuICAgIFNIT1c6ICdzaG93JyxcbiAgICBPVVQ6ICdvdXQnXG4gIH07XG5cbiAgdmFyIEV2ZW50ID0ge1xuICAgIEhJREU6ICdoaWRlJyArIEVWRU5UX0tFWSxcbiAgICBISURERU46ICdoaWRkZW4nICsgRVZFTlRfS0VZLFxuICAgIFNIT1c6ICdzaG93JyArIEVWRU5UX0tFWSxcbiAgICBTSE9XTjogJ3Nob3duJyArIEVWRU5UX0tFWSxcbiAgICBJTlNFUlRFRDogJ2luc2VydGVkJyArIEVWRU5UX0tFWSxcbiAgICBDTElDSzogJ2NsaWNrJyArIEVWRU5UX0tFWSxcbiAgICBGT0NVU0lOOiAnZm9jdXNpbicgKyBFVkVOVF9LRVksXG4gICAgRk9DVVNPVVQ6ICdmb2N1c291dCcgKyBFVkVOVF9LRVksXG4gICAgTU9VU0VFTlRFUjogJ21vdXNlZW50ZXInICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFTEVBVkU6ICdtb3VzZWxlYXZlJyArIEVWRU5UX0tFWVxuICB9O1xuXG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIFNIT1c6ICdzaG93J1xuICB9O1xuXG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBUT09MVElQOiAnLnRvb2x0aXAnLFxuICAgIFRPT0xUSVBfSU5ORVI6ICcudG9vbHRpcC1pbm5lcicsXG4gICAgQVJST1c6ICcuYXJyb3cnXG4gIH07XG5cbiAgdmFyIFRyaWdnZXIgPSB7XG4gICAgSE9WRVI6ICdob3ZlcicsXG4gICAgRk9DVVM6ICdmb2N1cycsXG4gICAgQ0xJQ0s6ICdjbGljaycsXG4gICAgTUFOVUFMOiAnbWFudWFsJ1xuXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG4gIHZhciBUb29sdGlwID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRvb2x0aXAoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9vbHRpcCk7XG5cbiAgICAgIC8vIHByaXZhdGVcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWU7XG4gICAgICB0aGlzLl90aW1lb3V0ID0gMDtcbiAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSAnJztcbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXIgPSB7fTtcbiAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG5cbiAgICAgIC8vIHByb3RlY3RlZFxuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLnRpcCA9IG51bGw7XG5cbiAgICAgIHRoaXMuX3NldExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIC8vIGdldHRlcnNcblxuICAgIC8vIHB1YmxpY1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uIHRvZ2dsZUVuYWJsZWQoKSB7XG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSAhdGhpcy5faXNFbmFibGVkO1xuICAgIH07XG5cbiAgICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7XG4gICAgICAgIHZhciBjb250ZXh0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrID0gIWNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2s7XG5cbiAgICAgICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgICAgIGNvbnRleHQuX2VudGVyKG51bGwsIGNvbnRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuX2xlYXZlKG51bGwsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIGlmICgkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICB0aGlzLl9sZWF2ZShudWxsLCB0aGlzKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lbnRlcihudWxsLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG5cbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLmVsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVkpO1xuXG4gICAgICAkKHRoaXMuZWxlbWVudCkub2ZmKHRoaXMuY29uc3RydWN0b3IuRVZFTlRfS0VZKTtcbiAgICAgICQodGhpcy5lbGVtZW50KS5jbG9zZXN0KCcubW9kYWwnKS5vZmYoJ2hpZGUuYnMubW9kYWwnKTtcblxuICAgICAgaWYgKHRoaXMudGlwKSB7XG4gICAgICAgICQodGhpcy50aXApLnJlbW92ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG4gICAgICB0aGlzLl9ob3ZlclN0YXRlID0gbnVsbDtcbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXIgPSBudWxsO1xuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcblxuICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMudGlwID0gbnVsbDtcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMyNCA9IHRoaXM7XG5cbiAgICAgIGlmICgkKHRoaXMuZWxlbWVudCkuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSB1c2Ugc2hvdyBvbiB2aXNpYmxlIGVsZW1lbnRzJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPVyk7XG4gICAgICBpZiAodGhpcy5pc1dpdGhDb250ZW50KCkgJiYgdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgICAgdmFyIGlzSW5UaGVEb20gPSAkLmNvbnRhaW5zKHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy5lbGVtZW50KTtcblxuICAgICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpc0luVGhlRG9tKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgICB2YXIgdGlwSWQgPSBVdGlsLmdldFVJRCh0aGlzLmNvbnN0cnVjdG9yLk5BTUUpO1xuXG4gICAgICAgIHRpcC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGlwSWQpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwSWQpO1xuXG4gICAgICAgIHRoaXMuc2V0Q29udGVudCgpO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgICAkKHRpcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy5wbGFjZW1lbnQuY2FsbCh0aGlzLCB0aXAsIHRoaXMuZWxlbWVudCkgOiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQ7XG5cbiAgICAgICAgdmFyIGF0dGFjaG1lbnQgPSB0aGlzLl9nZXRBdHRhY2htZW50KHBsYWNlbWVudCk7XG4gICAgICAgIHRoaXMuYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpO1xuXG4gICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmNvbmZpZy5jb250YWluZXIgPT09IGZhbHNlID8gZG9jdW1lbnQuYm9keSA6ICQodGhpcy5jb25maWcuY29udGFpbmVyKTtcblxuICAgICAgICAkKHRpcCkuZGF0YSh0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKTtcblxuICAgICAgICBpZiAoISQuY29udGFpbnModGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLnRpcCkpIHtcbiAgICAgICAgICAkKHRpcCkuYXBwZW5kVG8oY29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSU5TRVJURUQpO1xuXG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIodGhpcy5lbGVtZW50LCB0aXAsIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG4gICAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IHtcbiAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLmNvbmZpZy5vZmZzZXRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmbGlwOiB7XG4gICAgICAgICAgICAgIGJlaGF2aW9yOiB0aGlzLmNvbmZpZy5mYWxsYmFja1BsYWNlbWVudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFycm93OiB7XG4gICAgICAgICAgICAgIGVsZW1lbnQ6IFNlbGVjdG9yLkFSUk9XXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgIT09IGRhdGEucGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgIF90aGlzMjQuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShkYXRhKSB7XG4gICAgICAgICAgICBfdGhpczI0Ll9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkKHRpcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAgIC8vIGlmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAkKCdib2R5JykuY2hpbGRyZW4oKS5vbignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgIGlmIChfdGhpczI0LmNvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzMjQuX2ZpeFRyYW5zaXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gX3RoaXMyNC5faG92ZXJTdGF0ZTtcbiAgICAgICAgICBfdGhpczI0Ll9ob3ZlclN0YXRlID0gbnVsbDtcblxuICAgICAgICAgICQoX3RoaXMyNC5lbGVtZW50KS50cmlnZ2VyKF90aGlzMjQuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pO1xuXG4gICAgICAgICAgaWYgKHByZXZIb3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLk9VVCkge1xuICAgICAgICAgICAgX3RoaXMyNC5fbGVhdmUobnVsbCwgX3RoaXMyNCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQodGhpcy50aXApLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICAgICQodGhpcy50aXApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVG9vbHRpcC5fVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBUb29sdGlwLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gaGlkZShjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMjUgPSB0aGlzO1xuXG4gICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICB2YXIgaGlkZUV2ZW50ID0gJC5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpO1xuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIGlmIChfdGhpczI1Ll9ob3ZlclN0YXRlICE9PSBIb3ZlclN0YXRlLlNIT1cgJiYgdGlwLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICB0aXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aXApO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyNS5fY2xlYW5UaXBDbGFzcygpO1xuICAgICAgICBfdGhpczI1LmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5Jyk7XG4gICAgICAgICQoX3RoaXMyNS5lbGVtZW50KS50cmlnZ2VyKF90aGlzMjUuY29uc3RydWN0b3IuRXZlbnQuSElEREVOKTtcbiAgICAgICAgaWYgKF90aGlzMjUuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICAgIF90aGlzMjUuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAkKHRoaXMuZWxlbWVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICBpZiAoaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICQoJ2JvZHknKS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkNMSUNLXSA9IGZhbHNlO1xuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkZPQ1VTXSA9IGZhbHNlO1xuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkhPVkVSXSA9IGZhbHNlO1xuXG4gICAgICBpZiAoVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiAkKHRoaXMudGlwKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcblxuICAgICAgICAkKHRpcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSAnJztcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gcHJvdGVjdGVkXG5cbiAgICBUb29sdGlwLnByb3RvdHlwZS5pc1dpdGhDb250ZW50ID0gZnVuY3Rpb24gaXNXaXRoQ29udGVudCgpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLmFkZEF0dGFjaG1lbnRDbGFzcyA9IGZ1bmN0aW9uIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgICAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhDTEFTU19QUkVGSVggKyAnLScgKyBhdHRhY2htZW50KTtcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VGlwRWxlbWVudCA9IGZ1bmN0aW9uIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXTtcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uIHNldENvbnRlbnQoKSB7XG4gICAgICB2YXIgJHRpcCA9ICQodGhpcy5nZXRUaXBFbGVtZW50KCkpO1xuICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU2VsZWN0b3IuVE9PTFRJUF9JTk5FUiksIHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgICAkdGlwLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5GQURFICsgJyAnICsgQ2xhc3NOYW1lLlNIT1cpO1xuICAgIH07XG5cbiAgICBUb29sdGlwLnByb3RvdHlwZS5zZXRFbGVtZW50Q29udGVudCA9IGZ1bmN0aW9uIHNldEVsZW1lbnRDb250ZW50KCRlbGVtZW50LCBjb250ZW50KSB7XG4gICAgICB2YXIgaHRtbCA9IHRoaXMuY29uZmlnLmh0bWw7XG4gICAgICBpZiAoKHR5cGVvZiBjb250ZW50ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb250ZW50KSkgPT09ICdvYmplY3QnICYmIChjb250ZW50Lm5vZGVUeXBlIHx8IGNvbnRlbnQuanF1ZXJ5KSkge1xuICAgICAgICAvLyBjb250ZW50IGlzIGEgRE9NIG5vZGUgb3IgYSBqUXVlcnlcbiAgICAgICAgaWYgKGh0bWwpIHtcbiAgICAgICAgICBpZiAoISQoY29udGVudCkucGFyZW50KCkuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5lbXB0eSgpLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnQudGV4dCgkKGNvbnRlbnQpLnRleHQoKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRlbGVtZW50W2h0bWwgPyAnaHRtbCcgOiAndGV4dCddKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBUb29sdGlwLnByb3RvdHlwZS5nZXRUaXRsZSA9IGZ1bmN0aW9uIGdldFRpdGxlKCkge1xuICAgICAgdmFyIHRpdGxlID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpO1xuXG4gICAgICBpZiAoIXRpdGxlKSB7XG4gICAgICAgIHRpdGxlID0gdHlwZW9mIHRoaXMuY29uZmlnLnRpdGxlID09PSAnZnVuY3Rpb24nID8gdGhpcy5jb25maWcudGl0bGUuY2FsbCh0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcudGl0bGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aXRsZTtcbiAgICB9O1xuXG4gICAgLy8gcHJpdmF0ZVxuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuX2dldEF0dGFjaG1lbnQgPSBmdW5jdGlvbiBfZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpIHtcbiAgICAgIHJldHVybiBBdHRhY2htZW50TWFwW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXTtcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuX3NldExpc3RlbmVycyA9IGZ1bmN0aW9uIF9zZXRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXMyNiA9IHRoaXM7XG5cbiAgICAgIHZhciB0cmlnZ2VycyA9IHRoaXMuY29uZmlnLnRyaWdnZXIuc3BsaXQoJyAnKTtcblxuICAgICAgdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgICBpZiAodHJpZ2dlciA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICQoX3RoaXMyNi5lbGVtZW50KS5vbihfdGhpczI2LmNvbnN0cnVjdG9yLkV2ZW50LkNMSUNLLCBfdGhpczI2LmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyNi50b2dnbGUoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT09IFRyaWdnZXIuTUFOVUFMKSB7XG4gICAgICAgICAgdmFyIGV2ZW50SW4gPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSID8gX3RoaXMyNi5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUVOVEVSIDogX3RoaXMyNi5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU0lOO1xuICAgICAgICAgIHZhciBldmVudE91dCA9IHRyaWdnZXIgPT09IFRyaWdnZXIuSE9WRVIgPyBfdGhpczI2LmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkUgOiBfdGhpczI2LmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTT1VUO1xuXG4gICAgICAgICAgJChfdGhpczI2LmVsZW1lbnQpLm9uKGV2ZW50SW4sIF90aGlzMjYuY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczI2Ll9lbnRlcihldmVudCk7XG4gICAgICAgICAgfSkub24oZXZlbnRPdXQsIF90aGlzMjYuY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczI2Ll9sZWF2ZShldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAkKF90aGlzMjYuZWxlbWVudCkuY2xvc2VzdCgnLm1vZGFsJykub24oJ2hpZGUuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMjYuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5jb25maWcuc2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSAkLmV4dGVuZCh7fSwgdGhpcy5jb25maWcsIHtcbiAgICAgICAgICB0cmlnZ2VyOiAnbWFudWFsJyxcbiAgICAgICAgICBzZWxlY3RvcjogJydcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9maXhUaXRsZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBUb29sdGlwLnByb3RvdHlwZS5fZml4VGl0bGUgPSBmdW5jdGlvbiBfZml4VGl0bGUoKSB7XG4gICAgICB2YXIgdGl0bGVUeXBlID0gX3R5cGVvZih0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJykpO1xuICAgICAgaWYgKHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgfHwgdGl0bGVUeXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCAnJyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgJycpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBUb29sdGlwLnByb3RvdHlwZS5fZW50ZXIgPSBmdW5jdGlvbiBfZW50ZXIoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcblxuICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXG4gICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c2luJyA/IFRyaWdnZXIuRk9DVVMgOiBUcmlnZ2VyLkhPVkVSXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgkKGNvbnRleHQuZ2V0VGlwRWxlbWVudCgpKS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykgfHwgY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5TSE9XKSB7XG4gICAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLlNIT1c7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuXG4gICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5TSE9XO1xuXG4gICAgICBpZiAoIWNvbnRleHQuY29uZmlnLmRlbGF5IHx8ICFjb250ZXh0LmNvbmZpZy5kZWxheS5zaG93KSB7XG4gICAgICAgIGNvbnRleHQuc2hvdygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhvdmVyU3RhdGUuU0hPVykge1xuICAgICAgICAgIGNvbnRleHQuc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9LCBjb250ZXh0LmNvbmZpZy5kZWxheS5zaG93KTtcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuX2xlYXZlID0gZnVuY3Rpb24gX2xlYXZlKGV2ZW50LCBjb250ZXh0KSB7XG4gICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7XG5cbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJdID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7XG5cbiAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLk9VVDtcblxuICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSkge1xuICAgICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLk9VVCkge1xuICAgICAgICAgIGNvbnRleHQuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LCBjb250ZXh0LmNvbmZpZy5kZWxheS5oaWRlKTtcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuX2lzV2l0aEFjdGl2ZVRyaWdnZXIgPSBmdW5jdGlvbiBfaXNXaXRoQWN0aXZlVHJpZ2dlcigpIHtcbiAgICAgIGZvciAodmFyIHRyaWdnZXIgaW4gdGhpcy5fYWN0aXZlVHJpZ2dlcikge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlVHJpZ2dlclt0cmlnZ2VyXSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LCAkKHRoaXMuZWxlbWVudCkuZGF0YSgpLCBjb25maWcpO1xuXG4gICAgICBpZiAoY29uZmlnLmRlbGF5ICYmIHR5cGVvZiBjb25maWcuZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy5kZWxheSA9IHtcbiAgICAgICAgICBzaG93OiBjb25maWcuZGVsYXksXG4gICAgICAgICAgaGlkZTogY29uZmlnLmRlbGF5XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcudGl0bGUgJiYgdHlwZW9mIGNvbmZpZy50aXRsZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uZmlnLnRpdGxlID0gY29uZmlnLnRpdGxlLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuY29udGVudCAmJiB0eXBlb2YgY29uZmlnLmNvbnRlbnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy5jb250ZW50ID0gY29uZmlnLmNvbnRlbnQudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcblxuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuX2dldERlbGVnYXRlQ29uZmlnID0gZnVuY3Rpb24gX2dldERlbGVnYXRlQ29uZmlnKCkge1xuICAgICAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gICAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuY29uZmlnKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtrZXldICE9PSB0aGlzLmNvbmZpZ1trZXldKSB7XG4gICAgICAgICAgICBjb25maWdba2V5XSA9IHRoaXMuY29uZmlnW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIFRvb2x0aXAucHJvdG90eXBlLl9jbGVhblRpcENsYXNzID0gZnVuY3Rpb24gX2NsZWFuVGlwQ2xhc3MoKSB7XG4gICAgICB2YXIgJHRpcCA9ICQodGhpcy5nZXRUaXBFbGVtZW50KCkpO1xuICAgICAgdmFyIHRhYkNsYXNzID0gJHRpcC5hdHRyKCdjbGFzcycpLm1hdGNoKEJTQ0xTX1BSRUZJWF9SRUdFWCk7XG4gICAgICBpZiAodGFiQ2xhc3MgIT09IG51bGwgJiYgdGFiQ2xhc3MubGVuZ3RoID4gMCkge1xuICAgICAgICAkdGlwLnJlbW92ZUNsYXNzKHRhYkNsYXNzLmpvaW4oJycpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVG9vbHRpcC5wcm90b3R5cGUuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSA9IGZ1bmN0aW9uIF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSkge1xuICAgICAgdGhpcy5fY2xlYW5UaXBDbGFzcygpO1xuICAgICAgdGhpcy5hZGRBdHRhY2htZW50Q2xhc3ModGhpcy5fZ2V0QXR0YWNobWVudChkYXRhLnBsYWNlbWVudCkpO1xuICAgIH07XG5cbiAgICBUb29sdGlwLnByb3RvdHlwZS5fZml4VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIF9maXhUcmFuc2l0aW9uKCkge1xuICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgdmFyIGluaXRDb25maWdBbmltYXRpb24gPSB0aGlzLmNvbmZpZy5hbmltYXRpb247XG4gICAgICBpZiAodGlwLmdldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkKHRpcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuICAgICAgdGhpcy5jb25maWcuYW5pbWF0aW9uID0gZmFsc2U7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgdGhpcy5jb25maWcuYW5pbWF0aW9uID0gaW5pdENvbmZpZ0FuaW1hdGlvbjtcbiAgICB9O1xuXG4gICAgLy8gc3RhdGljXG5cbiAgICBUb29sdGlwLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKTtcbiAgICAgICAgdmFyIF9jb25maWcgPSAodHlwZW9mIGNvbmZpZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29uZmlnKSkgPT09ICdvYmplY3QnICYmIGNvbmZpZztcblxuICAgICAgICBpZiAoIWRhdGEgJiYgL2Rpc3Bvc2V8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoZGF0YVtjb25maWddID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJyArIGNvbmZpZyArICdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhUb29sdGlwLCBudWxsLCBbe1xuICAgICAga2V5OiAnVkVSU0lPTicsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnRGVmYXVsdCcsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnTkFNRScsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE5BTUU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnREFUQV9LRVknLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEQVRBX0tFWTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdFdmVudCcsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEV2ZW50O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0VWRU5UX0tFWScsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEVWRU5UX0tFWTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdEZWZhdWx0VHlwZScsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUb29sdGlwO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBUb29sdGlwLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBUb29sdGlwO1xuICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBUb29sdGlwO1xufShqUXVlcnkpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1iZXRhKTogcG9wb3Zlci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoJCkge1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdwb3BvdmVyJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAtYmV0YSc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5wb3BvdmVyJztcbiAgdmFyIEVWRU5UX0tFWSA9ICcuJyArIERBVEFfS0VZO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIENMQVNTX1BSRUZJWCA9ICdicy1wb3BvdmVyJztcbiAgdmFyIEJTQ0xTX1BSRUZJWF9SRUdFWCA9IG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBDTEFTU19QUkVGSVggKyAnXFxcXFMrJywgJ2cnKTtcblxuICB2YXIgRGVmYXVsdCA9ICQuZXh0ZW5kKHt9LCBUb29sdGlwLkRlZmF1bHQsIHtcbiAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICBjb250ZW50OiAnJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgKyAnPGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPicgKyAnPGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PjwvZGl2PidcbiAgfSk7XG5cbiAgdmFyIERlZmF1bHRUeXBlID0gJC5leHRlbmQoe30sIFRvb2x0aXAuRGVmYXVsdFR5cGUsIHtcbiAgICBjb250ZW50OiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKSdcbiAgfSk7XG5cbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBGQURFOiAnZmFkZScsXG4gICAgU0hPVzogJ3Nob3cnXG4gIH07XG5cbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIFRJVExFOiAnLnBvcG92ZXItaGVhZGVyJyxcbiAgICBDT05URU5UOiAnLnBvcG92ZXItYm9keSdcbiAgfTtcblxuICB2YXIgRXZlbnQgPSB7XG4gICAgSElERTogJ2hpZGUnICsgRVZFTlRfS0VZLFxuICAgIEhJRERFTjogJ2hpZGRlbicgKyBFVkVOVF9LRVksXG4gICAgU0hPVzogJ3Nob3cnICsgRVZFTlRfS0VZLFxuICAgIFNIT1dOOiAnc2hvd24nICsgRVZFTlRfS0VZLFxuICAgIElOU0VSVEVEOiAnaW5zZXJ0ZWQnICsgRVZFTlRfS0VZLFxuICAgIENMSUNLOiAnY2xpY2snICsgRVZFTlRfS0VZLFxuICAgIEZPQ1VTSU46ICdmb2N1c2luJyArIEVWRU5UX0tFWSxcbiAgICBGT0NVU09VVDogJ2ZvY3Vzb3V0JyArIEVWRU5UX0tFWSxcbiAgICBNT1VTRUVOVEVSOiAnbW91c2VlbnRlcicgKyBFVkVOVF9LRVksXG4gICAgTU9VU0VMRUFWRTogJ21vdXNlbGVhdmUnICsgRVZFTlRfS0VZXG5cbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcbiAgdmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoX1Rvb2x0aXApIHtcbiAgICBfaW5oZXJpdHMoUG9wb3ZlciwgX1Rvb2x0aXApO1xuXG4gICAgZnVuY3Rpb24gUG9wb3ZlcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BvdmVyKTtcblxuICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Ub29sdGlwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIC8vIG92ZXJyaWRlc1xuXG4gICAgUG9wb3Zlci5wcm90b3R5cGUuaXNXaXRoQ29udGVudCA9IGZ1bmN0aW9uIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuX2dldENvbnRlbnQoKTtcbiAgICB9O1xuXG4gICAgUG9wb3Zlci5wcm90b3R5cGUuYWRkQXR0YWNobWVudENsYXNzID0gZnVuY3Rpb24gYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpIHtcbiAgICAgICQodGhpcy5nZXRUaXBFbGVtZW50KCkpLmFkZENsYXNzKENMQVNTX1BSRUZJWCArICctJyArIGF0dGFjaG1lbnQpO1xuICAgIH07XG5cbiAgICBQb3BvdmVyLnByb3RvdHlwZS5nZXRUaXBFbGVtZW50ID0gZnVuY3Rpb24gZ2V0VGlwRWxlbWVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnRpcCA9IHRoaXMudGlwIHx8ICQodGhpcy5jb25maWcudGVtcGxhdGUpWzBdO1xuICAgIH07XG5cbiAgICBQb3BvdmVyLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gc2V0Q29udGVudCgpIHtcbiAgICAgIHZhciAkdGlwID0gJCh0aGlzLmdldFRpcEVsZW1lbnQoKSk7XG5cbiAgICAgIC8vIHdlIHVzZSBhcHBlbmQgZm9yIGh0bWwgb2JqZWN0cyB0byBtYWludGFpbiBqcyBldmVudHNcbiAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLlRJVExFKSwgdGhpcy5nZXRUaXRsZSgpKTtcbiAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLkNPTlRFTlQpLCB0aGlzLl9nZXRDb250ZW50KCkpO1xuXG4gICAgICAkdGlwLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5GQURFICsgJyAnICsgQ2xhc3NOYW1lLlNIT1cpO1xuICAgIH07XG5cbiAgICAvLyBwcml2YXRlXG5cbiAgICBQb3BvdmVyLnByb3RvdHlwZS5fZ2V0Q29udGVudCA9IGZ1bmN0aW9uIF9nZXRDb250ZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpIHx8ICh0eXBlb2YgdGhpcy5jb25maWcuY29udGVudCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuY29uZmlnLmNvbnRlbnQuY2FsbCh0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcuY29udGVudCk7XG4gICAgfTtcblxuICAgIFBvcG92ZXIucHJvdG90eXBlLl9jbGVhblRpcENsYXNzID0gZnVuY3Rpb24gX2NsZWFuVGlwQ2xhc3MoKSB7XG4gICAgICB2YXIgJHRpcCA9ICQodGhpcy5nZXRUaXBFbGVtZW50KCkpO1xuICAgICAgdmFyIHRhYkNsYXNzID0gJHRpcC5hdHRyKCdjbGFzcycpLm1hdGNoKEJTQ0xTX1BSRUZJWF9SRUdFWCk7XG4gICAgICBpZiAodGFiQ2xhc3MgIT09IG51bGwgJiYgdGFiQ2xhc3MubGVuZ3RoID4gMCkge1xuICAgICAgICAkdGlwLnJlbW92ZUNsYXNzKHRhYkNsYXNzLmpvaW4oJycpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gc3RhdGljXG5cbiAgICBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKTtcbiAgICAgICAgdmFyIF9jb25maWcgPSAodHlwZW9mIGNvbmZpZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29uZmlnKSkgPT09ICdvYmplY3QnID8gY29uZmlnIDogbnVsbDtcblxuICAgICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBQb3BvdmVyKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoZGF0YVtjb25maWddID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJyArIGNvbmZpZyArICdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhQb3BvdmVyLCBudWxsLCBbe1xuICAgICAga2V5OiAnVkVSU0lPTicsXG5cblxuICAgICAgLy8gZ2V0dGVyc1xuXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnRGVmYXVsdCcsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnTkFNRScsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE5BTUU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnREFUQV9LRVknLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEQVRBX0tFWTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdFdmVudCcsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEV2ZW50O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ0VWRU5UX0tFWScsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEVWRU5UX0tFWTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdEZWZhdWx0VHlwZScsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBQb3BvdmVyO1xuICB9KFRvb2x0aXApO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gUG9wb3ZlcjtcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gUG9wb3Zlcjtcbn0oalF1ZXJ5KTtcblxuXG59KSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9ib290c3RyYXAvZGlzdC9qcy9ib290c3RyYXAuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJ0dXJib2xpbmtzXCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3JhZmFlbG5vd3JvdGVrL0RvY3VtZW50cy9Qcm9qZWt0ZS9CZXlvbmQvV29ya3NwYWNlL2JleW9uZC93cC1jb250ZW50L3RoZW1lcy9raWNrcy1hcHAvbm9kZV9tb2R1bGVzL2V4cG9zZS1sb2FkZXIvaW5kZXguanM/JCEuL3R1cmJvbGlua3MuanNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3R1cmJvbGlua3MvZGlzdC90dXJib2xpbmtzLmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiJFwiXSA9IHJlcXVpcmUoXCItIS4vdHVyYm9saW5rcy5qc1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXhwb3NlLWxvYWRlcj8kIS4vfi90dXJib2xpbmtzL2Rpc3QvdHVyYm9saW5rcy5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCIvKlxuVHVyYm9saW5rcyA1LjAuM1xuQ29weXJpZ2h0IMKpIDIwMTcgQmFzZWNhbXAsIExMQ1xuICovXG4oZnVuY3Rpb24oKXsoZnVuY3Rpb24oKXsoZnVuY3Rpb24oKXt0aGlzLlR1cmJvbGlua3M9e3N1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiBudWxsIT13aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUmJm51bGwhPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJm51bGwhPXdpbmRvdy5hZGRFdmVudExpc3RlbmVyfSgpLHZpc2l0OmZ1bmN0aW9uKGUscil7cmV0dXJuIHQuY29udHJvbGxlci52aXNpdChlLHIpfSxjbGVhckNhY2hlOmZ1bmN0aW9uKCl7cmV0dXJuIHQuY29udHJvbGxlci5jbGVhckNhY2hlKCl9fX0pLmNhbGwodGhpcyl9KS5jYWxsKHRoaXMpO3ZhciB0PXRoaXMuVHVyYm9saW5rczsoZnVuY3Rpb24oKXsoZnVuY3Rpb24oKXt2YXIgZSxyLG49W10uc2xpY2U7dC5jb3B5T2JqZWN0PWZ1bmN0aW9uKHQpe3ZhciBlLHIsbjtyPXt9O2ZvcihlIGluIHQpbj10W2VdLHJbZV09bjtyZXR1cm4gcn0sdC5jbG9zZXN0PWZ1bmN0aW9uKHQscil7cmV0dXJuIGUuY2FsbCh0LHIpfSxlPWZ1bmN0aW9uKCl7dmFyIHQsZTtyZXR1cm4gdD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsbnVsbCE9KGU9dC5jbG9zZXN0KT9lOmZ1bmN0aW9uKHQpe3ZhciBlO2ZvcihlPXRoaXM7ZTspe2lmKGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmci5jYWxsKGUsdCkpcmV0dXJuIGU7ZT1lLnBhcmVudE5vZGV9fX0oKSx0LmRlZmVyPWZ1bmN0aW9uKHQpe3JldHVybiBzZXRUaW1lb3V0KHQsMSl9LHQudGhyb3R0bGU9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIGU9bnVsbCxmdW5jdGlvbigpe3ZhciByO3JldHVybiByPTE8PWFyZ3VtZW50cy5sZW5ndGg/bi5jYWxsKGFyZ3VtZW50cywwKTpbXSxudWxsIT1lP2U6ZT1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGU9bnVsbCx0LmFwcGx5KG4scil9fSh0aGlzKSl9fSx0LmRpc3BhdGNoPWZ1bmN0aW9uKHQsZSl7dmFyIHIsbixvLGkscztyZXR1cm4gaT1udWxsIT1lP2U6e30scz1pLnRhcmdldCxyPWkuY2FuY2VsYWJsZSxuPWkuZGF0YSxvPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRzXCIpLG8uaW5pdEV2ZW50KHQsITAscj09PSEwKSxvLmRhdGE9bnVsbCE9bj9uOnt9LChudWxsIT1zP3M6ZG9jdW1lbnQpLmRpc3BhdGNoRXZlbnQobyksb30sdC5tYXRjaD1mdW5jdGlvbih0LGUpe3JldHVybiByLmNhbGwodCxlKX0scj1mdW5jdGlvbigpe3ZhciB0LGUscixuO3JldHVybiB0PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxudWxsIT0oZT1udWxsIT0ocj1udWxsIT0obj10Lm1hdGNoZXNTZWxlY3Rvcik/bjp0LndlYmtpdE1hdGNoZXNTZWxlY3Rvcik/cjp0Lm1zTWF0Y2hlc1NlbGVjdG9yKT9lOnQubW96TWF0Y2hlc1NlbGVjdG9yfSgpLHQudXVpZD1mdW5jdGlvbigpe3ZhciB0LGUscjtmb3Iocj1cIlwiLHQ9ZT0xOzM2Pj1lO3Q9KytlKXIrPTk9PT10fHwxND09PXR8fDE5PT09dHx8MjQ9PT10P1wiLVwiOjE1PT09dD9cIjRcIjoyMD09PXQ/KE1hdGguZmxvb3IoNCpNYXRoLnJhbmRvbSgpKSs4KS50b1N0cmluZygxNik6TWF0aC5mbG9vcigxNSpNYXRoLnJhbmRvbSgpKS50b1N0cmluZygxNik7cmV0dXJuIHJ9fSkuY2FsbCh0aGlzKSxmdW5jdGlvbigpe3QuTG9jYXRpb249ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3ZhciBlLHI7bnVsbD09dCYmKHQ9XCJcIikscj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKSxyLmhyZWY9dC50b1N0cmluZygpLHRoaXMuYWJzb2x1dGVVUkw9ci5ocmVmLGU9ci5oYXNoLmxlbmd0aCwyPmU/dGhpcy5yZXF1ZXN0VVJMPXRoaXMuYWJzb2x1dGVVUkw6KHRoaXMucmVxdWVzdFVSTD10aGlzLmFic29sdXRlVVJMLnNsaWNlKDAsLWUpLHRoaXMuYW5jaG9yPXIuaGFzaC5zbGljZSgxKSl9dmFyIGUscixuLG87cmV0dXJuIHQud3JhcD1mdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIHRoaXM/dDpuZXcgdGhpcyh0KX0sdC5wcm90b3R5cGUuZ2V0T3JpZ2luPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWJzb2x1dGVVUkwuc3BsaXQoXCIvXCIsMykuam9pbihcIi9cIil9LHQucHJvdG90eXBlLmdldFBhdGg9ZnVuY3Rpb24oKXt2YXIgdCxlO3JldHVybiBudWxsIT0odD1udWxsIT0oZT10aGlzLmFic29sdXRlVVJMLm1hdGNoKC9cXC9cXC9bXlxcL10qKFxcL1tePztdKikvKSk/ZVsxXTp2b2lkIDApP3Q6XCIvXCJ9LHQucHJvdG90eXBlLmdldFBhdGhDb21wb25lbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0UGF0aCgpLnNwbGl0KFwiL1wiKS5zbGljZSgxKX0sdC5wcm90b3R5cGUuZ2V0TGFzdFBhdGhDb21wb25lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRQYXRoQ29tcG9uZW50cygpLnNsaWNlKC0xKVswXX0sdC5wcm90b3R5cGUuZ2V0RXh0ZW5zaW9uPWZ1bmN0aW9uKCl7dmFyIHQsZTtyZXR1cm4gbnVsbCE9KHQ9bnVsbCE9KGU9dGhpcy5nZXRMYXN0UGF0aENvbXBvbmVudCgpLm1hdGNoKC9cXC5bXi5dKiQvKSk/ZVswXTp2b2lkIDApP3Q6XCJcIn0sdC5wcm90b3R5cGUuaXNIVE1MPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0RXh0ZW5zaW9uKCkubWF0Y2goL14oPzp8XFwuKD86aHRtfGh0bWx8eGh0bWwpKSQvKX0sdC5wcm90b3R5cGUuaXNQcmVmaXhlZEJ5PWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBlPXIodCksdGhpcy5pc0VxdWFsVG8odCl8fG8odGhpcy5hYnNvbHV0ZVVSTCxlKX0sdC5wcm90b3R5cGUuaXNFcXVhbFRvPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmFic29sdXRlVVJMPT09KG51bGwhPXQ/dC5hYnNvbHV0ZVVSTDp2b2lkIDApfSx0LnByb3RvdHlwZS50b0NhY2hlS2V5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVxdWVzdFVSTH0sdC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWJzb2x1dGVVUkx9LHQucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWJzb2x1dGVVUkx9LHQucHJvdG90eXBlLnZhbHVlT2Y9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hYnNvbHV0ZVVSTH0scj1mdW5jdGlvbih0KXtyZXR1cm4gZSh0LmdldE9yaWdpbigpK3QuZ2V0UGF0aCgpKX0sZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0LFwiL1wiKT90OnQrXCIvXCJ9LG89ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5zbGljZSgwLGUubGVuZ3RoKT09PWV9LG49ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5zbGljZSgtZS5sZW5ndGgpPT09ZX0sdH0oKX0uY2FsbCh0aGlzKSxmdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfX07dC5IdHRwUmVxdWVzdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHIocixuLG8pe3RoaXMuZGVsZWdhdGU9cix0aGlzLnJlcXVlc3RDYW5jZWxlZD1lKHRoaXMucmVxdWVzdENhbmNlbGVkLHRoaXMpLHRoaXMucmVxdWVzdFRpbWVkT3V0PWUodGhpcy5yZXF1ZXN0VGltZWRPdXQsdGhpcyksdGhpcy5yZXF1ZXN0RmFpbGVkPWUodGhpcy5yZXF1ZXN0RmFpbGVkLHRoaXMpLHRoaXMucmVxdWVzdExvYWRlZD1lKHRoaXMucmVxdWVzdExvYWRlZCx0aGlzKSx0aGlzLnJlcXVlc3RQcm9ncmVzc2VkPWUodGhpcy5yZXF1ZXN0UHJvZ3Jlc3NlZCx0aGlzKSx0aGlzLnVybD10LkxvY2F0aW9uLndyYXAobikucmVxdWVzdFVSTCx0aGlzLnJlZmVycmVyPXQuTG9jYXRpb24ud3JhcChvKS5hYnNvbHV0ZVVSTCx0aGlzLmNyZWF0ZVhIUigpfXJldHVybiByLk5FVFdPUktfRkFJTFVSRT0wLHIuVElNRU9VVF9GQUlMVVJFPS0xLHIudGltZW91dD02MCxyLnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIHRoaXMueGhyJiYhdGhpcy5zZW50Pyh0aGlzLm5vdGlmeUFwcGxpY2F0aW9uQmVmb3JlUmVxdWVzdFN0YXJ0KCksdGhpcy5zZXRQcm9ncmVzcygwKSx0aGlzLnhoci5zZW5kKCksdGhpcy5zZW50PSEwLFwiZnVuY3Rpb25cIj09dHlwZW9mKHQ9dGhpcy5kZWxlZ2F0ZSkucmVxdWVzdFN0YXJ0ZWQ/dC5yZXF1ZXN0U3RhcnRlZCgpOnZvaWQgMCk6dm9pZCAwfSxyLnByb3RvdHlwZS5jYW5jZWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54aHImJnRoaXMuc2VudD90aGlzLnhoci5hYm9ydCgpOnZvaWQgMH0sci5wcm90b3R5cGUucmVxdWVzdFByb2dyZXNzZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQubGVuZ3RoQ29tcHV0YWJsZT90aGlzLnNldFByb2dyZXNzKHQubG9hZGVkL3QudG90YWwpOnZvaWQgMH0sci5wcm90b3R5cGUucmVxdWVzdExvYWRlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuZFJlcXVlc3QoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIDIwMDw9KGU9dC54aHIuc3RhdHVzKSYmMzAwPmU/dC5kZWxlZ2F0ZS5yZXF1ZXN0Q29tcGxldGVkV2l0aFJlc3BvbnNlKHQueGhyLnJlc3BvbnNlVGV4dCx0Lnhoci5nZXRSZXNwb25zZUhlYWRlcihcIlR1cmJvbGlua3MtTG9jYXRpb25cIikpOih0LmZhaWxlZD0hMCx0LmRlbGVnYXRlLnJlcXVlc3RGYWlsZWRXaXRoU3RhdHVzQ29kZSh0Lnhoci5zdGF0dXMsdC54aHIucmVzcG9uc2VUZXh0KSl9fSh0aGlzKSl9LHIucHJvdG90eXBlLnJlcXVlc3RGYWlsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbmRSZXF1ZXN0KGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmZhaWxlZD0hMCx0LmRlbGVnYXRlLnJlcXVlc3RGYWlsZWRXaXRoU3RhdHVzQ29kZSh0LmNvbnN0cnVjdG9yLk5FVFdPUktfRkFJTFVSRSl9fSh0aGlzKSl9LHIucHJvdG90eXBlLnJlcXVlc3RUaW1lZE91dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuZFJlcXVlc3QoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuZmFpbGVkPSEwLHQuZGVsZWdhdGUucmVxdWVzdEZhaWxlZFdpdGhTdGF0dXNDb2RlKHQuY29uc3RydWN0b3IuVElNRU9VVF9GQUlMVVJFKX19KHRoaXMpKX0sci5wcm90b3R5cGUucmVxdWVzdENhbmNlbGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5kUmVxdWVzdCgpfSxyLnByb3RvdHlwZS5ub3RpZnlBcHBsaWNhdGlvbkJlZm9yZVJlcXVlc3RTdGFydD1mdW5jdGlvbigpe3JldHVybiB0LmRpc3BhdGNoKFwidHVyYm9saW5rczpyZXF1ZXN0LXN0YXJ0XCIse2RhdGE6e3VybDp0aGlzLnVybCx4aHI6dGhpcy54aHJ9fSl9LHIucHJvdG90eXBlLm5vdGlmeUFwcGxpY2F0aW9uQWZ0ZXJSZXF1ZXN0RW5kPWZ1bmN0aW9uKCl7cmV0dXJuIHQuZGlzcGF0Y2goXCJ0dXJib2xpbmtzOnJlcXVlc3QtZW5kXCIse2RhdGE6e3VybDp0aGlzLnVybCx4aHI6dGhpcy54aHJ9fSl9LHIucHJvdG90eXBlLmNyZWF0ZVhIUj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnhocj1uZXcgWE1MSHR0cFJlcXVlc3QsdGhpcy54aHIub3BlbihcIkdFVFwiLHRoaXMudXJsLCEwKSx0aGlzLnhoci50aW1lb3V0PTFlMyp0aGlzLmNvbnN0cnVjdG9yLnRpbWVvdXQsdGhpcy54aHIuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLFwidGV4dC9odG1sLCBhcHBsaWNhdGlvbi94aHRtbCt4bWxcIiksdGhpcy54aHIuc2V0UmVxdWVzdEhlYWRlcihcIlR1cmJvbGlua3MtUmVmZXJyZXJcIix0aGlzLnJlZmVycmVyKSx0aGlzLnhoci5vbnByb2dyZXNzPXRoaXMucmVxdWVzdFByb2dyZXNzZWQsdGhpcy54aHIub25sb2FkPXRoaXMucmVxdWVzdExvYWRlZCx0aGlzLnhoci5vbmVycm9yPXRoaXMucmVxdWVzdEZhaWxlZCx0aGlzLnhoci5vbnRpbWVvdXQ9dGhpcy5yZXF1ZXN0VGltZWRPdXQsdGhpcy54aHIub25hYm9ydD10aGlzLnJlcXVlc3RDYW5jZWxlZH0sci5wcm90b3R5cGUuZW5kUmVxdWVzdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy54aHI/KHRoaXMubm90aWZ5QXBwbGljYXRpb25BZnRlclJlcXVlc3RFbmQoKSxudWxsIT10JiZ0LmNhbGwodGhpcyksdGhpcy5kZXN0cm95KCkpOnZvaWQgMH0sci5wcm90b3R5cGUuc2V0UHJvZ3Jlc3M9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIHRoaXMucHJvZ3Jlc3M9dCxcImZ1bmN0aW9uXCI9PXR5cGVvZihlPXRoaXMuZGVsZWdhdGUpLnJlcXVlc3RQcm9ncmVzc2VkP2UucmVxdWVzdFByb2dyZXNzZWQodGhpcy5wcm9ncmVzcyk6dm9pZCAwfSxyLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIHRoaXMuc2V0UHJvZ3Jlc3MoMSksXCJmdW5jdGlvblwiPT10eXBlb2YodD10aGlzLmRlbGVnYXRlKS5yZXF1ZXN0RmluaXNoZWQmJnQucmVxdWVzdEZpbmlzaGVkKCksdGhpcy5kZWxlZ2F0ZT1udWxsLHRoaXMueGhyPW51bGx9LHJ9KCl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbih0LGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KGUsYXJndW1lbnRzKX19O3QuUHJvZ3Jlc3NCYXI9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dGhpcy50cmlja2xlPWUodGhpcy50cmlja2xlLHRoaXMpLHRoaXMuc3R5bGVzaGVldEVsZW1lbnQ9dGhpcy5jcmVhdGVTdHlsZXNoZWV0RWxlbWVudCgpLHRoaXMucHJvZ3Jlc3NFbGVtZW50PXRoaXMuY3JlYXRlUHJvZ3Jlc3NFbGVtZW50KCl9dmFyIHI7cmV0dXJuIHI9MzAwLHQuZGVmYXVsdENTUz1cIi50dXJib2xpbmtzLXByb2dyZXNzLWJhciB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBoZWlnaHQ6IDNweDtcXG4gIGJhY2tncm91bmQ6ICMwMDc2ZmY7XFxuICB6LWluZGV4OiA5OTk5O1xcbiAgdHJhbnNpdGlvbjogd2lkdGggXCIrcitcIm1zIGVhc2Utb3V0LCBvcGFjaXR5IFwiK3IvMitcIm1zIFwiK3IvMitcIm1zIGVhc2UtaW47XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbn1cIix0LnByb3RvdHlwZS5zaG93PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlzaWJsZT92b2lkIDA6KHRoaXMudmlzaWJsZT0hMCx0aGlzLmluc3RhbGxTdHlsZXNoZWV0RWxlbWVudCgpLHRoaXMuaW5zdGFsbFByb2dyZXNzRWxlbWVudCgpLHRoaXMuc3RhcnRUcmlja2xpbmcoKSl9LHQucHJvdG90eXBlLmhpZGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aXNpYmxlJiYhdGhpcy5oaWRpbmc/KHRoaXMuaGlkaW5nPSEwLHRoaXMuZmFkZVByb2dyZXNzRWxlbWVudChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdC51bmluc3RhbGxQcm9ncmVzc0VsZW1lbnQoKSx0LnN0b3BUcmlja2xpbmcoKSx0LnZpc2libGU9ITEsdC5oaWRpbmc9ITF9fSh0aGlzKSkpOnZvaWQgMH0sdC5wcm90b3R5cGUuc2V0VmFsdWU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudmFsdWU9dCx0aGlzLnJlZnJlc2goKX0sdC5wcm90b3R5cGUuaW5zdGFsbFN0eWxlc2hlZXRFbGVtZW50PWZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmhlYWQuaW5zZXJ0QmVmb3JlKHRoaXMuc3R5bGVzaGVldEVsZW1lbnQsZG9jdW1lbnQuaGVhZC5maXJzdENoaWxkKX0sdC5wcm90b3R5cGUuaW5zdGFsbFByb2dyZXNzRWxlbWVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByb2dyZXNzRWxlbWVudC5zdHlsZS53aWR0aD0wLHRoaXMucHJvZ3Jlc3NFbGVtZW50LnN0eWxlLm9wYWNpdHk9MSxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRoaXMucHJvZ3Jlc3NFbGVtZW50LGRvY3VtZW50LmJvZHkpLHRoaXMucmVmcmVzaCgpfSx0LnByb3RvdHlwZS5mYWRlUHJvZ3Jlc3NFbGVtZW50PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnByb2dyZXNzRWxlbWVudC5zdHlsZS5vcGFjaXR5PTAsc2V0VGltZW91dCh0LDEuNSpyKX0sdC5wcm90b3R5cGUudW5pbnN0YWxsUHJvZ3Jlc3NFbGVtZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvZ3Jlc3NFbGVtZW50LnBhcmVudE5vZGU/ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMucHJvZ3Jlc3NFbGVtZW50KTp2b2lkIDB9LHQucHJvdG90eXBlLnN0YXJ0VHJpY2tsaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXRoaXMudHJpY2tsZUludGVydmFsP3RoaXMudHJpY2tsZUludGVydmFsOnRoaXMudHJpY2tsZUludGVydmFsPXNldEludGVydmFsKHRoaXMudHJpY2tsZSxyKX0sdC5wcm90b3R5cGUuc3RvcFRyaWNrbGluZz1mdW5jdGlvbigpe3JldHVybiBjbGVhckludGVydmFsKHRoaXMudHJpY2tsZUludGVydmFsKSx0aGlzLnRyaWNrbGVJbnRlcnZhbD1udWxsfSx0LnByb3RvdHlwZS50cmlja2xlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0VmFsdWUodGhpcy52YWx1ZStNYXRoLnJhbmRvbSgpLzEwMCl9LHQucHJvdG90eXBlLnJlZnJlc2g9ZnVuY3Rpb24oKXtyZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LnByb2dyZXNzRWxlbWVudC5zdHlsZS53aWR0aD0xMCs5MCp0LnZhbHVlK1wiJVwifX0odGhpcykpfSx0LnByb3RvdHlwZS5jcmVhdGVTdHlsZXNoZWV0RWxlbWVudD1mdW5jdGlvbigpe3ZhciB0O3JldHVybiB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSx0LnR5cGU9XCJ0ZXh0L2Nzc1wiLHQudGV4dENvbnRlbnQ9dGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0Q1NTLHR9LHQucHJvdG90eXBlLmNyZWF0ZVByb2dyZXNzRWxlbWVudD1mdW5jdGlvbigpe3ZhciB0O3JldHVybiB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdC5jbGFzc05hbWU9XCJ0dXJib2xpbmtzLXByb2dyZXNzLWJhclwiLHR9LHR9KCl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbih0LGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KGUsYXJndW1lbnRzKX19O3QuQnJvd3NlckFkYXB0ZXI9ZnVuY3Rpb24oKXtmdW5jdGlvbiByKHIpe3RoaXMuY29udHJvbGxlcj1yLHRoaXMuc2hvd1Byb2dyZXNzQmFyPWUodGhpcy5zaG93UHJvZ3Jlc3NCYXIsdGhpcyksdGhpcy5wcm9ncmVzc0Jhcj1uZXcgdC5Qcm9ncmVzc0Jhcn12YXIgbixvLGkscztyZXR1cm4gcz10Lkh0dHBSZXF1ZXN0LG49cy5ORVRXT1JLX0ZBSUxVUkUsaT1zLlRJTUVPVVRfRkFJTFVSRSxvPTUwMCxyLnByb3RvdHlwZS52aXNpdFByb3Bvc2VkVG9Mb2NhdGlvbldpdGhBY3Rpb249ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5jb250cm9sbGVyLnN0YXJ0VmlzaXRUb0xvY2F0aW9uV2l0aEFjdGlvbih0LGUpfSxyLnByb3RvdHlwZS52aXNpdFN0YXJ0ZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQuaXNzdWVSZXF1ZXN0KCksdC5jaGFuZ2VIaXN0b3J5KCksdC5sb2FkQ2FjaGVkU25hcHNob3QoKX0sci5wcm90b3R5cGUudmlzaXRSZXF1ZXN0U3RhcnRlZD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5wcm9ncmVzc0Jhci5zZXRWYWx1ZSgwKSx0Lmhhc0NhY2hlZFNuYXBzaG90KCl8fFwicmVzdG9yZVwiIT09dC5hY3Rpb24/dGhpcy5zaG93UHJvZ3Jlc3NCYXJBZnRlckRlbGF5KCk6dGhpcy5zaG93UHJvZ3Jlc3NCYXIoKX0sci5wcm90b3R5cGUudmlzaXRSZXF1ZXN0UHJvZ3Jlc3NlZD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5wcm9ncmVzc0Jhci5zZXRWYWx1ZSh0LnByb2dyZXNzKX0sci5wcm90b3R5cGUudmlzaXRSZXF1ZXN0Q29tcGxldGVkPWZ1bmN0aW9uKHQpe3JldHVybiB0LmxvYWRSZXNwb25zZSgpfSxyLnByb3RvdHlwZS52aXNpdFJlcXVlc3RGYWlsZWRXaXRoU3RhdHVzQ29kZT1mdW5jdGlvbih0LGUpe3N3aXRjaChlKXtjYXNlIG46Y2FzZSBpOnJldHVybiB0aGlzLnJlbG9hZCgpO2RlZmF1bHQ6cmV0dXJuIHQubG9hZFJlc3BvbnNlKCl9fSxyLnByb3RvdHlwZS52aXNpdFJlcXVlc3RGaW5pc2hlZD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5oaWRlUHJvZ3Jlc3NCYXIoKX0sci5wcm90b3R5cGUudmlzaXRDb21wbGV0ZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQuZm9sbG93UmVkaXJlY3QoKX0sci5wcm90b3R5cGUucGFnZUludmFsaWRhdGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVsb2FkKCl9LHIucHJvdG90eXBlLnNob3dQcm9ncmVzc0JhckFmdGVyRGVsYXk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9ncmVzc0JhclRpbWVvdXQ9c2V0VGltZW91dCh0aGlzLnNob3dQcm9ncmVzc0JhcixvKX0sci5wcm90b3R5cGUuc2hvd1Byb2dyZXNzQmFyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvZ3Jlc3NCYXIuc2hvdygpfSxyLnByb3RvdHlwZS5oaWRlUHJvZ3Jlc3NCYXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9ncmVzc0Jhci5oaWRlKCksY2xlYXJUaW1lb3V0KHRoaXMucHJvZ3Jlc3NCYXJUaW1lb3V0KX0sci5wcm90b3R5cGUucmVsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKX0scn0oKX0uY2FsbCh0aGlzKSxmdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfX07dC5IaXN0b3J5PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gcih0KXt0aGlzLmRlbGVnYXRlPXQsdGhpcy5vblBhZ2VMb2FkPWUodGhpcy5vblBhZ2VMb2FkLHRoaXMpLHRoaXMub25Qb3BTdGF0ZT1lKHRoaXMub25Qb3BTdGF0ZSx0aGlzKX1yZXR1cm4gci5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGFydGVkP3ZvaWQgMDooYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsdGhpcy5vblBvcFN0YXRlLCExKSxhZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLHRoaXMub25QYWdlTG9hZCwhMSksdGhpcy5zdGFydGVkPSEwKX0sci5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXJ0ZWQ/KHJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLHRoaXMub25Qb3BTdGF0ZSwhMSkscmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIix0aGlzLm9uUGFnZUxvYWQsITEpLHRoaXMuc3RhcnRlZD0hMSk6dm9pZCAwfSxyLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUscil7cmV0dXJuIGU9dC5Mb2NhdGlvbi53cmFwKGUpLHRoaXMudXBkYXRlKFwicHVzaFwiLGUscil9LHIucHJvdG90eXBlLnJlcGxhY2U9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gZT10LkxvY2F0aW9uLndyYXAoZSksdGhpcy51cGRhdGUoXCJyZXBsYWNlXCIsZSxyKX0sci5wcm90b3R5cGUub25Qb3BTdGF0ZT1mdW5jdGlvbihlKXt2YXIgcixuLG8saTtyZXR1cm4gdGhpcy5zaG91bGRIYW5kbGVQb3BTdGF0ZSgpJiYoaT1udWxsIT0obj1lLnN0YXRlKT9uLnR1cmJvbGlua3M6dm9pZCAwKT8ocj10LkxvY2F0aW9uLndyYXAod2luZG93LmxvY2F0aW9uKSxvPWkucmVzdG9yYXRpb25JZGVudGlmaWVyLHRoaXMuZGVsZWdhdGUuaGlzdG9yeVBvcHBlZFRvTG9jYXRpb25XaXRoUmVzdG9yYXRpb25JZGVudGlmaWVyKHIsbykpOnZvaWQgMH0sci5wcm90b3R5cGUub25QYWdlTG9hZD1mdW5jdGlvbihlKXtyZXR1cm4gdC5kZWZlcihmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdC5wYWdlTG9hZGVkPSEwfX0odGhpcykpfSxyLnByb3RvdHlwZS5zaG91bGRIYW5kbGVQb3BTdGF0ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBhZ2VJc0xvYWRlZCgpfSxyLnByb3RvdHlwZS5wYWdlSXNMb2FkZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYWdlTG9hZGVkfHxcImNvbXBsZXRlXCI9PT1kb2N1bWVudC5yZWFkeVN0YXRlfSxyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24odCxlLHIpe3ZhciBuO3JldHVybiBuPXt0dXJib2xpbmtzOntyZXN0b3JhdGlvbklkZW50aWZpZXI6cn19LGhpc3RvcnlbdCtcIlN0YXRlXCJdKG4sbnVsbCxlKX0scn0oKX0uY2FsbCh0aGlzKSxmdW5jdGlvbigpe3QuU25hcHNob3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciBlLHI7cj10LmhlYWQsZT10LmJvZHksdGhpcy5oZWFkPW51bGwhPXI/cjpkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaGVhZFwiKSx0aGlzLmJvZHk9bnVsbCE9ZT9lOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJib2R5XCIpfXJldHVybiBlLndyYXA9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiB0aGlzP3Q6dGhpcy5mcm9tSFRNTCh0KX0sZS5mcm9tSFRNTD1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaHRtbFwiKSxlLmlubmVySFRNTD10LHRoaXMuZnJvbUVsZW1lbnQoZSl9LGUuZnJvbUVsZW1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyB0aGlzKHtoZWFkOnQucXVlcnlTZWxlY3RvcihcImhlYWRcIiksYm9keTp0LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpfSl9LGUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBlKHtoZWFkOnRoaXMuaGVhZC5jbG9uZU5vZGUoITApLGJvZHk6dGhpcy5ib2R5LmNsb25lTm9kZSghMCl9KX0sZS5wcm90b3R5cGUuZ2V0Um9vdExvY2F0aW9uPWZ1bmN0aW9uKCl7dmFyIGUscjtyZXR1cm4gcj1udWxsIT0oZT10aGlzLmdldFNldHRpbmcoXCJyb290XCIpKT9lOlwiL1wiLG5ldyB0LkxvY2F0aW9uKHIpfSxlLnByb3RvdHlwZS5nZXRDYWNoZUNvbnRyb2xWYWx1ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFNldHRpbmcoXCJjYWNoZS1jb250cm9sXCIpfSxlLnByb3RvdHlwZS5oYXNBbmNob3I9ZnVuY3Rpb24odCl7dHJ5e3JldHVybiBudWxsIT10aGlzLmJvZHkucXVlcnlTZWxlY3RvcihcIltpZD0nXCIrdCtcIiddXCIpfWNhdGNoKGUpe319LGUucHJvdG90eXBlLmlzUHJldmlld2FibGU9ZnVuY3Rpb24oKXtyZXR1cm5cIm5vLXByZXZpZXdcIiE9PXRoaXMuZ2V0Q2FjaGVDb250cm9sVmFsdWUoKX0sZS5wcm90b3R5cGUuaXNDYWNoZWFibGU9ZnVuY3Rpb24oKXtyZXR1cm5cIm5vLWNhY2hlXCIhPT10aGlzLmdldENhY2hlQ29udHJvbFZhbHVlKCl9LGUucHJvdG90eXBlLmdldFNldHRpbmc9ZnVuY3Rpb24odCl7dmFyIGUscjtyZXR1cm4gcj10aGlzLmhlYWQucXVlcnlTZWxlY3RvckFsbChcIm1ldGFbbmFtZT0ndHVyYm9saW5rcy1cIit0K1wiJ11cIiksZT1yW3IubGVuZ3RoLTFdLG51bGwhPWU/ZS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpOnZvaWQgMH0sZX0oKX0uY2FsbCh0aGlzKSxmdW5jdGlvbigpe3ZhciBlPVtdLnNsaWNlO3QuUmVuZGVyZXI9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fXZhciByO3JldHVybiB0LnJlbmRlcj1mdW5jdGlvbigpe3ZhciB0LHIsbixvO3JldHVybiBuPWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXSx0PTM8PWFyZ3VtZW50cy5sZW5ndGg/ZS5jYWxsKGFyZ3VtZW50cywyKTpbXSxvPWZ1bmN0aW9uKHQsZSxyKXtyLnByb3RvdHlwZT10LnByb3RvdHlwZTt2YXIgbj1uZXcgcixvPXQuYXBwbHkobixlKTtyZXR1cm4gT2JqZWN0KG8pPT09bz9vOm59KHRoaXMsdCxmdW5jdGlvbigpe30pLG8uZGVsZWdhdGU9bixvLnJlbmRlcihyKSxvfSx0LnByb3RvdHlwZS5yZW5kZXJWaWV3PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRlbGVnYXRlLnZpZXdXaWxsUmVuZGVyKHRoaXMubmV3Qm9keSksdCgpLHRoaXMuZGVsZWdhdGUudmlld1JlbmRlcmVkKHRoaXMubmV3Qm9keSl9LHQucHJvdG90eXBlLmludmFsaWRhdGVWaWV3PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGVsZWdhdGUudmlld0ludmFsaWRhdGVkKCl9LHQucHJvdG90eXBlLmNyZWF0ZVNjcmlwdEVsZW1lbnQ9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuXCJmYWxzZVwiPT09dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXR1cmJvbGlua3MtZXZhbFwiKT90OihlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksZS50ZXh0Q29udGVudD10LnRleHRDb250ZW50LHIoZSx0KSxlKX0scj1mdW5jdGlvbih0LGUpe3ZhciByLG4sbyxpLHMsYSx1O2ZvcihpPWUuYXR0cmlidXRlcyxhPVtdLHI9MCxuPWkubGVuZ3RoO24+cjtyKyspcz1pW3JdLG89cy5uYW1lLHU9cy52YWx1ZSxhLnB1c2godC5zZXRBdHRyaWJ1dGUobyx1KSk7cmV0dXJuIGF9LHR9KCl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXt0LkhlYWREZXRhaWxzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt2YXIgZSxyLGkscyxhLHUsbDtmb3IodGhpcy5lbGVtZW50PXQsdGhpcy5lbGVtZW50cz17fSxsPXRoaXMuZWxlbWVudC5jaGlsZE5vZGVzLHM9MCx1PWwubGVuZ3RoO3U+cztzKyspaT1sW3NdLGkubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmKGE9aS5vdXRlckhUTUwscj1udWxsIT0oZT10aGlzLmVsZW1lbnRzKVthXT9lW2FdOmVbYV09e3R5cGU6byhpKSx0cmFja2VkOm4oaSksZWxlbWVudHM6W119LHIuZWxlbWVudHMucHVzaChpKSl9dmFyIGUscixuLG87cmV0dXJuIHQucHJvdG90eXBlLmhhc0VsZW1lbnRXaXRoS2V5PWZ1bmN0aW9uKHQpe3JldHVybiB0IGluIHRoaXMuZWxlbWVudHN9LHQucHJvdG90eXBlLmdldFRyYWNrZWRFbGVtZW50U2lnbmF0dXJlPWZ1bmN0aW9uKCl7dmFyIHQsZTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgcixuO3I9dGhpcy5lbGVtZW50cyxuPVtdO2Zvcih0IGluIHIpZT1yW3RdLnRyYWNrZWQsZSYmbi5wdXNoKHQpO3JldHVybiBufS5jYWxsKHRoaXMpLmpvaW4oXCJcIil9LHQucHJvdG90eXBlLmdldFNjcmlwdEVsZW1lbnRzTm90SW5EZXRhaWxzPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmdldEVsZW1lbnRzTWF0Y2hpbmdUeXBlTm90SW5EZXRhaWxzKFwic2NyaXB0XCIsdCl9LHQucHJvdG90eXBlLmdldFN0eWxlc2hlZXRFbGVtZW50c05vdEluRGV0YWlscz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5nZXRFbGVtZW50c01hdGNoaW5nVHlwZU5vdEluRGV0YWlscyhcInN0eWxlc2hlZXRcIix0KX0sdC5wcm90b3R5cGUuZ2V0RWxlbWVudHNNYXRjaGluZ1R5cGVOb3RJbkRldGFpbHM9ZnVuY3Rpb24odCxlKXt2YXIgcixuLG8saSxzLGE7bz10aGlzLmVsZW1lbnRzLHM9W107Zm9yKG4gaW4gbylpPW9bbl0sYT1pLnR5cGUscj1pLmVsZW1lbnRzLGEhPT10fHxlLmhhc0VsZW1lbnRXaXRoS2V5KG4pfHxzLnB1c2goclswXSk7cmV0dXJuIHN9LHQucHJvdG90eXBlLmdldFByb3Zpc2lvbmFsRWxlbWVudHM9ZnVuY3Rpb24oKXt2YXIgdCxlLHIsbixvLGkscztyPVtdLG49dGhpcy5lbGVtZW50cztmb3IoZSBpbiBuKW89bltlXSxzPW8udHlwZSxpPW8udHJhY2tlZCx0PW8uZWxlbWVudHMsbnVsbCE9c3x8aT90Lmxlbmd0aD4xJiZyLnB1c2guYXBwbHkocix0LnNsaWNlKDEpKTpyLnB1c2guYXBwbHkocix0KTtyZXR1cm4gcn0sbz1mdW5jdGlvbih0KXtyZXR1cm4gZSh0KT9cInNjcmlwdFwiOnIodCk/XCJzdHlsZXNoZWV0XCI6dm9pZCAwfSxuPWZ1bmN0aW9uKHQpe3JldHVyblwicmVsb2FkXCI9PT10LmdldEF0dHJpYnV0ZShcImRhdGEtdHVyYm9saW5rcy10cmFja1wiKX0sZT1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gZT10LnRhZ05hbWUudG9Mb3dlckNhc2UoKSxcInNjcmlwdFwiPT09ZX0scj1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gZT10LnRhZ05hbWUudG9Mb3dlckNhc2UoKSxcInN0eWxlXCI9PT1lfHxcImxpbmtcIj09PWUmJlwic3R5bGVzaGVldFwiPT09dC5nZXRBdHRyaWJ1dGUoXCJyZWxcIil9LHR9KCl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4oKXt0aGlzLmNvbnN0cnVjdG9yPXR9Zm9yKHZhciBvIGluIGUpci5jYWxsKGUsbykmJih0W29dPWVbb10pO3JldHVybiBuLnByb3RvdHlwZT1lLnByb3RvdHlwZSx0LnByb3RvdHlwZT1uZXcgbix0Ll9fc3VwZXJfXz1lLnByb3RvdHlwZSx0fSxyPXt9Lmhhc093blByb3BlcnR5O3QuU25hcHNob3RSZW5kZXJlcj1mdW5jdGlvbihyKXtmdW5jdGlvbiBuKGUscil7dGhpcy5jdXJyZW50U25hcHNob3Q9ZSx0aGlzLm5ld1NuYXBzaG90PXIsdGhpcy5jdXJyZW50SGVhZERldGFpbHM9bmV3IHQuSGVhZERldGFpbHModGhpcy5jdXJyZW50U25hcHNob3QuaGVhZCksdGhpcy5uZXdIZWFkRGV0YWlscz1uZXcgdC5IZWFkRGV0YWlscyh0aGlzLm5ld1NuYXBzaG90LmhlYWQpLHRoaXMubmV3Qm9keT10aGlzLm5ld1NuYXBzaG90LmJvZHl9cmV0dXJuIGUobixyKSxuLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudHJhY2tlZEVsZW1lbnRzQXJlSWRlbnRpY2FsKCk/KHRoaXMubWVyZ2VIZWFkKCksdGhpcy5yZW5kZXJWaWV3KGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlLnJlcGxhY2VCb2R5KCksZS5mb2N1c0ZpcnN0QXV0b2ZvY3VzYWJsZUVsZW1lbnQoKSx0KCl9fSh0aGlzKSkpOnRoaXMuaW52YWxpZGF0ZVZpZXcoKX0sbi5wcm90b3R5cGUubWVyZ2VIZWFkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29weU5ld0hlYWRTdHlsZXNoZWV0RWxlbWVudHMoKSx0aGlzLmNvcHlOZXdIZWFkU2NyaXB0RWxlbWVudHMoKSx0aGlzLnJlbW92ZUN1cnJlbnRIZWFkUHJvdmlzaW9uYWxFbGVtZW50cygpLHRoaXMuY29weU5ld0hlYWRQcm92aXNpb25hbEVsZW1lbnRzKCl9LG4ucHJvdG90eXBlLnJlcGxhY2VCb2R5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWN0aXZhdGVCb2R5U2NyaXB0RWxlbWVudHMoKSx0aGlzLmltcG9ydEJvZHlQZXJtYW5lbnRFbGVtZW50cygpLHRoaXMuYXNzaWduTmV3Qm9keSgpfSxuLnByb3RvdHlwZS50cmFja2VkRWxlbWVudHNBcmVJZGVudGljYWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdXJyZW50SGVhZERldGFpbHMuZ2V0VHJhY2tlZEVsZW1lbnRTaWduYXR1cmUoKT09PXRoaXMubmV3SGVhZERldGFpbHMuZ2V0VHJhY2tlZEVsZW1lbnRTaWduYXR1cmUoKX0sbi5wcm90b3R5cGUuY29weU5ld0hlYWRTdHlsZXNoZWV0RWxlbWVudHM9ZnVuY3Rpb24oKXt2YXIgdCxlLHIsbixvO2ZvcihuPXRoaXMuZ2V0TmV3SGVhZFN0eWxlc2hlZXRFbGVtZW50cygpLG89W10sZT0wLHI9bi5sZW5ndGg7cj5lO2UrKyl0PW5bZV0sby5wdXNoKGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodCkpO3JldHVybiBvfSxuLnByb3RvdHlwZS5jb3B5TmV3SGVhZFNjcmlwdEVsZW1lbnRzPWZ1bmN0aW9uKCl7dmFyIHQsZSxyLG4sbztmb3Iobj10aGlzLmdldE5ld0hlYWRTY3JpcHRFbGVtZW50cygpLG89W10sZT0wLHI9bi5sZW5ndGg7cj5lO2UrKyl0PW5bZV0sby5wdXNoKGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVTY3JpcHRFbGVtZW50KHQpKSk7cmV0dXJuIG99LG4ucHJvdG90eXBlLnJlbW92ZUN1cnJlbnRIZWFkUHJvdmlzaW9uYWxFbGVtZW50cz1mdW5jdGlvbigpe3ZhciB0LGUscixuLG87Zm9yKG49dGhpcy5nZXRDdXJyZW50SGVhZFByb3Zpc2lvbmFsRWxlbWVudHMoKSxvPVtdLGU9MCxyPW4ubGVuZ3RoO3I+ZTtlKyspdD1uW2VdLG8ucHVzaChkb2N1bWVudC5oZWFkLnJlbW92ZUNoaWxkKHQpKTtyZXR1cm4gb30sbi5wcm90b3R5cGUuY29weU5ld0hlYWRQcm92aXNpb25hbEVsZW1lbnRzPWZ1bmN0aW9uKCl7dmFyIHQsZSxyLG4sbztmb3Iobj10aGlzLmdldE5ld0hlYWRQcm92aXNpb25hbEVsZW1lbnRzKCksbz1bXSxlPTAscj1uLmxlbmd0aDtyPmU7ZSsrKXQ9bltlXSxvLnB1c2goZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0KSk7cmV0dXJuIG99LG4ucHJvdG90eXBlLmltcG9ydEJvZHlQZXJtYW5lbnRFbGVtZW50cz1mdW5jdGlvbigpe3ZhciB0LGUscixuLG8saTtmb3Iobj10aGlzLmdldE5ld0JvZHlQZXJtYW5lbnRFbGVtZW50cygpLGk9W10sZT0wLHI9bi5sZW5ndGg7cj5lO2UrKylvPW5bZV0sKHQ9dGhpcy5maW5kQ3VycmVudEJvZHlQZXJtYW5lbnRFbGVtZW50KG8pKT9pLnB1c2goby5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0LG8pKTppLnB1c2godm9pZCAwKTtyZXR1cm4gaX0sbi5wcm90b3R5cGUuYWN0aXZhdGVCb2R5U2NyaXB0RWxlbWVudHM9ZnVuY3Rpb24oKXt2YXIgdCxlLHIsbixvLGk7Zm9yKG49dGhpcy5nZXROZXdCb2R5U2NyaXB0RWxlbWVudHMoKSxpPVtdLGU9MCxyPW4ubGVuZ3RoO3I+ZTtlKyspbz1uW2VdLHQ9dGhpcy5jcmVhdGVTY3JpcHRFbGVtZW50KG8pLGkucHVzaChvLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHQsbykpO3JldHVybiBpfSxuLnByb3RvdHlwZS5hc3NpZ25OZXdCb2R5PWZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmJvZHk9dGhpcy5uZXdCb2R5fSxuLnByb3RvdHlwZS5mb2N1c0ZpcnN0QXV0b2ZvY3VzYWJsZUVsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gbnVsbCE9KHQ9dGhpcy5maW5kRmlyc3RBdXRvZm9jdXNhYmxlRWxlbWVudCgpKT90LmZvY3VzKCk6dm9pZCAwfSxuLnByb3RvdHlwZS5nZXROZXdIZWFkU3R5bGVzaGVldEVsZW1lbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmV3SGVhZERldGFpbHMuZ2V0U3R5bGVzaGVldEVsZW1lbnRzTm90SW5EZXRhaWxzKHRoaXMuY3VycmVudEhlYWREZXRhaWxzKX0sbi5wcm90b3R5cGUuZ2V0TmV3SGVhZFNjcmlwdEVsZW1lbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmV3SGVhZERldGFpbHMuZ2V0U2NyaXB0RWxlbWVudHNOb3RJbkRldGFpbHModGhpcy5jdXJyZW50SGVhZERldGFpbHMpfSxuLnByb3RvdHlwZS5nZXRDdXJyZW50SGVhZFByb3Zpc2lvbmFsRWxlbWVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdXJyZW50SGVhZERldGFpbHMuZ2V0UHJvdmlzaW9uYWxFbGVtZW50cygpfSxuLnByb3RvdHlwZS5nZXROZXdIZWFkUHJvdmlzaW9uYWxFbGVtZW50cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5ld0hlYWREZXRhaWxzLmdldFByb3Zpc2lvbmFsRWxlbWVudHMoKX0sbi5wcm90b3R5cGUuZ2V0TmV3Qm9keVBlcm1hbmVudEVsZW1lbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmV3Qm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkXVtkYXRhLXR1cmJvbGlua3MtcGVybWFuZW50XVwiKX0sbi5wcm90b3R5cGUuZmluZEN1cnJlbnRCb2R5UGVybWFuZW50RWxlbWVudD1mdW5jdGlvbih0KXtyZXR1cm4gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI1wiK3QuaWQrXCJbZGF0YS10dXJib2xpbmtzLXBlcm1hbmVudF1cIil9LG4ucHJvdG90eXBlLmdldE5ld0JvZHlTY3JpcHRFbGVtZW50cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5ld0JvZHkucXVlcnlTZWxlY3RvckFsbChcInNjcmlwdFwiKX0sbi5wcm90b3R5cGUuZmluZEZpcnN0QXV0b2ZvY3VzYWJsZUVsZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiW2F1dG9mb2N1c11cIil9LG59KHQuUmVuZGVyZXIpfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKCl7dGhpcy5jb25zdHJ1Y3Rvcj10fWZvcih2YXIgbyBpbiBlKXIuY2FsbChlLG8pJiYodFtvXT1lW29dKTtyZXR1cm4gbi5wcm90b3R5cGU9ZS5wcm90b3R5cGUsdC5wcm90b3R5cGU9bmV3IG4sdC5fX3N1cGVyX189ZS5wcm90b3R5cGUsdH0scj17fS5oYXNPd25Qcm9wZXJ0eTt0LkVycm9yUmVuZGVyZXI9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gcih0KXt0aGlzLmh0bWw9dH1yZXR1cm4gZShyLHQpLHIucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5yZW5kZXJWaWV3KGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlLnJlcGxhY2VEb2N1bWVudEhUTUwoKSxlLmFjdGl2YXRlQm9keVNjcmlwdEVsZW1lbnRzKCksdCgpfX0odGhpcykpfSxyLnByb3RvdHlwZS5yZXBsYWNlRG9jdW1lbnRIVE1MPWZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5pbm5lckhUTUw9dGhpcy5odG1sfSxyLnByb3RvdHlwZS5hY3RpdmF0ZUJvZHlTY3JpcHRFbGVtZW50cz1mdW5jdGlvbigpe3ZhciB0LGUscixuLG8saTtmb3Iobj10aGlzLmdldFNjcmlwdEVsZW1lbnRzKCksaT1bXSxlPTAscj1uLmxlbmd0aDtyPmU7ZSsrKW89bltlXSx0PXRoaXMuY3JlYXRlU2NyaXB0RWxlbWVudChvKSxpLnB1c2goby5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0LG8pKTtyZXR1cm4gaX0sci5wcm90b3R5cGUuZ2V0U2NyaXB0RWxlbWVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzY3JpcHRcIil9LHJ9KHQuUmVuZGVyZXIpfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7dC5WaWV3PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt0aGlzLmRlbGVnYXRlPXQsdGhpcy5lbGVtZW50PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudH1yZXR1cm4gZS5wcm90b3R5cGUuZ2V0Um9vdExvY2F0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0U25hcHNob3QoKS5nZXRSb290TG9jYXRpb24oKX0sZS5wcm90b3R5cGUuZ2V0U25hcHNob3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdC5TbmFwc2hvdC5mcm9tRWxlbWVudCh0aGlzLmVsZW1lbnQpfSxlLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24odCxlKXt2YXIgcixuLG87cmV0dXJuIG89dC5zbmFwc2hvdCxyPXQuZXJyb3Isbj10LmlzUHJldmlldyx0aGlzLm1hcmtBc1ByZXZpZXcobiksbnVsbCE9bz90aGlzLnJlbmRlclNuYXBzaG90KG8sZSk6dGhpcy5yZW5kZXJFcnJvcihyLGUpfSxlLnByb3RvdHlwZS5tYXJrQXNQcmV2aWV3PWZ1bmN0aW9uKHQpe3JldHVybiB0P3RoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXR1cmJvbGlua3MtcHJldmlld1wiLFwiXCIpOnRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXR1cmJvbGlua3MtcHJldmlld1wiKX0sZS5wcm90b3R5cGUucmVuZGVyU25hcHNob3Q9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5TbmFwc2hvdFJlbmRlcmVyLnJlbmRlcih0aGlzLmRlbGVnYXRlLHIsdGhpcy5nZXRTbmFwc2hvdCgpLHQuU25hcHNob3Qud3JhcChlKSl9LGUucHJvdG90eXBlLnJlbmRlckVycm9yPWZ1bmN0aW9uKGUscil7cmV0dXJuIHQuRXJyb3JSZW5kZXJlci5yZW5kZXIodGhpcy5kZWxlZ2F0ZSxyLGUpfSxlfSgpfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseShlLGFyZ3VtZW50cyl9fTt0LlNjcm9sbE1hbmFnZXI9ZnVuY3Rpb24oKXtmdW5jdGlvbiByKHIpe3RoaXMuZGVsZWdhdGU9cix0aGlzLm9uU2Nyb2xsPWUodGhpcy5vblNjcm9sbCx0aGlzKSx0aGlzLm9uU2Nyb2xsPXQudGhyb3R0bGUodGhpcy5vblNjcm9sbCl9cmV0dXJuIHIucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhcnRlZD92b2lkIDA6KGFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix0aGlzLm9uU2Nyb2xsLCExKSx0aGlzLm9uU2Nyb2xsKCksdGhpcy5zdGFydGVkPSEwKX0sci5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXJ0ZWQ/KHJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix0aGlzLm9uU2Nyb2xsLCExKSx0aGlzLnN0YXJ0ZWQ9ITEpOnZvaWQgMH0sci5wcm90b3R5cGUuc2Nyb2xsVG9FbGVtZW50PWZ1bmN0aW9uKHQpe3JldHVybiB0LnNjcm9sbEludG9WaWV3KCl9LHIucHJvdG90eXBlLnNjcm9sbFRvUG9zaXRpb249ZnVuY3Rpb24odCl7dmFyIGUscjtyZXR1cm4gZT10Lngscj10Lnksd2luZG93LnNjcm9sbFRvKGUscil9LHIucHJvdG90eXBlLm9uU2Nyb2xsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnVwZGF0ZVBvc2l0aW9uKHt4OndpbmRvdy5wYWdlWE9mZnNldCx5OndpbmRvdy5wYWdlWU9mZnNldH0pfSxyLnByb3RvdHlwZS51cGRhdGVQb3NpdGlvbj1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gdGhpcy5wb3NpdGlvbj10LG51bGwhPShlPXRoaXMuZGVsZWdhdGUpP2Uuc2Nyb2xsUG9zaXRpb25DaGFuZ2VkKHRoaXMucG9zaXRpb24pOnZvaWQgMH0scn0oKX0uY2FsbCh0aGlzKSxmdW5jdGlvbigpe3QuU25hcHNob3RDYWNoZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7dGhpcy5zaXplPXQsdGhpcy5rZXlzPVtdLHRoaXMuc25hcHNob3RzPXt9fXZhciByO3JldHVybiBlLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIGU9cih0KSxlIGluIHRoaXMuc25hcHNob3RzfSxlLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7dmFyIGU7aWYodGhpcy5oYXModCkpcmV0dXJuIGU9dGhpcy5yZWFkKHQpLHRoaXMudG91Y2godCksZX0sZS5wcm90b3R5cGUucHV0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMud3JpdGUodCxlKSx0aGlzLnRvdWNoKHQpLGV9LGUucHJvdG90eXBlLnJlYWQ9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIGU9cih0KSx0aGlzLnNuYXBzaG90c1tlXX0sZS5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24odCxlKXt2YXIgbjtyZXR1cm4gbj1yKHQpLHRoaXMuc25hcHNob3RzW25dPWV9LGUucHJvdG90eXBlLnRvdWNoPWZ1bmN0aW9uKHQpe3ZhciBlLG47cmV0dXJuIG49cih0KSxlPXRoaXMua2V5cy5pbmRleE9mKG4pLGU+LTEmJnRoaXMua2V5cy5zcGxpY2UoZSwxKSx0aGlzLmtleXMudW5zaGlmdChuKSx0aGlzLnRyaW0oKX0sZS5wcm90b3R5cGUudHJpbT1mdW5jdGlvbigpe3ZhciB0LGUscixuLG87Zm9yKG49dGhpcy5rZXlzLnNwbGljZSh0aGlzLnNpemUpLG89W10sdD0wLHI9bi5sZW5ndGg7cj50O3QrKyllPW5bdF0sby5wdXNoKGRlbGV0ZSB0aGlzLnNuYXBzaG90c1tlXSk7cmV0dXJuIG99LHI9ZnVuY3Rpb24oZSl7cmV0dXJuIHQuTG9jYXRpb24ud3JhcChlKS50b0NhY2hlS2V5KCl9LGV9KCl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbih0LGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KGUsYXJndW1lbnRzKX19O3QuVmlzaXQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiByKHIsbixvKXt0aGlzLmNvbnRyb2xsZXI9cix0aGlzLmFjdGlvbj1vLHRoaXMucGVyZm9ybVNjcm9sbD1lKHRoaXMucGVyZm9ybVNjcm9sbCx0aGlzKSx0aGlzLmlkZW50aWZpZXI9dC51dWlkKCksdGhpcy5sb2NhdGlvbj10LkxvY2F0aW9uLndyYXAobiksdGhpcy5hZGFwdGVyPXRoaXMuY29udHJvbGxlci5hZGFwdGVyLHRoaXMuc3RhdGU9XCJpbml0aWFsaXplZFwiLHRoaXMudGltaW5nTWV0cmljcz17fX12YXIgbjtyZXR1cm4gci5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm5cImluaXRpYWxpemVkXCI9PT10aGlzLnN0YXRlPyh0aGlzLnJlY29yZFRpbWluZ01ldHJpYyhcInZpc2l0U3RhcnRcIiksdGhpcy5zdGF0ZT1cInN0YXJ0ZWRcIix0aGlzLmFkYXB0ZXIudmlzaXRTdGFydGVkKHRoaXMpKTp2b2lkIDB9LHIucHJvdG90eXBlLmNhbmNlbD1mdW5jdGlvbigpe3ZhciB0O3JldHVyblwic3RhcnRlZFwiPT09dGhpcy5zdGF0ZT8obnVsbCE9KHQ9dGhpcy5yZXF1ZXN0KSYmdC5jYW5jZWwoKSx0aGlzLmNhbmNlbFJlbmRlcigpLHRoaXMuc3RhdGU9XCJjYW5jZWxlZFwiKTp2b2lkIDB9LHIucHJvdG90eXBlLmNvbXBsZXRlPWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuXCJzdGFydGVkXCI9PT10aGlzLnN0YXRlPyh0aGlzLnJlY29yZFRpbWluZ01ldHJpYyhcInZpc2l0RW5kXCIpLHRoaXMuc3RhdGU9XCJjb21wbGV0ZWRcIixcImZ1bmN0aW9uXCI9PXR5cGVvZih0PXRoaXMuYWRhcHRlcikudmlzaXRDb21wbGV0ZWQmJnQudmlzaXRDb21wbGV0ZWQodGhpcyksdGhpcy5jb250cm9sbGVyLnZpc2l0Q29tcGxldGVkKHRoaXMpKTp2b2lkIDB9LHIucHJvdG90eXBlLmZhaWw9ZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm5cInN0YXJ0ZWRcIj09PXRoaXMuc3RhdGU/KHRoaXMuc3RhdGU9XCJmYWlsZWRcIixcImZ1bmN0aW9uXCI9PXR5cGVvZih0PXRoaXMuYWRhcHRlcikudmlzaXRGYWlsZWQ/dC52aXNpdEZhaWxlZCh0aGlzKTp2b2lkIDApOnZvaWQgMH0sci5wcm90b3R5cGUuY2hhbmdlSGlzdG9yeT1mdW5jdGlvbigpe3ZhciB0LGU7cmV0dXJuIHRoaXMuaGlzdG9yeUNoYW5nZWQ/dm9pZCAwOih0PXRoaXMubG9jYXRpb24uaXNFcXVhbFRvKHRoaXMucmVmZXJyZXIpP1wicmVwbGFjZVwiOnRoaXMuYWN0aW9uLGU9bih0KSx0aGlzLmNvbnRyb2xsZXJbZV0odGhpcy5sb2NhdGlvbix0aGlzLnJlc3RvcmF0aW9uSWRlbnRpZmllciksdGhpcy5oaXN0b3J5Q2hhbmdlZD0hMCl9LHIucHJvdG90eXBlLmlzc3VlUmVxdWVzdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNob3VsZElzc3VlUmVxdWVzdCgpJiZudWxsPT10aGlzLnJlcXVlc3Q/KHRoaXMucHJvZ3Jlc3M9MCx0aGlzLnJlcXVlc3Q9bmV3IHQuSHR0cFJlcXVlc3QodGhpcyx0aGlzLmxvY2F0aW9uLHRoaXMucmVmZXJyZXIpLHRoaXMucmVxdWVzdC5zZW5kKCkpOnZvaWQgMH0sci5wcm90b3R5cGUuZ2V0Q2FjaGVkU25hcHNob3Q9ZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4hKHQ9dGhpcy5jb250cm9sbGVyLmdldENhY2hlZFNuYXBzaG90Rm9yTG9jYXRpb24odGhpcy5sb2NhdGlvbikpfHxudWxsIT10aGlzLmxvY2F0aW9uLmFuY2hvciYmIXQuaGFzQW5jaG9yKHRoaXMubG9jYXRpb24uYW5jaG9yKXx8XCJyZXN0b3JlXCIhPT10aGlzLmFjdGlvbiYmIXQuaXNQcmV2aWV3YWJsZSgpP3ZvaWQgMDp0fSxyLnByb3RvdHlwZS5oYXNDYWNoZWRTbmFwc2hvdD1mdW5jdGlvbigpe3JldHVybiBudWxsIT10aGlzLmdldENhY2hlZFNuYXBzaG90KCl9LHIucHJvdG90eXBlLmxvYWRDYWNoZWRTbmFwc2hvdD1mdW5jdGlvbigpe3ZhciB0LGU7cmV0dXJuKGU9dGhpcy5nZXRDYWNoZWRTbmFwc2hvdCgpKT8odD10aGlzLnNob3VsZElzc3VlUmVxdWVzdCgpLHRoaXMucmVuZGVyKGZ1bmN0aW9uKCl7dmFyIHI7cmV0dXJuIHRoaXMuY2FjaGVTbmFwc2hvdCgpLHRoaXMuY29udHJvbGxlci5yZW5kZXIoe3NuYXBzaG90OmUsaXNQcmV2aWV3OnR9LHRoaXMucGVyZm9ybVNjcm9sbCksXCJmdW5jdGlvblwiPT10eXBlb2Yocj10aGlzLmFkYXB0ZXIpLnZpc2l0UmVuZGVyZWQmJnIudmlzaXRSZW5kZXJlZCh0aGlzKSx0P3ZvaWQgMDp0aGlzLmNvbXBsZXRlKCl9KSk6dm9pZCAwfSxyLnByb3RvdHlwZS5sb2FkUmVzcG9uc2U9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9dGhpcy5yZXNwb25zZT90aGlzLnJlbmRlcihmdW5jdGlvbigpe3ZhciB0LGU7cmV0dXJuIHRoaXMuY2FjaGVTbmFwc2hvdCgpLHRoaXMucmVxdWVzdC5mYWlsZWQ/KHRoaXMuY29udHJvbGxlci5yZW5kZXIoe2Vycm9yOnRoaXMucmVzcG9uc2V9LHRoaXMucGVyZm9ybVNjcm9sbCksXCJmdW5jdGlvblwiPT10eXBlb2YodD10aGlzLmFkYXB0ZXIpLnZpc2l0UmVuZGVyZWQmJnQudmlzaXRSZW5kZXJlZCh0aGlzKSx0aGlzLmZhaWwoKSk6KHRoaXMuY29udHJvbGxlci5yZW5kZXIoe3NuYXBzaG90OnRoaXMucmVzcG9uc2V9LHRoaXMucGVyZm9ybVNjcm9sbCksXCJmdW5jdGlvblwiPT10eXBlb2YoZT10aGlzLmFkYXB0ZXIpLnZpc2l0UmVuZGVyZWQmJmUudmlzaXRSZW5kZXJlZCh0aGlzKSx0aGlzLmNvbXBsZXRlKCkpfSk6dm9pZCAwfSxyLnByb3RvdHlwZS5mb2xsb3dSZWRpcmVjdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlZGlyZWN0ZWRUb0xvY2F0aW9uJiYhdGhpcy5mb2xsb3dlZFJlZGlyZWN0Pyh0aGlzLmxvY2F0aW9uPXRoaXMucmVkaXJlY3RlZFRvTG9jYXRpb24sdGhpcy5jb250cm9sbGVyLnJlcGxhY2VIaXN0b3J5V2l0aExvY2F0aW9uQW5kUmVzdG9yYXRpb25JZGVudGlmaWVyKHRoaXMucmVkaXJlY3RlZFRvTG9jYXRpb24sdGhpcy5yZXN0b3JhdGlvbklkZW50aWZpZXIpLHRoaXMuZm9sbG93ZWRSZWRpcmVjdD0hMCk6dm9pZCAwfSxyLnByb3RvdHlwZS5yZXF1ZXN0U3RhcnRlZD1mdW5jdGlvbigpe3ZhciB0O3JldHVybiB0aGlzLnJlY29yZFRpbWluZ01ldHJpYyhcInJlcXVlc3RTdGFydFwiKSxcImZ1bmN0aW9uXCI9PXR5cGVvZih0PXRoaXMuYWRhcHRlcikudmlzaXRSZXF1ZXN0U3RhcnRlZD90LnZpc2l0UmVxdWVzdFN0YXJ0ZWQodGhpcyk6dm9pZCAwfSxyLnByb3RvdHlwZS5yZXF1ZXN0UHJvZ3Jlc3NlZD1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gdGhpcy5wcm9ncmVzcz10LFwiZnVuY3Rpb25cIj09dHlwZW9mKGU9dGhpcy5hZGFwdGVyKS52aXNpdFJlcXVlc3RQcm9ncmVzc2VkP2UudmlzaXRSZXF1ZXN0UHJvZ3Jlc3NlZCh0aGlzKTp2b2lkIDB9LHIucHJvdG90eXBlLnJlcXVlc3RDb21wbGV0ZWRXaXRoUmVzcG9uc2U9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdGhpcy5yZXNwb25zZT1lLG51bGwhPXImJih0aGlzLnJlZGlyZWN0ZWRUb0xvY2F0aW9uPXQuTG9jYXRpb24ud3JhcChyKSksdGhpcy5hZGFwdGVyLnZpc2l0UmVxdWVzdENvbXBsZXRlZCh0aGlzKX0sci5wcm90b3R5cGUucmVxdWVzdEZhaWxlZFdpdGhTdGF0dXNDb2RlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMucmVzcG9uc2U9ZSx0aGlzLmFkYXB0ZXIudmlzaXRSZXF1ZXN0RmFpbGVkV2l0aFN0YXR1c0NvZGUodGhpcyx0KX0sci5wcm90b3R5cGUucmVxdWVzdEZpbmlzaGVkPWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIHRoaXMucmVjb3JkVGltaW5nTWV0cmljKFwicmVxdWVzdEVuZFwiKSxcImZ1bmN0aW9uXCI9PXR5cGVvZih0PXRoaXMuYWRhcHRlcikudmlzaXRSZXF1ZXN0RmluaXNoZWQ/dC52aXNpdFJlcXVlc3RGaW5pc2hlZCh0aGlzKTp2b2lkIDB9LHIucHJvdG90eXBlLnBlcmZvcm1TY3JvbGw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zY3JvbGxlZD92b2lkIDA6KFwicmVzdG9yZVwiPT09dGhpcy5hY3Rpb24/dGhpcy5zY3JvbGxUb1Jlc3RvcmVkUG9zaXRpb24oKXx8dGhpcy5zY3JvbGxUb1RvcCgpOnRoaXMuc2Nyb2xsVG9BbmNob3IoKXx8dGhpcy5zY3JvbGxUb1RvcCgpLHRoaXMuc2Nyb2xsZWQ9ITApfSxyLnByb3RvdHlwZS5zY3JvbGxUb1Jlc3RvcmVkUG9zaXRpb249ZnVuY3Rpb24oKXt2YXIgdCxlO3JldHVybiB0PW51bGwhPShlPXRoaXMucmVzdG9yYXRpb25EYXRhKT9lLnNjcm9sbFBvc2l0aW9uOnZvaWQgMCxudWxsIT10Pyh0aGlzLmNvbnRyb2xsZXIuc2Nyb2xsVG9Qb3NpdGlvbih0KSwhMCk6dm9pZCAwfSxyLnByb3RvdHlwZS5zY3JvbGxUb0FuY2hvcj1mdW5jdGlvbigpe3JldHVybiBudWxsIT10aGlzLmxvY2F0aW9uLmFuY2hvcj8odGhpcy5jb250cm9sbGVyLnNjcm9sbFRvQW5jaG9yKHRoaXMubG9jYXRpb24uYW5jaG9yKSwhMCk6dm9pZCAwfSxyLnByb3RvdHlwZS5zY3JvbGxUb1RvcD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnRyb2xsZXIuc2Nyb2xsVG9Qb3NpdGlvbih7eDowLHk6MH0pfSxyLnByb3RvdHlwZS5yZWNvcmRUaW1pbmdNZXRyaWM9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIG51bGwhPShlPXRoaXMudGltaW5nTWV0cmljcylbdF0/ZVt0XTplW3RdPShuZXcgRGF0ZSkuZ2V0VGltZSgpfSxyLnByb3RvdHlwZS5nZXRUaW1pbmdNZXRyaWNzPWZ1bmN0aW9uKCl7cmV0dXJuIHQuY29weU9iamVjdCh0aGlzLnRpbWluZ01ldHJpY3MpfSxuPWZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlXCJyZXBsYWNlXCI6cmV0dXJuXCJyZXBsYWNlSGlzdG9yeVdpdGhMb2NhdGlvbkFuZFJlc3RvcmF0aW9uSWRlbnRpZmllclwiO2Nhc2VcImFkdmFuY2VcIjpjYXNlXCJyZXN0b3JlXCI6cmV0dXJuXCJwdXNoSGlzdG9yeVdpdGhMb2NhdGlvbkFuZFJlc3RvcmF0aW9uSWRlbnRpZmllclwifX0sci5wcm90b3R5cGUuc2hvdWxkSXNzdWVSZXF1ZXN0PWZ1bmN0aW9uKCl7cmV0dXJuXCJyZXN0b3JlXCI9PT10aGlzLmFjdGlvbj8hdGhpcy5oYXNDYWNoZWRTbmFwc2hvdCgpOiEwfSxyLnByb3RvdHlwZS5jYWNoZVNuYXBzaG90PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc25hcHNob3RDYWNoZWQ/dm9pZCAwOih0aGlzLmNvbnRyb2xsZXIuY2FjaGVTbmFwc2hvdCgpLHRoaXMuc25hcHNob3RDYWNoZWQ9ITApfSxyLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuY2FuY2VsUmVuZGVyKCksdGhpcy5mcmFtZT1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUuZnJhbWU9bnVsbCx0LmNhbGwoZSl9fSh0aGlzKSl9LHIucHJvdG90eXBlLmNhbmNlbFJlbmRlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmZyYW1lP2NhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuZnJhbWUpOnZvaWQgMH0scn0oKX0uY2FsbCh0aGlzKSxmdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfX07dC5Db250cm9sbGVyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gcigpe3RoaXMuY2xpY2tCdWJibGVkPWUodGhpcy5jbGlja0J1YmJsZWQsdGhpcyksdGhpcy5jbGlja0NhcHR1cmVkPWUodGhpcy5jbGlja0NhcHR1cmVkLHRoaXMpLHRoaXMucGFnZUxvYWRlZD1lKHRoaXMucGFnZUxvYWRlZCx0aGlzKSx0aGlzLmhpc3Rvcnk9bmV3IHQuSGlzdG9yeSh0aGlzKSx0aGlzLnZpZXc9bmV3IHQuVmlldyh0aGlzKSx0aGlzLnNjcm9sbE1hbmFnZXI9bmV3IHQuU2Nyb2xsTWFuYWdlcih0aGlzKSx0aGlzLnJlc3RvcmF0aW9uRGF0YT17fSx0aGlzLmNsZWFyQ2FjaGUoKX1yZXR1cm4gci5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdC5zdXBwb3J0ZWQmJiF0aGlzLnN0YXJ0ZWQ/KGFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMuY2xpY2tDYXB0dXJlZCwhMCksYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIix0aGlzLnBhZ2VMb2FkZWQsITEpLHRoaXMuc2Nyb2xsTWFuYWdlci5zdGFydCgpLHRoaXMuc3RhcnRIaXN0b3J5KCksdGhpcy5zdGFydGVkPSEwLHRoaXMuZW5hYmxlZD0hMCk6dm9pZCAwfSxyLnByb3RvdHlwZS5kaXNhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5hYmxlZD0hMX0sci5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXJ0ZWQ/KHJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMuY2xpY2tDYXB0dXJlZCwhMCkscmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIix0aGlzLnBhZ2VMb2FkZWQsITEpLHRoaXMuc2Nyb2xsTWFuYWdlci5zdG9wKCksdGhpcy5zdG9wSGlzdG9yeSgpLHRoaXMuc3RhcnRlZD0hMSk6dm9pZCAwfSxyLnByb3RvdHlwZS5jbGVhckNhY2hlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2FjaGU9bmV3IHQuU25hcHNob3RDYWNoZSgxMCl9LHIucHJvdG90eXBlLnZpc2l0PWZ1bmN0aW9uKGUscil7dmFyIG4sbztyZXR1cm4gbnVsbD09ciYmKHI9e30pLGU9dC5Mb2NhdGlvbi53cmFwKGUpLHRoaXMuYXBwbGljYXRpb25BbGxvd3NWaXNpdGluZ0xvY2F0aW9uKGUpP3RoaXMubG9jYXRpb25Jc1Zpc2l0YWJsZShlKT8obj1udWxsIT0obz1yLmFjdGlvbik/bzpcImFkdmFuY2VcIix0aGlzLmFkYXB0ZXIudmlzaXRQcm9wb3NlZFRvTG9jYXRpb25XaXRoQWN0aW9uKGUsbikpOndpbmRvdy5sb2NhdGlvbj1lOnZvaWQgMH0sci5wcm90b3R5cGUuc3RhcnRWaXNpdFRvTG9jYXRpb25XaXRoQWN0aW9uPWZ1bmN0aW9uKGUscixuKXt2YXIgbztyZXR1cm4gdC5zdXBwb3J0ZWQ/KG89dGhpcy5nZXRSZXN0b3JhdGlvbkRhdGFGb3JJZGVudGlmaWVyKG4pLHRoaXMuc3RhcnRWaXNpdChlLHIse3Jlc3RvcmF0aW9uRGF0YTpvfSkpOndpbmRvdy5sb2NhdGlvbj1lfSxyLnByb3RvdHlwZS5zdGFydEhpc3Rvcnk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sb2NhdGlvbj10LkxvY2F0aW9uLndyYXAod2luZG93LmxvY2F0aW9uKSx0aGlzLnJlc3RvcmF0aW9uSWRlbnRpZmllcj10LnV1aWQoKSx0aGlzLmhpc3Rvcnkuc3RhcnQoKSx0aGlzLmhpc3RvcnkucmVwbGFjZSh0aGlzLmxvY2F0aW9uLHRoaXMucmVzdG9yYXRpb25JZGVudGlmaWVyKX0sci5wcm90b3R5cGUuc3RvcEhpc3Rvcnk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oaXN0b3J5LnN0b3AoKX0sci5wcm90b3R5cGUucHVzaEhpc3RvcnlXaXRoTG9jYXRpb25BbmRSZXN0b3JhdGlvbklkZW50aWZpZXI9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdGhpcy5yZXN0b3JhdGlvbklkZW50aWZpZXI9cix0aGlzLmxvY2F0aW9uPXQuTG9jYXRpb24ud3JhcChlKSx0aGlzLmhpc3RvcnkucHVzaCh0aGlzLmxvY2F0aW9uLHRoaXMucmVzdG9yYXRpb25JZGVudGlmaWVyKX0sci5wcm90b3R5cGUucmVwbGFjZUhpc3RvcnlXaXRoTG9jYXRpb25BbmRSZXN0b3JhdGlvbklkZW50aWZpZXI9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdGhpcy5yZXN0b3JhdGlvbklkZW50aWZpZXI9cix0aGlzLmxvY2F0aW9uPXQuTG9jYXRpb24ud3JhcChlKSx0aGlzLmhpc3RvcnkucmVwbGFjZSh0aGlzLmxvY2F0aW9uLHRoaXMucmVzdG9yYXRpb25JZGVudGlmaWVyKX0sci5wcm90b3R5cGUuaGlzdG9yeVBvcHBlZFRvTG9jYXRpb25XaXRoUmVzdG9yYXRpb25JZGVudGlmaWVyPWZ1bmN0aW9uKGUscil7dmFyIG47cmV0dXJuIHRoaXMucmVzdG9yYXRpb25JZGVudGlmaWVyPXIsdGhpcy5lbmFibGVkPyhuPXRoaXMuZ2V0UmVzdG9yYXRpb25EYXRhRm9ySWRlbnRpZmllcih0aGlzLnJlc3RvcmF0aW9uSWRlbnRpZmllciksdGhpcy5zdGFydFZpc2l0KGUsXCJyZXN0b3JlXCIse3Jlc3RvcmF0aW9uSWRlbnRpZmllcjp0aGlzLnJlc3RvcmF0aW9uSWRlbnRpZmllcixyZXN0b3JhdGlvbkRhdGE6bixoaXN0b3J5Q2hhbmdlZDohMH0pLHRoaXMubG9jYXRpb249dC5Mb2NhdGlvbi53cmFwKGUpKTp0aGlzLmFkYXB0ZXIucGFnZUludmFsaWRhdGVkKCl9LHIucHJvdG90eXBlLmdldENhY2hlZFNuYXBzaG90Rm9yTG9jYXRpb249ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIGU9dGhpcy5jYWNoZS5nZXQodCksZT9lLmNsb25lKCk6dm9pZCAwfSxyLnByb3RvdHlwZS5zaG91bGRDYWNoZVNuYXBzaG90PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlldy5nZXRTbmFwc2hvdCgpLmlzQ2FjaGVhYmxlKCl9LHIucHJvdG90eXBlLmNhY2hlU25hcHNob3Q9ZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gdGhpcy5zaG91bGRDYWNoZVNuYXBzaG90KCk/KHRoaXMubm90aWZ5QXBwbGljYXRpb25CZWZvcmVDYWNoaW5nU25hcHNob3QoKSx0PXRoaXMudmlldy5nZXRTbmFwc2hvdCgpLHRoaXMuY2FjaGUucHV0KHRoaXMubGFzdFJlbmRlcmVkTG9jYXRpb24sdC5jbG9uZSgpKSk6dm9pZCAwfSxyLnByb3RvdHlwZS5zY3JvbGxUb0FuY2hvcj1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4oZT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0KSk/dGhpcy5zY3JvbGxUb0VsZW1lbnQoZSk6dGhpcy5zY3JvbGxUb1Bvc2l0aW9uKHt4OjAseTowfSl9LHIucHJvdG90eXBlLnNjcm9sbFRvRWxlbWVudD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5zY3JvbGxNYW5hZ2VyLnNjcm9sbFRvRWxlbWVudCh0KX0sci5wcm90b3R5cGUuc2Nyb2xsVG9Qb3NpdGlvbj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5zY3JvbGxNYW5hZ2VyLnNjcm9sbFRvUG9zaXRpb24odCl9LHIucHJvdG90eXBlLnNjcm9sbFBvc2l0aW9uQ2hhbmdlZD1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gZT10aGlzLmdldEN1cnJlbnRSZXN0b3JhdGlvbkRhdGEoKSxlLnNjcm9sbFBvc2l0aW9uPXR9LHIucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnZpZXcucmVuZGVyKHQsZSl9LHIucHJvdG90eXBlLnZpZXdJbnZhbGlkYXRlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFkYXB0ZXIucGFnZUludmFsaWRhdGVkKCl9LHIucHJvdG90eXBlLnZpZXdXaWxsUmVuZGVyPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vdGlmeUFwcGxpY2F0aW9uQmVmb3JlUmVuZGVyKHQpfSxyLnByb3RvdHlwZS52aWV3UmVuZGVyZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sYXN0UmVuZGVyZWRMb2NhdGlvbj10aGlzLmN1cnJlbnRWaXNpdC5sb2NhdGlvbix0aGlzLm5vdGlmeUFwcGxpY2F0aW9uQWZ0ZXJSZW5kZXIoKX0sci5wcm90b3R5cGUucGFnZUxvYWRlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmxhc3RSZW5kZXJlZExvY2F0aW9uPXRoaXMubG9jYXRpb24sdGhpcy5ub3RpZnlBcHBsaWNhdGlvbkFmdGVyUGFnZUxvYWQoKX0sci5wcm90b3R5cGUuY2xpY2tDYXB0dXJlZD1mdW5jdGlvbigpe3JldHVybiByZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLmNsaWNrQnViYmxlZCwhMSksYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5jbGlja0J1YmJsZWQsITEpfSxyLnByb3RvdHlwZS5jbGlja0J1YmJsZWQ9ZnVuY3Rpb24odCl7dmFyIGUscixuO3JldHVybiB0aGlzLmVuYWJsZWQmJnRoaXMuY2xpY2tFdmVudElzU2lnbmlmaWNhbnQodCkmJihyPXRoaXMuZ2V0VmlzaXRhYmxlTGlua0Zvck5vZGUodC50YXJnZXQpKSYmKG49dGhpcy5nZXRWaXNpdGFibGVMb2NhdGlvbkZvckxpbmsocikpJiZ0aGlzLmFwcGxpY2F0aW9uQWxsb3dzRm9sbG93aW5nTGlua1RvTG9jYXRpb24ocixuKT8odC5wcmV2ZW50RGVmYXVsdCgpLGU9dGhpcy5nZXRBY3Rpb25Gb3JMaW5rKHIpLHRoaXMudmlzaXQobix7YWN0aW9uOmV9KSk6dm9pZCAwfSxyLnByb3RvdHlwZS5hcHBsaWNhdGlvbkFsbG93c0ZvbGxvd2luZ0xpbmtUb0xvY2F0aW9uPWZ1bmN0aW9uKHQsZSl7dmFyIHI7cmV0dXJuIHI9dGhpcy5ub3RpZnlBcHBsaWNhdGlvbkFmdGVyQ2xpY2tpbmdMaW5rVG9Mb2NhdGlvbih0LGUpLCFyLmRlZmF1bHRQcmV2ZW50ZWR9LHIucHJvdG90eXBlLmFwcGxpY2F0aW9uQWxsb3dzVmlzaXRpbmdMb2NhdGlvbj1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gZT10aGlzLm5vdGlmeUFwcGxpY2F0aW9uQmVmb3JlVmlzaXRpbmdMb2NhdGlvbih0KSwhZS5kZWZhdWx0UHJldmVudGVkfSxyLnByb3RvdHlwZS5ub3RpZnlBcHBsaWNhdGlvbkFmdGVyQ2xpY2tpbmdMaW5rVG9Mb2NhdGlvbj1mdW5jdGlvbihlLHIpe3JldHVybiB0LmRpc3BhdGNoKFwidHVyYm9saW5rczpjbGlja1wiLHt0YXJnZXQ6ZSxkYXRhOnt1cmw6ci5hYnNvbHV0ZVVSTH0sY2FuY2VsYWJsZTohMH0pfSxyLnByb3RvdHlwZS5ub3RpZnlBcHBsaWNhdGlvbkJlZm9yZVZpc2l0aW5nTG9jYXRpb249ZnVuY3Rpb24oZSl7cmV0dXJuIHQuZGlzcGF0Y2goXCJ0dXJib2xpbmtzOmJlZm9yZS12aXNpdFwiLHtkYXRhOnt1cmw6ZS5hYnNvbHV0ZVVSTH0sY2FuY2VsYWJsZTohMH0pfSxyLnByb3RvdHlwZS5ub3RpZnlBcHBsaWNhdGlvbkFmdGVyVmlzaXRpbmdMb2NhdGlvbj1mdW5jdGlvbihlKXtyZXR1cm4gdC5kaXNwYXRjaChcInR1cmJvbGlua3M6dmlzaXRcIix7ZGF0YTp7dXJsOmUuYWJzb2x1dGVVUkx9fSl9LHIucHJvdG90eXBlLm5vdGlmeUFwcGxpY2F0aW9uQmVmb3JlQ2FjaGluZ1NuYXBzaG90PWZ1bmN0aW9uKCl7cmV0dXJuIHQuZGlzcGF0Y2goXCJ0dXJib2xpbmtzOmJlZm9yZS1jYWNoZVwiKX0sci5wcm90b3R5cGUubm90aWZ5QXBwbGljYXRpb25CZWZvcmVSZW5kZXI9ZnVuY3Rpb24oZSl7XG5yZXR1cm4gdC5kaXNwYXRjaChcInR1cmJvbGlua3M6YmVmb3JlLXJlbmRlclwiLHtkYXRhOntuZXdCb2R5OmV9fSl9LHIucHJvdG90eXBlLm5vdGlmeUFwcGxpY2F0aW9uQWZ0ZXJSZW5kZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXNwYXRjaChcInR1cmJvbGlua3M6cmVuZGVyXCIpfSxyLnByb3RvdHlwZS5ub3RpZnlBcHBsaWNhdGlvbkFmdGVyUGFnZUxvYWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWUmJihlPXt9KSx0LmRpc3BhdGNoKFwidHVyYm9saW5rczpsb2FkXCIse2RhdGE6e3VybDp0aGlzLmxvY2F0aW9uLmFic29sdXRlVVJMLHRpbWluZzplfX0pfSxyLnByb3RvdHlwZS5zdGFydFZpc2l0PWZ1bmN0aW9uKHQsZSxyKXt2YXIgbjtyZXR1cm4gbnVsbCE9KG49dGhpcy5jdXJyZW50VmlzaXQpJiZuLmNhbmNlbCgpLHRoaXMuY3VycmVudFZpc2l0PXRoaXMuY3JlYXRlVmlzaXQodCxlLHIpLHRoaXMuY3VycmVudFZpc2l0LnN0YXJ0KCksdGhpcy5ub3RpZnlBcHBsaWNhdGlvbkFmdGVyVmlzaXRpbmdMb2NhdGlvbih0KX0sci5wcm90b3R5cGUuY3JlYXRlVmlzaXQ9ZnVuY3Rpb24oZSxyLG4pe3ZhciBvLGkscyxhLHU7cmV0dXJuIGk9bnVsbCE9bj9uOnt9LGE9aS5yZXN0b3JhdGlvbklkZW50aWZpZXIscz1pLnJlc3RvcmF0aW9uRGF0YSxvPWkuaGlzdG9yeUNoYW5nZWQsdT1uZXcgdC5WaXNpdCh0aGlzLGUsciksdS5yZXN0b3JhdGlvbklkZW50aWZpZXI9bnVsbCE9YT9hOnQudXVpZCgpLHUucmVzdG9yYXRpb25EYXRhPXQuY29weU9iamVjdChzKSx1Lmhpc3RvcnlDaGFuZ2VkPW8sdS5yZWZlcnJlcj10aGlzLmxvY2F0aW9uLHV9LHIucHJvdG90eXBlLnZpc2l0Q29tcGxldGVkPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm5vdGlmeUFwcGxpY2F0aW9uQWZ0ZXJQYWdlTG9hZCh0LmdldFRpbWluZ01ldHJpY3MoKSl9LHIucHJvdG90eXBlLmNsaWNrRXZlbnRJc1NpZ25pZmljYW50PWZ1bmN0aW9uKHQpe3JldHVybiEodC5kZWZhdWx0UHJldmVudGVkfHx0LnRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZXx8dC53aGljaD4xfHx0LmFsdEtleXx8dC5jdHJsS2V5fHx0Lm1ldGFLZXl8fHQuc2hpZnRLZXkpfSxyLnByb3RvdHlwZS5nZXRWaXNpdGFibGVMaW5rRm9yTm9kZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5ub2RlSXNWaXNpdGFibGUoZSk/dC5jbG9zZXN0KGUsXCJhW2hyZWZdOm5vdChbdGFyZ2V0XSk6bm90KFtkb3dubG9hZF0pXCIpOnZvaWQgMH0sci5wcm90b3R5cGUuZ2V0VmlzaXRhYmxlTG9jYXRpb25Gb3JMaW5rPWZ1bmN0aW9uKGUpe3ZhciByO3JldHVybiByPW5ldyB0LkxvY2F0aW9uKGUuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSksdGhpcy5sb2NhdGlvbklzVmlzaXRhYmxlKHIpP3I6dm9pZCAwfSxyLnByb3RvdHlwZS5nZXRBY3Rpb25Gb3JMaW5rPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBudWxsIT0oZT10LmdldEF0dHJpYnV0ZShcImRhdGEtdHVyYm9saW5rcy1hY3Rpb25cIikpP2U6XCJhZHZhbmNlXCJ9LHIucHJvdG90eXBlLm5vZGVJc1Zpc2l0YWJsZT1mdW5jdGlvbihlKXt2YXIgcjtyZXR1cm4ocj10LmNsb3Nlc3QoZSxcIltkYXRhLXR1cmJvbGlua3NdXCIpKT9cImZhbHNlXCIhPT1yLmdldEF0dHJpYnV0ZShcImRhdGEtdHVyYm9saW5rc1wiKTohMH0sci5wcm90b3R5cGUubG9jYXRpb25Jc1Zpc2l0YWJsZT1mdW5jdGlvbih0KXtyZXR1cm4gdC5pc1ByZWZpeGVkQnkodGhpcy52aWV3LmdldFJvb3RMb2NhdGlvbigpKSYmdC5pc0hUTUwoKX0sci5wcm90b3R5cGUuZ2V0Q3VycmVudFJlc3RvcmF0aW9uRGF0YT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFJlc3RvcmF0aW9uRGF0YUZvcklkZW50aWZpZXIodGhpcy5yZXN0b3JhdGlvbklkZW50aWZpZXIpfSxyLnByb3RvdHlwZS5nZXRSZXN0b3JhdGlvbkRhdGFGb3JJZGVudGlmaWVyPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBudWxsIT0oZT10aGlzLnJlc3RvcmF0aW9uRGF0YSlbdF0/ZVt0XTplW3RdPXt9fSxyfSgpfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7dmFyIGUscixuO3Quc3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gcigpPyhudWxsPT10LmNvbnRyb2xsZXImJih0LmNvbnRyb2xsZXI9ZSgpKSx0LmNvbnRyb2xsZXIuc3RhcnQoKSk6dm9pZCAwfSxyPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PXdpbmRvdy5UdXJib2xpbmtzJiYod2luZG93LlR1cmJvbGlua3M9dCksbigpfSxlPWZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIGU9bmV3IHQuQ29udHJvbGxlcixlLmFkYXB0ZXI9bmV3IHQuQnJvd3NlckFkYXB0ZXIoZSksZX0sbj1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cuVHVyYm9saW5rcz09PXR9LG4oKSYmdC5zdGFydCgpfS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzKSxcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz10OlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCYmZGVmaW5lKHQpfSkuY2FsbCh0aGlzKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdHVyYm9saW5rcy9kaXN0L3R1cmJvbGlua3MuanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==